# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.contrib.postgres.fields
import uuid
import picklefield.fields


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ElectricTariffModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('urdb_utilty_name', models.TextField(default=b'', blank=True)),
                ('urdb_rate_name', models.TextField(default=b'', blank=True)),
                ('urdb_label', models.TextField(default=b'', blank=True)),
                ('blended_monthly_rates_us_dollars_per_kwh', django.contrib.postgres.fields.ArrayField(default=[], base_field=models.FloatField(blank=True), size=None)),
                ('monthly_demand_charges_us_dollars_per_kw', django.contrib.postgres.fields.ArrayField(default=[], base_field=models.FloatField(blank=True), size=None)),
                ('net_metering_limit_kw', models.FloatField()),
                ('interconnection_limit_kw', models.FloatField()),
                ('wholesale_rate_us_dollars_per_kwh', models.FloatField()),
                ('urdb_response', picklefield.fields.PickledObjectField(null=True, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='ElectricTariffOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('year_one_energy_cost_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_demand_cost_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_fixed_cost_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_min_charge_adder_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_energy_cost_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_demand_cost_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_fixed_cost_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_min_charge_adder_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_energy_cost_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_demand_cost_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_fixed_cost_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_min_charge_adder_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_energy_cost_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_demand_cost_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_fixed_cost_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('total_min_charge_adder_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_bill_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_bill_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_export_benefit_us_dollars', models.FloatField(null=True, blank=True)),
                ('year_one_energy_cost_series_us_dollars_per_kwh', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_demand_cost_series_us_dollars_per_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_energy_supplied_kwh', models.FloatField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='FinancialModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('analysis_years', models.IntegerField()),
                ('escalation_pct', models.FloatField()),
                ('om_cost_growth_pct', models.FloatField()),
                ('offtaker_discount_pct', models.FloatField()),
                ('offtaker_tax_pct', models.FloatField()),
                ('owner_discount_pct', models.FloatField(null=True)),
                ('owner_tax_pct', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FinancialOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('lcc_us_dollars', models.FloatField(null=True, blank=True)),
                ('lcc_bau_us_dollars', models.FloatField(null=True, blank=True)),
                ('npv_us_dollars', models.FloatField(null=True, blank=True)),
                ('net_capital_costs_plus_om_us_dollars', models.FloatField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='LoadProfileModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('doe_reference_name', models.TextField(default=b'', null=True, blank=True)),
                ('annual_kwh', models.FloatField(null=True, blank=True)),
                ('year', models.IntegerField(default=2018)),
                ('monthly_totals_kwh', django.contrib.postgres.fields.ArrayField(default=[], base_field=models.FloatField(blank=True), size=None)),
                ('loads_kw', django.contrib.postgres.fields.ArrayField(default=[], base_field=models.FloatField(blank=True), size=None)),
                ('outage_start_hour', models.IntegerField(null=True, blank=True)),
                ('outage_end_hour', models.IntegerField(null=True, blank=True)),
                ('critical_load_pct', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='LoadProfileOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('year_one_electric_load_series_kw', django.contrib.postgres.fields.ArrayField(default=[], base_field=models.FloatField(blank=True), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='MessagesModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('warnings', picklefield.fields.PickledObjectField(null=True, editable=False)),
                ('errors', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='OutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
        ),
        migrations.CreateModel(
            name='PVModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('min_kw', models.FloatField()),
                ('max_kw', models.FloatField()),
                ('installed_cost_us_dollars_per_kw', models.FloatField()),
                ('om_cost_us_dollars_per_kw', models.FloatField()),
                ('macrs_option_years', models.IntegerField()),
                ('macrs_bonus_pct', models.FloatField()),
                ('macrs_itc_reduction', models.FloatField()),
                ('federal_itc_pct', models.FloatField()),
                ('state_ibi_pct', models.FloatField()),
                ('state_ibi_max_us_dollars', models.FloatField()),
                ('utility_ibi_pct', models.FloatField()),
                ('utility_ibi_max_us_dollars', models.FloatField()),
                ('federal_rebate_us_dollars_per_kw', models.FloatField()),
                ('state_rebate_us_dollars_per_kw', models.FloatField()),
                ('state_rebate_max_us_dollars', models.FloatField()),
                ('utility_rebate_us_dollars_per_kw', models.FloatField()),
                ('utility_rebate_max_us_dollars', models.FloatField()),
                ('pbi_us_dollars_per_kwh', models.FloatField()),
                ('pbi_max_us_dollars', models.FloatField()),
                ('pbi_years', models.FloatField()),
                ('pbi_system_max_kw', models.FloatField()),
                ('degradation_pct', models.FloatField(null=True, blank=True)),
                ('azimuth', models.FloatField()),
                ('losses', models.FloatField()),
                ('array_type', models.IntegerField()),
                ('module_type', models.IntegerField()),
                ('gcr', models.FloatField()),
                ('dc_ac_ratio', models.FloatField()),
                ('inv_eff', models.FloatField()),
                ('radius', models.FloatField()),
                ('tilt', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='PVOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('size_kw', models.FloatField(null=True, blank=True)),
                ('average_yearly_energy_produced_kwh', models.FloatField(null=True, blank=True)),
                ('average_yearly_energy_exported_kwh', models.FloatField(null=True, blank=True)),
                ('year_one_energy_produced_kwh', models.FloatField(null=True, blank=True)),
                ('year_one_power_production_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='REoptPost',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='REoptResponse',
            fields=[
                ('id', models.UUIDField(unique=True, serialize=False, primary_key=True)),
                ('api_version', models.TextField(default=b'', blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('inputs', models.ForeignKey(to='reo.REoptPost')),
                ('messages', models.ForeignKey(to='reo.MessagesModel')),
                ('outputs', models.ForeignKey(to='reo.OutputModel')),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('timeout_seconds', models.IntegerField(default=295)),
                ('time_steps_per_hour', models.IntegerField(default=8760)),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.TextField(null=True, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='SiteModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('land_acres', models.FloatField(null=True, blank=True)),
                ('roof_squarefeet', models.FloatField(null=True, blank=True)),
                ('ElectricTariff', models.ForeignKey(to='reo.ElectricTariffModel')),
                ('Financial', models.ForeignKey(to='reo.FinancialModel')),
                ('LoadProfile', models.ForeignKey(to='reo.LoadProfileModel')),
                ('PV', models.ForeignKey(to='reo.PVModel')),
            ],
        ),
        migrations.CreateModel(
            name='SiteOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ElectricTariff', models.ForeignKey(to='reo.ElectricTariffOutputModel')),
                ('Financial', models.ForeignKey(to='reo.FinancialOutputModel')),
                ('LoadProfile', models.ForeignKey(to='reo.LoadProfileOutputModel')),
                ('PV', models.ForeignKey(to='reo.PVOutputModel')),
            ],
        ),
        migrations.CreateModel(
            name='StorageModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('min_kw', models.FloatField()),
                ('max_kw', models.FloatField()),
                ('min_kwh', models.FloatField()),
                ('max_kwh', models.FloatField()),
                ('internal_efficiency_pct', models.FloatField()),
                ('inverter_efficiency_pct', models.FloatField()),
                ('rectifier_efficiency_pct', models.FloatField()),
                ('soc_min_pct', models.FloatField()),
                ('soc_init_pct', models.FloatField()),
                ('canGridCharge', models.BooleanField()),
                ('installed_cost_us_dollars_per_kw', models.FloatField()),
                ('installed_cost_us_dollars_per_kwh', models.FloatField()),
                ('replace_cost_us_dollars_per_kw', models.FloatField()),
                ('replace_cost_us_dollars_per_kwh', models.FloatField()),
                ('inverter_replacement_year', models.IntegerField()),
                ('battery_replacement_year', models.IntegerField()),
                ('macrs_option_years', models.IntegerField()),
                ('macrs_bonus_pct', models.FloatField()),
                ('macrs_itc_reduction', models.FloatField()),
                ('total_itc_pct', models.IntegerField()),
                ('total_rebate_us_dollars_per_kw', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='StorageOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('size_kw', models.FloatField(null=True, blank=True)),
                ('size_kwh', models.FloatField(null=True, blank=True)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_soc_series_pct', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='URDBError',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('label', models.TextField(default=b'', blank=True)),
                ('type', models.TextField(default=b'', blank=True)),
                ('message', models.TextField(default=b'', blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='WindModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('min_kw', models.FloatField()),
                ('max_kw', models.FloatField()),
                ('installed_cost_us_dollars_per_kw', models.FloatField()),
                ('om_cost_us_dollars_per_kw', models.FloatField()),
                ('macrs_option_years', models.IntegerField()),
                ('macrs_bonus_pct', models.FloatField()),
                ('macrs_itc_reduction', models.FloatField()),
                ('federal_itc_pct', models.FloatField()),
                ('state_ibi_pct', models.FloatField()),
                ('state_ibi_max_us_dollars', models.FloatField()),
                ('utility_ibi_pct', models.FloatField()),
                ('utility_ibi_max_us_dollars', models.FloatField()),
                ('federal_rebate_us_dollars_per_kw', models.FloatField()),
                ('state_rebate_us_dollars_per_kw', models.FloatField()),
                ('state_rebate_max_us_dollars', models.FloatField()),
                ('utility_rebate_us_dollars_per_kw', models.FloatField()),
                ('utility_rebate_max_us_dollars', models.FloatField()),
                ('pbi_us_dollars_per_kwh', models.FloatField()),
                ('pbi_max_us_dollars', models.FloatField()),
                ('pbi_years', models.FloatField()),
                ('pbi_system_max_kw', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='WindOutputModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('size_kw', models.FloatField(null=True, blank=True)),
                ('average_yearly_energy_produced_kwh', models.FloatField(null=True, blank=True)),
                ('average_yearly_energy_exported_kwh', models.FloatField(null=True, blank=True)),
                ('year_one_energy_produced_kwh', models.FloatField(null=True, blank=True)),
                ('year_one_power_production_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(size=None, null=True, base_field=models.FloatField(null=True, blank=True), blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkingResponse',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('api_version', models.TextField(default=b'', blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('inputs', picklefield.fields.PickledObjectField(null=True, editable=False)),
                ('outputs', picklefield.fields.PickledObjectField(null=True, editable=False)),
                ('messages', picklefield.fields.PickledObjectField(null=True, editable=False)),
            ],
        ),
        migrations.AddField(
            model_name='siteoutputmodel',
            name='Storage',
            field=models.ForeignKey(to='reo.StorageOutputModel'),
        ),
        migrations.AddField(
            model_name='siteoutputmodel',
            name='Wind',
            field=models.ForeignKey(to='reo.WindOutputModel'),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='Storage',
            field=models.ForeignKey(to='reo.StorageModel'),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='Wind',
            field=models.ForeignKey(to='reo.WindModel'),
        ),
        migrations.AddField(
            model_name='scenariooutputmodel',
            name='Site',
            field=models.ForeignKey(to='reo.SiteOutputModel'),
        ),
        migrations.AddField(
            model_name='scenariomodel',
            name='Site',
            field=models.ForeignKey(to='reo.SiteModel'),
        ),
        migrations.AddField(
            model_name='reoptpost',
            name='Scenario',
            field=models.ForeignKey(to='reo.ScenarioModel'),
        ),
        migrations.AddField(
            model_name='outputmodel',
            name='Scenario',
            field=models.ForeignKey(blank=True, to='reo.ScenarioOutputModel', null=True),
        ),
    ]
