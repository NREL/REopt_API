# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-07-10 18:08
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import picklefield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RunInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.TextField(blank=True, default=b'')),
                ('api_version', models.TextField(blank=True, default=b'')),
                ('timeout', models.IntegerField(blank=True, default=295, null=True)),
                ('time_steps_per_hour', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('land_area', models.FloatField(blank=True, null=True)),
                ('roof_area', models.FloatField(blank=True, null=True)),
                ('urdb_rate', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('load_profile_name', models.TextField(blank=True, default=b'', null=True)),
                ('load_size', models.FloatField(blank=True, null=True)),
                ('load_year', models.IntegerField(blank=True, default=2018, null=True)),
                ('load_8760_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('load_monthly_kwh', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('utility_name', models.TextField(blank=True, default=b'')),
                ('rate_name', models.TextField(blank=True, default=b'')),
                ('blended_utility_rate', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('demand_charge', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('analysis_period', models.IntegerField(blank=True, null=True)),
                ('offtaker_discount_rate', models.FloatField(blank=True, null=True)),
                ('offtaker_tax_rate', models.FloatField(blank=True, null=True)),
                ('owner_discount_rate', models.FloatField(blank=True, null=True)),
                ('owner_tax_rate', models.FloatField(blank=True, null=True)),
                ('rate_escalation', models.FloatField(blank=True, null=True)),
                ('rate_inflation', models.FloatField(blank=True, null=True)),
                ('net_metering_limit', models.FloatField(blank=True, null=True)),
                ('wholesale_rate', models.FloatField(blank=True, null=True)),
                ('interconnection_limit', models.FloatField(blank=True, null=True)),
                ('pv_cost', models.FloatField(blank=True, null=True)),
                ('pv_om', models.FloatField(blank=True, null=True)),
                ('pv_kw_max', models.FloatField(blank=True, null=True)),
                ('pv_kw_min', models.FloatField(blank=True, null=True)),
                ('module_type', models.IntegerField(blank=True, null=True)),
                ('azimuth', models.FloatField(blank=True, null=True)),
                ('losses', models.FloatField(blank=True, null=True)),
                ('dc_ac_ratio', models.FloatField(blank=True, null=True)),
                ('gcr', models.FloatField(blank=True, null=True)),
                ('dataset', models.TextField(blank=True, default=b'')),
                ('inv_eff', models.FloatField(blank=True, null=True)),
                ('system_capacity', models.FloatField(blank=True, null=True)),
                ('array_type', models.IntegerField(blank=True, null=True)),
                ('timeframe', models.TextField(blank=True, default=b'')),
                ('radius', models.FloatField(blank=True, null=True)),
                ('tilt', models.FloatField(blank=True, null=True)),
                ('pv_degradation_rate', models.FloatField(blank=True, null=True)),
                ('pv_itc_federal', models.FloatField(blank=True, null=True)),
                ('pv_itc_state', models.FloatField(blank=True, null=True)),
                ('pv_itc_utility', models.FloatField(blank=True, null=True)),
                ('pv_itc_federal_max', models.FloatField(blank=True, null=True)),
                ('pv_itc_state_max', models.FloatField(blank=True, null=True)),
                ('pv_itc_utility_max', models.FloatField(blank=True, null=True)),
                ('pv_rebate_federal', models.FloatField(blank=True, null=True)),
                ('pv_rebate_state', models.FloatField(blank=True, null=True)),
                ('pv_rebate_utility', models.FloatField(blank=True, null=True)),
                ('pv_rebate_federal_max', models.FloatField(blank=True, null=True)),
                ('pv_rebate_state_max', models.FloatField(blank=True, null=True)),
                ('pv_rebate_utility_max', models.FloatField(blank=True, null=True)),
                ('pv_pbi', models.FloatField(blank=True, null=True)),
                ('pv_pbi_max', models.FloatField(blank=True, null=True)),
                ('pv_pbi_years', models.FloatField(blank=True, null=True)),
                ('pv_pbi_system_max', models.FloatField(blank=True, null=True)),
                ('pv_macrs_schedule', models.IntegerField(blank=True, null=True)),
                ('pv_macrs_bonus_fraction', models.FloatField(blank=True, null=True)),
                ('batt_cost_kwh', models.FloatField(blank=True, null=True)),
                ('batt_cost_kw', models.FloatField(blank=True, null=True)),
                ('batt_replacement_cost_kw', models.FloatField(blank=True, null=True)),
                ('batt_replacement_cost_kwh', models.FloatField(blank=True, null=True)),
                ('batt_replacement_year_kw', models.IntegerField(blank=True, null=True)),
                ('batt_replacement_year_kwh', models.IntegerField(blank=True, null=True)),
                ('batt_kw_max', models.FloatField(blank=True, null=True)),
                ('batt_kw_min', models.FloatField(blank=True, null=True)),
                ('batt_kwh_max', models.FloatField(blank=True, null=True)),
                ('batt_kwh_min', models.FloatField(blank=True, null=True)),
                ('batt_efficiency', models.FloatField(blank=True, null=True)),
                ('batt_inverter_efficiency', models.FloatField(blank=True, null=True)),
                ('batt_rectifier_efficiency', models.FloatField(blank=True, null=True)),
                ('batt_soc_min', models.FloatField(blank=True, null=True)),
                ('batt_soc_init', models.FloatField(blank=True, null=True)),
                ('batt_can_gridcharge', models.FloatField(blank=True, null=True)),
                ('batt_itc_federal', models.FloatField(blank=True, null=True)),
                ('batt_itc_state', models.FloatField(blank=True, null=True)),
                ('batt_itc_utility', models.FloatField(blank=True, null=True)),
                ('batt_itc_federal_max', models.FloatField(blank=True, null=True)),
                ('batt_itc_state_max', models.FloatField(blank=True, null=True)),
                ('batt_itc_utility_max', models.FloatField(blank=True, null=True)),
                ('batt_rebate_federal', models.FloatField(blank=True, null=True)),
                ('batt_rebate_state', models.FloatField(blank=True, null=True)),
                ('batt_rebate_utility', models.FloatField(blank=True, null=True)),
                ('batt_rebate_federal_max', models.FloatField(blank=True, null=True)),
                ('batt_rebate_state_max', models.FloatField(blank=True, null=True)),
                ('batt_rebate_utility_max', models.FloatField(blank=True, null=True)),
                ('batt_macrs_schedule', models.IntegerField(blank=True, null=True)),
                ('batt_macrs_bonus_fraction', models.FloatField(blank=True, null=True)),
                ('batt_macrs_itc_reduction', models.FloatField(blank=True, null=True)),
                ('outage_start', models.IntegerField(blank=True, null=True)),
                ('outage_end', models.IntegerField(blank=True, null=True)),
                ('crit_load_factor', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RunOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('run_input_id', models.IntegerField()),
                ('user_id', models.TextField(blank=True, default=b'', null=True)),
                ('api_version', models.TextField(blank=True, default=b'')),
                ('timeout', models.IntegerField(blank=True, default=295, null=True)),
                ('time_steps_per_hour', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('land_area', models.FloatField(blank=True, null=True)),
                ('roof_area', models.FloatField(blank=True, null=True)),
                ('urdb_rate', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('load_profile_name', models.TextField(blank=True, default=b'', null=True)),
                ('load_size', models.FloatField(blank=True, null=True)),
                ('load_year', models.IntegerField(blank=True, default=2018, null=True)),
                ('load_8760_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('load_monthly_kwh', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('utility_name', models.TextField(blank=True, default=b'')),
                ('rate_name', models.TextField(blank=True, default=b'')),
                ('blended_utility_rate', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('demand_charge', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('pv_kw_ac_hourly', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=[], null=True, size=None)),
                ('analysis_period', models.IntegerField(blank=True, null=True)),
                ('offtaker_discount_rate', models.FloatField(blank=True, null=True)),
                ('offtaker_tax_rate', models.FloatField(blank=True, null=True)),
                ('owner_discount_rate', models.FloatField(blank=True, null=True)),
                ('owner_tax_rate', models.FloatField(blank=True, null=True)),
                ('rate_escalation', models.FloatField(blank=True, null=True)),
                ('rate_inflation', models.FloatField(blank=True, null=True)),
                ('net_metering_limit', models.FloatField(blank=True, null=True)),
                ('wholesale_rate', models.FloatField(blank=True, null=True)),
                ('interconnection_limit', models.FloatField(blank=True, null=True)),
                ('pv_cost', models.FloatField(blank=True, null=True)),
                ('pv_om', models.FloatField(blank=True, null=True)),
                ('pv_kw_max', models.FloatField(blank=True, null=True)),
                ('pv_kw_min', models.FloatField(blank=True, null=True)),
                ('module_type', models.IntegerField(blank=True, null=True)),
                ('azimuth', models.FloatField(blank=True, null=True)),
                ('losses', models.FloatField(blank=True, null=True)),
                ('dc_ac_ratio', models.FloatField(blank=True, null=True)),
                ('gcr', models.FloatField(blank=True, null=True)),
                ('dataset', models.TextField(blank=True, default=b'')),
                ('inv_eff', models.FloatField(blank=True, null=True)),
                ('system_capacity', models.FloatField(blank=True, null=True)),
                ('array_type', models.IntegerField(blank=True, null=True)),
                ('timeframe', models.TextField(blank=True, default=b'')),
                ('radius', models.FloatField(blank=True, null=True)),
                ('tilt', models.FloatField(blank=True, null=True)),
                ('pv_degradation_rate', models.FloatField(blank=True, null=True)),
                ('pv_itc_federal', models.FloatField(blank=True, null=True)),
                ('pv_itc_state', models.FloatField(blank=True, null=True)),
                ('pv_itc_utility', models.FloatField(blank=True, null=True)),
                ('pv_itc_federal_max', models.FloatField(blank=True, null=True)),
                ('pv_itc_state_max', models.FloatField(blank=True, null=True)),
                ('pv_itc_utility_max', models.FloatField(blank=True, null=True)),
                ('pv_rebate_federal', models.FloatField(blank=True, null=True)),
                ('pv_rebate_state', models.FloatField(blank=True, null=True)),
                ('pv_rebate_utility', models.FloatField(blank=True, null=True)),
                ('pv_rebate_federal_max', models.FloatField(blank=True, null=True)),
                ('pv_rebate_state_max', models.FloatField(blank=True, null=True)),
                ('pv_rebate_utility_max', models.FloatField(blank=True, null=True)),
                ('pv_pbi', models.FloatField(blank=True, null=True)),
                ('pv_pbi_max', models.FloatField(blank=True, null=True)),
                ('pv_pbi_years', models.FloatField(blank=True, null=True)),
                ('pv_pbi_system_max', models.FloatField(blank=True, null=True)),
                ('pv_macrs_schedule', models.IntegerField(blank=True, null=True)),
                ('pv_macrs_bonus_fraction', models.FloatField(blank=True, null=True)),
                ('batt_cost_kwh', models.FloatField(blank=True, null=True)),
                ('batt_cost_kw', models.FloatField(blank=True, null=True)),
                ('batt_replacement_cost_kw', models.FloatField(blank=True, null=True)),
                ('batt_replacement_cost_kwh', models.FloatField(blank=True, null=True)),
                ('batt_replacement_year_kw', models.IntegerField(blank=True, null=True)),
                ('batt_replacement_year_kwh', models.IntegerField(blank=True, null=True)),
                ('batt_kw_max', models.FloatField(blank=True, null=True)),
                ('batt_kw_min', models.FloatField(blank=True, null=True)),
                ('batt_kwh_max', models.FloatField(blank=True, null=True)),
                ('batt_kwh_min', models.FloatField(blank=True, null=True)),
                ('batt_efficiency', models.FloatField(blank=True, null=True)),
                ('batt_inverter_efficiency', models.FloatField(blank=True, null=True)),
                ('batt_rectifier_efficiency', models.FloatField(blank=True, null=True)),
                ('batt_soc_min', models.FloatField(blank=True, null=True)),
                ('batt_soc_init', models.FloatField(blank=True, null=True)),
                ('batt_can_gridcharge', models.FloatField(blank=True, null=True)),
                ('batt_itc_federal', models.FloatField(blank=True, null=True)),
                ('batt_itc_state', models.FloatField(blank=True, null=True)),
                ('batt_itc_utility', models.FloatField(blank=True, null=True)),
                ('batt_itc_federal_max', models.FloatField(blank=True, null=True)),
                ('batt_itc_state_max', models.FloatField(blank=True, null=True)),
                ('batt_itc_utility_max', models.FloatField(blank=True, null=True)),
                ('batt_rebate_federal', models.FloatField(blank=True, null=True)),
                ('batt_rebate_state', models.FloatField(blank=True, null=True)),
                ('batt_rebate_utility', models.FloatField(blank=True, null=True)),
                ('batt_rebate_federal_max', models.FloatField(blank=True, null=True)),
                ('batt_rebate_state_max', models.FloatField(blank=True, null=True)),
                ('batt_rebate_utility_max', models.FloatField(blank=True, null=True)),
                ('batt_macrs_schedule', models.IntegerField(blank=True, null=True)),
                ('batt_macrs_bonus_fraction', models.FloatField(blank=True, null=True)),
                ('batt_macrs_itc_reduction', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('lcc', models.FloatField(blank=True, null=True)),
                ('lcc_bau', models.FloatField(blank=True, null=True)),
                ('npv', models.FloatField(blank=True, null=True)),
                ('irr', models.FloatField(blank=True, null=True)),
                ('year_one_utility_kwh', models.FloatField(blank=True, null=True)),
                ('pv_kw', models.FloatField(blank=True, null=True)),
                ('batt_kw', models.FloatField(blank=True, null=True)),
                ('batt_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_energy_cost', models.FloatField(blank=True, null=True)),
                ('year_one_demand_cost', models.FloatField(blank=True, null=True)),
                ('year_one_energy_cost_bau', models.FloatField(blank=True, null=True)),
                ('year_one_demand_cost_bau', models.FloatField(blank=True, null=True)),
                ('year_one_payments_to_third_party_owner', models.FloatField(blank=True, null=True)),
                ('total_energy_cost', models.FloatField(blank=True, null=True)),
                ('total_demand_cost', models.FloatField(blank=True, null=True)),
                ('total_energy_cost_bau', models.FloatField(blank=True, null=True)),
                ('total_demand_cost_bau', models.FloatField(blank=True, null=True)),
                ('total_payments_to_third_party_owner', models.FloatField(blank=True, null=True)),
                ('net_capital_costs_plus_om', models.FloatField(blank=True, null=True)),
                ('average_yearly_pv_energy_produced', models.FloatField(blank=True, null=True)),
                ('year_one_electric_load_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_pv_to_battery_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_pv_to_load_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_pv_to_grid_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_grid_to_load_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_grid_to_battery_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_battery_to_load_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_battery_to_grid_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_battery_soc_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_energy_cost_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_demand_cost_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_datetime_start', models.DateTimeField(blank=True, null=True)),
                ('resilience_by_timestep', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('resilience_hours_min', models.FloatField(blank=True, null=True)),
                ('resilience_hours_max', models.FloatField(blank=True, null=True)),
                ('resilience_hours_avg', models.FloatField(blank=True, null=True)),
                ('outage_start', models.IntegerField(blank=True, null=True)),
                ('outage_end', models.IntegerField(blank=True, null=True)),
                ('crit_load_factor', models.FloatField(blank=True, null=True)),
            ],
        ),
    ]
