# Generated by Django 2.2.10 on 2020-06-12 04:37

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reo', '0063_auto_20200521_1528'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbsorptionChillerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_ton', models.FloatField(default=0)),
                ('max_ton', models.FloatField(blank=True, null=True)),
                ('chiller_cop', models.FloatField(blank=True, null=True)),
                ('installed_cost_us_dollars_per_ton', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_ton', models.FloatField(blank=True, null=True)),
                ('macrs_option_years', models.IntegerField(blank=True, null=True)),
                ('macrs_bonus_pct', models.FloatField(blank=True, null=True)),
                ('macrs_itc_reduction', models.FloatField(blank=True, null=True)),
                ('federal_itc_pct', models.FloatField(blank=True, null=True)),
                ('state_ibi_pct', models.FloatField(blank=True, null=True)),
                ('state_ibi_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('utility_ibi_pct', models.FloatField(blank=True, null=True)),
                ('utility_ibi_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('federal_rebate_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('state_rebate_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('state_rebate_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('utility_rebate_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('utility_rebate_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('size_ton', models.FloatField(blank=True, null=True)),
                ('year_one_absorp_chl_thermal_to_load_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_absorp_chl_thermal_to_tes_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_absorp_chl_thermal_consumption_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_absorp_chl_thermal_consumption_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_absorp_chl_thermal_production_tonhr', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BoilerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_mmbtu_per_hr', models.FloatField(default=0)),
                ('max_mmbtu_per_hr', models.FloatField(blank=True, null=True)),
                ('existing_boiler_production_type_steam_or_hw', models.TextField(blank=True, default='', null=True)),
                ('boiler_efficiency', models.FloatField(blank=True, default=0, null=True)),
                ('installed_cost_us_dollars_per_mmbtu_per_hr', models.FloatField(blank=True, default=0, null=True)),
                ('emissions_factor_lb_CO2_per_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_fuel_consumption_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_boiler_thermal_production_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_boiler_fuel_consumption_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_thermal_production_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_thermal_production_bau_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_emissions_lb_C02', models.FloatField(blank=True, null=True)),
                ('total_emissions_lb_C02', models.FloatField(blank=True, null=True)),
                ('year_one_emissions_bau_lb_C02', models.FloatField(blank=True, null=True)),
                ('total_emissions_bau_lb_C02', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CHPModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('prime_mover', models.TextField(blank=True, default='', null=True)),
                ('min_kw', models.FloatField(blank=True, null=True)),
                ('max_kw', models.FloatField(blank=True, null=True)),
                ('min_allowable_kw', models.FloatField(blank=True, null=True)),
                ('installed_cost_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_kwh', models.FloatField(blank=True, null=True)),
                ('elec_effic_full_load', models.FloatField(blank=True, null=True)),
                ('elec_effic_half_load', models.FloatField(blank=True, null=True)),
                ('min_turn_down_pct', models.FloatField(blank=True, null=True)),
                ('thermal_effic_full_load', models.FloatField(blank=True, null=True)),
                ('thermal_effic_half_load', models.FloatField(blank=True, null=True)),
                ('macrs_option_years', models.IntegerField(blank=True, null=True)),
                ('macrs_bonus_pct', models.FloatField(blank=True, null=True)),
                ('macrs_itc_reduction', models.FloatField(blank=True, null=True)),
                ('federal_itc_pct', models.FloatField(blank=True, null=True)),
                ('state_ibi_pct', models.FloatField(blank=True, null=True)),
                ('state_ibi_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('utility_ibi_pct', models.FloatField(blank=True, null=True)),
                ('utility_ibi_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('federal_rebate_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('state_rebate_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('state_rebate_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('utility_rebate_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('utility_rebate_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('pbi_us_dollars_per_kwh', models.FloatField(blank=True, null=True)),
                ('pbi_max_us_dollars', models.FloatField(blank=True, null=True)),
                ('pbi_years', models.FloatField(blank=True, null=True)),
                ('pbi_system_max_kw', models.FloatField(blank=True, null=True)),
                ('emissions_factor_lb_CO2_per_mmbtu', models.FloatField(blank=True, null=True)),
                ('use_default_derate', models.BooleanField(blank=True, null=True)),
                ('max_derate_factor', models.FloatField(blank=True, null=True)),
                ('derate_start_temp_degF', models.FloatField(blank=True, null=True)),
                ('derate_slope_pct_per_degF', models.FloatField(blank=True, null=True)),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('year_one_fuel_used_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_electric_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_thermal_energy_produced_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_electric_production_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_thermal_to_tes_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_emissions_lb_C02', models.FloatField(blank=True, null=True)),
                ('total_emissions_lb_C02', models.FloatField(blank=True, null=True)),
                ('year_one_emissions_bau_lb_C02', models.FloatField(blank=True, null=True)),
                ('total_emissions_bau_lb_C02', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ColdTESModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_gal', models.FloatField()),
                ('max_gal', models.FloatField()),
                ('internal_efficiency_pct', models.FloatField()),
                ('soc_min_pct', models.FloatField()),
                ('soc_init_pct', models.FloatField()),
                ('installed_cost_us_dollars_per_gal', models.FloatField()),
                ('thermal_decay_rate_fraction', models.FloatField()),
                ('om_cost_us_dollars_per_gal', models.FloatField()),
                ('macrs_option_years', models.IntegerField()),
                ('macrs_bonus_pct', models.FloatField()),
                ('size_gal', models.FloatField(blank=True, null=True)),
                ('year_one_thermal_from_cold_tes_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_cold_tes_soc_series_pct', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='ElectricChillerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_kw', models.FloatField(default=0)),
                ('max_kw', models.FloatField(blank=True, null=True)),
                ('chiller_cop', models.FloatField(blank=True, default=0, null=True)),
                ('installed_cost_us_dollars_per_kw', models.FloatField(blank=True, default=0, null=True)),
                ('year_one_electric_chiller_thermal_to_load_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_electric_chiller_thermal_to_tes_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_electric_chiller_electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_electric_chiller_electric_consumption_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_electric_chiller_thermal_production_tonhr', models.FloatField(blank=True, null=True)),
                ('year_one_electric_chiller_thermal_production_bau_tonhr', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FuelTariffModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('existing_boiler_fuel_type', models.TextField(blank=True, default='', null=True)),
                ('boiler_fuel_blended_annual_rates_us_dollars_per_mmbtu', models.FloatField(blank=True, null=True)),
                ('boiler_fuel_blended_monthly_rates_us_dollars_per_mmbtu', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None)),
                ('chp_fuel_type', models.TextField(blank=True, default='', null=True)),
                ('chp_fuel_blended_annual_rates_us_dollars_per_mmbtu', models.FloatField(blank=True, null=True)),
                ('chp_fuel_blended_monthly_rates_us_dollars_per_mmbtu', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None)),
                ('total_boiler_fuel_cost_us_dollars', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_fuel_cost_us_dollars', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_fuel_cost_bau_us_dollars', models.FloatField(blank=True, null=True)),
                ('total_chp_fuel_cost_us_dollars', models.FloatField(blank=True, null=True)),
                ('year_one_chp_fuel_cost_us_dollars', models.FloatField(blank=True, null=True)),
                ('total_boiler_fuel_cost_bau_us_dollars', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HotTESModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_gal', models.FloatField()),
                ('max_gal', models.FloatField()),
                ('internal_efficiency_pct', models.FloatField()),
                ('soc_min_pct', models.FloatField()),
                ('soc_init_pct', models.FloatField()),
                ('installed_cost_us_dollars_per_gal', models.FloatField()),
                ('thermal_decay_rate_fraction', models.FloatField()),
                ('om_cost_us_dollars_per_gal', models.FloatField()),
                ('macrs_option_years', models.IntegerField()),
                ('macrs_bonus_pct', models.FloatField()),
                ('size_gal', models.FloatField(blank=True, null=True)),
                ('year_one_thermal_from_hot_tes_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_hot_tes_soc_series_pct', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='LoadProfileBoilerFuelModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('annual_mmbtu', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('monthly_mmbtu', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None)),
                ('loads_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None)),
                ('doe_reference_name', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), default=list, size=None)),
                ('percent_share', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('annual_calculated_boiler_fuel_load_mmbtu_bau', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_fuel_load_series_mmbtu_per_hr_bau', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('year_one_boiler_fuel_load_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('year_one_boiler_thermal_load_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='LoadProfileChillerElectricModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('annual_fraction', models.FloatField(blank=True, null=True)),
                ('monthly_fraction', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None)),
                ('loads_fraction', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None)),
                ('doe_reference_name', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), default=list, size=None)),
                ('percent_share', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('annual_calculated_kwh_bau', models.FloatField(blank=True, default=0, null=True)),
                ('year_one_chiller_electric_load_series_kw_bau', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('year_one_chiller_electric_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('year_one_chiller_thermal_load_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
            ],
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='chp_does_not_reduce_demand_charges',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='chp_standby_rate_us_dollars_per_kw_per_month',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='emissions_factor_series_lb_CO2_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='total_chp_standby_cost_us_dollars',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='total_emissions_bau_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='total_emissions_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='year_one_chp_standby_cost_us_dollars',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='year_one_emissions_bau_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='year_one_emissions_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='electrictariffmodel',
            name='year_one_to_load_bau_series_kw',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None),
        ),
        migrations.AddField(
            model_name='financialmodel',
            name='boiler_fuel_escalation_pct',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='financialmodel',
            name='chp_fuel_escalation_pct',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='generatormodel',
            name='emissions_factor_lb_CO2_per_gal',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='generatormodel',
            name='total_emissions_bau_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='generatormodel',
            name='total_emissions_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='generatormodel',
            name='year_one_emissions_bau_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='generatormodel',
            name='year_one_emissions_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='loadprofilemodel',
            name='year_one_electric_load_series_kw_bau',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='elevation_ft',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='outdoor_air_temp_degF',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), default=list, size=None),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='total_emissions_bau_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='total_emissions_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='year_one_emissions_bau_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='sitemodel',
            name='year_one_emissions_lb_C02',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='loadprofilemodel',
            name='doe_reference_name',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), default=list, size=None),
        ),
    ]
