# Generated by Django 2.2.13 on 2021-03-03 23:01

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reo', '0103_auto_20210223_1608'),
    ]

    operations = [
        migrations.CreateModel(
            name='NewBoilerModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_mmbtu_per_hr', models.FloatField(blank=True, null=True)),
                ('max_mmbtu_per_hr', models.FloatField(blank=True, null=True)),
                ('boiler_efficiency', models.FloatField(blank=True, null=True)),
                ('can_supply_st', models.BooleanField(blank=True, null=True)),
                ('installed_cost_us_dollars_per_mmbtu_per_hr', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_mmbtu_per_hr', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_mmbtu', models.FloatField(blank=True, null=True)),
                ('emissions_factor_lb_CO2_per_mmbtu', models.FloatField(blank=True, null=True)),
                ('size_mmbtu_per_hr', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_fuel_consumption_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_boiler_thermal_production_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_thermal_to_tes_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_thermal_to_steamturbine_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_boiler_fuel_consumption_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_boiler_thermal_production_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_emissions_lb_C02', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SteamTurbineModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('min_kw', models.FloatField(blank=True, null=True)),
                ('max_kw', models.FloatField(blank=True, null=True)),
                ('is_condensing', models.BooleanField(blank=True, null=True)),
                ('inlet_steam_pressure_psig', models.FloatField(blank=True, null=True)),
                ('inlet_steam_temperature_degF', models.FloatField(blank=True, null=True)),
                ('inlet_steam_superheat_degF', models.FloatField(blank=True, null=True)),
                ('outlet_steam_pressure_psig', models.FloatField(blank=True, null=True)),
                ('outlet_steam_min_vapor_fraction', models.FloatField(blank=True, null=True)),
                ('isentropic_efficiency', models.FloatField(blank=True, null=True)),
                ('gearbox_generator_efficiency', models.FloatField(blank=True, null=True)),
                ('net_to_gross_electric_ratio', models.FloatField(blank=True, null=True)),
                ('installed_cost_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_kw', models.FloatField(blank=True, null=True)),
                ('om_cost_us_dollars_per_kwh', models.FloatField(blank=True, null=True)),
                ('can_net_meter', models.BooleanField(blank=True, null=True)),
                ('can_wholesale', models.BooleanField(blank=True, null=True)),
                ('can_export_beyond_site_load', models.BooleanField(blank=True, null=True)),
                ('can_curtail', models.BooleanField(blank=True, null=True)),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('year_one_thermal_consumption_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_electric_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_thermal_energy_produced_mmbtu', models.FloatField(blank=True, null=True)),
                ('year_one_thermal_consumption_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_electric_production_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_thermal_to_tes_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
            ],
        ),
        migrations.AddField(
            model_name='boilermodel',
            name='can_supply_st',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='boilermodel',
            name='year_one_thermal_to_steamturbine_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None),
        ),
        migrations.AddField(
            model_name='chpmodel',
            name='can_supply_st',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='chpmodel',
            name='year_one_thermal_to_steamturbine_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None),
        ),
        migrations.AddField(
            model_name='financialmodel',
            name='newboiler_fuel_escalation_pct',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fueltariffmodel',
            name='newboiler_fuel_blended_annual_rates_us_dollars_per_mmbtu',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fueltariffmodel',
            name='newboiler_fuel_blended_monthly_rates_us_dollars_per_mmbtu',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, null=True, size=None),
        ),
        migrations.AddField(
            model_name='fueltariffmodel',
            name='newboiler_fuel_type',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fueltariffmodel',
            name='total_newboiler_fuel_cost_us_dollars',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fueltariffmodel',
            name='year_one_newboiler_fuel_cost_us_dollars',
            field=models.FloatField(blank=True, null=True),
        ),
    ]
