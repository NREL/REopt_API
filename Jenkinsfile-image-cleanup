@Library("tada-jenkins-library") _

pipeline {
  agent none
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(daysToKeepStr: "30"))
  }
  triggers {
    cron(env.BRANCH_NAME == "main" ? "H H(0-5) * * *" : "")
  }

  environment {
    DEPLOY_IMAGE_REPO_DOMAIN = credentials("reopt-api-image-repo-domain")
    APP_IMAGE_REPO_DOMAIN = credentials("reopt-api-app-image-repo-domain")
  }

  stages {
    stage("deploy-agent") {
      agent {
        docker {
          image "${DEPLOY_IMAGE_REPO_DOMAIN}/tada-public/tada-jenkins-kube-deploy:werf-1.2"
          args tadaDockerInDockerArgs()
        }
      }

      environment {
        TMPDIR = tadaDockerInDockerTmp()
        WERF_REPO = "${APP_IMAGE_REPO_DOMAIN}/tada/reopt-api"
        WERF_LOG_VERBOSE = "true"
        WERF_SYNCHRONIZATION = ":local"
        XPRESS_LICENSE_HOST = credentials("reopt-api-xpress-license-host")
        NREL_ROOT_CERT_URL_ROOT = credentials("reopt-api-nrel-root-cert-url-root")
      }

      stages {
        stage("cleanup") {
          steps {
            withDockerRegistry(url: "https://${env.WERF_REPO}", credentialsId: "ecr:us-east-2:aws-nrel-tada-ci") {
              withCredentials([aws(credentialsId: "aws-nrel-tada-ci")]) {
                tadaRancherAllProjectNamespacesKubeConfig(projects: [[credentialsId: "kubeconfig-nrel-reopt-test", rancherProject: "reopt-api-dev"], [credentialsId: "kubeconfig-nrel-reopt-prod", rancherProject: "reopt-api-stage"], [credentialsId: "kubeconfig-nrel-reopt-prod", rancherProject: "reopt-api-prod"]]) {
                  withCredentials([gitUsernamePassword(credentialsId: "github-nrel-gov-admin")]) {
                    sh "werf cleanup --scan-context-namespace-only"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      tadaSendNotifications()
    }
  }
}
