# Security headers
# https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#tab=Headers
<% if(fetch(:app_env) == "production") %>
  more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
<% else %>
  more_set_headers "Strict-Transport-Security: max-age=300; preload";
<% end %>

more_set_headers "X-XSS-Protection: 1; mode=block";
more_set_headers "X-Frame-Options: DENY";
more_set_headers "X-Content-Type-Options: nosniff";

upstream <%= fetch(:deploy_name) %>-http {
  server 127.0.0.1:80;
  keepalive 10;
}

upstream <%= fetch(:deploy_name) %>-django_backend {
  server unix:<%= current_path %>/tmp/gunicorn.sock;
  keepalive 10;
}

# The following settings can only be set once, globally in the http scope, so
# don't apply them to branched deployments.
<% if(!fetch(:subdomain)) %>
# Set far-future cache expiration headers for all JS, CSS, and image
# responses.
#
# This assumes all of these resources should be cache-busted by changing the
# filename when the contents change (which everything should be doing).
map $sent_http_content_type $expires {
  default off;
  <% if(fetch(:app_env) != "development") %>
    application/javascript max;
    text/css max;
    ~image/ max;
  <% end %>
}
expires $expires;
<% end %>

# SSL Terminator.
server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name <%= fetch(:all_domains).join(" ") %>;

  <% if(fetch(:base_domain) =~ /vagrant$/) %>
    ssl_certificate /etc/ssl/vagrant.crt;
    ssl_certificate_key /etc/ssl/vagrant.key;
  <% elsif(fetch(:stage) == :internal_c110p) %>
    <% if(fetch(:subdomain)) %>
      ssl_certificate /etc/ssl/star_<%= host.hostname %>.crt;
      ssl_certificate_key /etc/ssl/star_<%= host.hostname %>.key;
    <% else %>
      ssl_certificate /etc/ssl/<%= host.hostname %>.crt;
      ssl_certificate_key /etc/ssl/<%= host.hostname %>.key;
    <% end %>
  <% else %>
    ssl_certificate /etc/httpd/ssl/<%= host.hostname %>.pem;
    ssl_certificate_key /etc/httpd/ssl/<%= host.hostname %>.key;
  <% end %>

  access_log <%= current_path %>/log/access.log combined_extended;
  error_log <%= current_path %>/log/error.log;

  # Default proxy settings.
  include <%= fetch(:compiled_config_dir) %>/nginx/proxy_settings.conf;

  # Pass along original HTTPS protocol and port information.
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-Port $server_port;

  location / {
    proxy_pass http://<%= fetch(:deploy_name) %>-http;
  }
}

server {
  listen 80;
  listen [::]:80;
  server_name <%= fetch(:all_domains).join(" ") %>;

  # Redirect everything to HTTPS.
  #
  # Since we're sitting behind an SSL terminator all of our requests will be on
  # port 80, so we need to check the forwarded information.
  if ($http_x_forwarded_proto != "https") {
    return 301 https://$host$request_uri;
  }

  root <%= current_path %>/static;

  access_log <%= current_path %>/log/access.log combined_extended;
  error_log <%= current_path %>/log/error.log;

  # gzip configuration
  gzip on;
  gzip_comp_level 2;
  gzip_http_version 1.0;
  gzip_types text/xml application/xml text/javascript application/javascript application/x-javascript application/json text/csv;
  gzip_proxied any;

  # Default proxy settings.
  include <%= fetch(:compiled_config_dir) %>/nginx/proxy_settings.conf;

  # Set original IP and forwarded details
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
  proxy_set_header X-Forwarded-Port $http_x_forwarded_port;

  # Workaround for Django requiring a trailing slash on the POST endpoint.
  rewrite ^/v1/job$ /v1/job/ last;

  <% if(fetch(:app_env) != "production") %>
  # Don't allow search engine indexing of our staging sites.
  location = /robots.txt {
    return 200 "User-agent: *\nDisallow: /";
  }
  <% end %>

  location / {
    # Serve static files with nginx, everything else with Puma.
    try_files $uri/index.html $uri.html $uri @app;
  }

  location @app {
    <% if(fetch(:app_env) != "production") %>
      set $lazy_hydra_start_script "sudo supervisorctl start '<%= fetch(:deploy_name) %>:*'";
      set $lazy_hydra_stop_script "sudo supervisorctl stop '<%= fetch(:deploy_name) %>:*'";
      set $lazy_hydra_health_url "unix:<%= current_path %>/tmp/gunicorn.sock:/";
      set $lazy_hydra_startup_timeout 90; # 90 seconds - this app can take longer than normal to spin up.
      set $lazy_hydra_inactivity_timeout 10800; # 3 hours
      include "lazy-hydra/hook.conf";
    <% end %>

    proxy_pass http://<%= fetch(:deploy_name) %>-django_backend;
  }
}
