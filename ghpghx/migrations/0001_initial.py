# Generated by Django 3.1.8 on 2021-05-18 16:29

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GHPGHXModel',
            fields=[
                ('ghp_uuid', models.UUIDField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('status', models.TextField(blank=True, default='')),
                ('borehole_depth_ft', models.FloatField(blank=True, default=400.0, help_text='Vertical depth of each borehole [ft]', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(600.0)])),
                ('ghx_header_depth_ft', models.FloatField(blank=True, default=4.0, help_text='Depth under the ground of the GHX header pipe [ft]', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(50.0)])),
                ('borehole_spacing_ft', models.FloatField(blank=True, default=20.0, help_text='Distance from the centerline of each borehole to the centerline of its adjacent boreholes [ft]', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(100.0)])),
                ('borehole_diameter_inch', models.FloatField(blank=True, default=1.66, help_text='Diameter of the borehole/well drilled in the ground [in]', null=True, validators=[django.core.validators.MinValueValidator(0.25), django.core.validators.MaxValueValidator(24.0)])),
                ('borehole_spacing_type', models.TextField(blank=True, choices=[('rectangular', 'rectangular'), ('hexagonal', 'hexagonal')], default='rectangular', help_text='Borehole spacing pattern type: rectangular or hexagonal')),
                ('ghx_pipe_outer_diameter_inch', models.FloatField(blank=True, default=1.66, help_text='Outer diameter of the GHX pipe [in]', null=True, validators=[django.core.validators.MinValueValidator(0.25), django.core.validators.MaxValueValidator(24.0)])),
                ('ghx_pipe_wall_thickness_inch', models.FloatField(blank=True, default=0.16, help_text='Wall thickness of the GHX pipe [in]', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(5.0)])),
                ('ghx_pipe_thermal_conductivity_btu_per_hr_ft_f', models.FloatField(blank=True, default=0.25, help_text='Thermal conductivity of the GHX pipe [Btu/(hr-ft-degF)]', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(10.0)])),
                ('ghx_shank_space_inch', models.FloatField(blank=True, default=2.5, help_text='Distance between the centerline of the upwards and downwards u-tube legs [in]', null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(100.0)])),
                ('ground_thermal_conductivity_btu_per_hr_ft_f', models.FloatField(blank=True, default=0.98, help_text='Thermal conductivity of the ground surrounding the borehole field [Btu/(hr-ft-degF)]', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(15.0)])),
                ('ground_mass_density_lb_per_ft3', models.FloatField(blank=True, default=162.3, help_text='Mass density of the ground surrounding the borehole field [lb/ft^3]', null=True, validators=[django.core.validators.MinValueValidator(10.0), django.core.validators.MaxValueValidator(500.0)])),
                ('ground_specific_heat_btu_per_lb_f', models.FloatField(blank=True, default=0.211, help_text='Specific heat of the ground surrounding the borehole field', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(5.0)])),
                ('grout_thermal_conductivity_btu_per_hr_ft_f', models.FloatField(blank=True, default=1.0, help_text='Thermal conductivity of the grout material in a borehole [Btu/(hr-ft-degF)]', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(10.0)])),
                ('ghx_fluid_specific_heat_btu_per_lb_f', models.FloatField(blank=True, default=1.0, help_text='Specific heat of the fluid in the GHX (nominally water) [Btu/(lb-degF)]', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('ghx_fluid_mass_density_lb_per_ft3', models.FloatField(blank=True, default=62.4, help_text='Mass density of the fluid in the GHX (nominally water) [lb/ft^3]', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(200.0)])),
                ('ghx_fluid_thermal_conductivity_btu_per_hr_ft_f', models.FloatField(blank=True, default=0.36, help_text='Thermal conductivity of the fluid in the GHX (nominally water) [Btu/(hr-ft-degF)]', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(5.0)])),
                ('ghx_fluid_dynamic_viscosity_lbm_per_ft_hr', models.FloatField(blank=True, default=1.58, help_text='Dynamic viscosity of the fluid in the GHX (nominally water) [lb/(ft-hr)]', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('ghx_fluid_flow_rate_gpm_per_ton', models.FloatField(blank=True, default=2.5, help_text='Volumetric flow rate of the fluid in the GHX per peak ton heating/cooling [GPM/ton]', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('ghx_pump_power_watt_per_gpm', models.FloatField(blank=True, default=15.0, help_text='Pumping power required for a given volumetric flow rate of the fluid in the GHX [Watt/GPM]', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('ghx_pump_min_speed_fraction', models.FloatField(blank=True, default=0.1, help_text='The minimum turndown fraction of the pump. 1.0 is a constant speed pump.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ghx_pump_power_exponent', models.FloatField(blank=True, default=2.2, help_text='The pump power curve exponent', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('max_eft_allowable_f', models.FloatField(blank=True, default=104.0, help_text='Maximum allowable entering fluid temperature (EFT) of the heat pump (used in cooling dominated loads) [degF]', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(150.0)])),
                ('min_eft_allowable_f', models.FloatField(blank=True, default=23.0, help_text='Minimum allowable entering fluid temperature (EFT) of the heat pump (used in heating dominated loads) [degF]', null=True, validators=[django.core.validators.MinValueValidator(-50.0), django.core.validators.MaxValueValidator(100.0)])),
                ('heating_thermal_load_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Hourly heating thermal load that GHP serves [MMBtu/hr]', null=True, size=None)),
                ('cooling_thermal_load_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Hourly cooling thermal load that GHP serves [ton]', null=True, size=None)),
                ('ambient_temperature_f', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Hourly outdoor air dry bulb temperature, typically TMY3 data [degF]', null=True, size=None)),
                ('cop_map_eft_heating_cooling', django.contrib.postgres.fields.ArrayField(base_field=picklefield.fields.PickledObjectField(editable=False, null=True), help_text='Heat pump coefficient of performance (COP) map: list of dictionaries, each with 3 keys: 1) EFT, 2) HeatingCOP, 3) CoolingCOP', null=True, size=None)),
                ('simulation_years', models.IntegerField(blank=True, default=25, help_text='The time span for which GHX is sized to meet the entering water temperature constraints [year]', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('solver_ewt_tolerance', models.FloatField(blank=True, default=0.1, help_text='Tolerance for GHX sizing based on the entering water temperature limits [degF]', null=True, validators=[django.core.validators.MinValueValidator(0.001), django.core.validators.MaxValueValidator(5.0)])),
                ('ghx_model', models.TextField(blank=True, choices=[('TESS', 'TESS'), ('DST', 'DST')], default='TESS', help_text='GHX model to use in the simulation: TESS or DST')),
                ('dst_ghx_timesteps_per_hour', models.IntegerField(blank=True, default=12, help_text='Time steps per hour to use for the DST GHX model', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('tess_ghx_minimum_timesteps_per_hour', models.IntegerField(blank=True, default=1, help_text='Minimum time steps per hour to use for the TESS GHX model; the model will decide if more is needed each hour', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('max_sizing_iterations', models.IntegerField(blank=True, default=15, help_text='Maximum number of sizing iterations before the GHPGHX model times out', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)])),
                ('init_sizing_factor_ft_per_peak_ton', models.FloatField(blank=True, default=246.1, help_text='Initial guess of total feet of GHX boreholes (total feet = N bores * Length bore) based on peak ton heating/cooling [ft/ton]', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(1500.0)])),
                ('number_of_boreholes', models.FloatField(blank=True, help_text='Minimum required number of boreholes to meet heat pump EWT constraints', null=True)),
                ('length_boreholes_ft', models.FloatField(blank=True, help_text='Length of each borehole, drilled vertically in the ground [ft]', null=True)),
                ('yearly_heating_heatpump_electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Hourly heating heat pump electric consumption, average across simulation years [kW]', null=True, size=None)),
                ('yearly_cooling_heatpump_electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Hourly cooling heat pump electric consumption, average across simulation years [kW]', null=True, size=None)),
                ('yearly_ghx_pump_electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Hourly GHX pump electric consumption, average across simulation years [kW]', null=True, size=None)),
            ],
        ),
    ]
