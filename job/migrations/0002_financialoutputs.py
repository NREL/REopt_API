# Generated by Django 3.1.8 on 2021-07-14 00:28

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import job.models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FinancialOutputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='job.scenario')),
                ('lcc_us_dollars', models.FloatField(blank=True, help_text='Optimal lifecycle cost', null=True)),
                ('lcc_bau_us_dollars', models.FloatField(blank=True, help_text='Business as usual lifecycle cost', null=True)),
                ('npv_us_dollars', models.FloatField(blank=True, help_text='Net present value of savings realized by the project', null=True)),
                ('net_capital_costs_plus_om_us_dollars', models.FloatField(blank=True, help_text='Capital cost for all technologies plus present value of operations and maintenance over anlaysis period', null=True)),
                ('net_om_us_dollars_bau', models.FloatField(blank=True, help_text='Business-as-usual present value of operations and maintenance over anlaysis period', null=True)),
                ('net_capital_costs', models.FloatField(blank=True, help_text='Net capital costs for all technologies, in present value, including replacement costs and incentives.', null=True)),
                ('microgrid_upgrade_cost', models.FloatField(blank=True, help_text='Cost to make a distributed energy system islandable from the grid. Determined by multiplying the total capital costs of resultant energy systems from REopt (such as PV and Storage system) with the input value for microgrid_upgrade_cost_pct (which defaults to 0.30).', null=True)),
                ('initial_capital_costs', models.FloatField(blank=True, help_text='Up-front capital costs for all technologies, in present value, excluding replacement costs and incentives.', null=True)),
                ('initial_capital_costs_after_incentives', models.FloatField(blank=True, help_text='Up-front capital costs for all technologies, in present value, excluding replacement costs, including incentives.', null=True)),
                ('replacement_costs', models.FloatField(blank=True, help_text='Net replacement costs for all technologies, in future value, excluding incentives.', null=True)),
                ('om_and_replacement_present_cost_after_tax_us_dollars', models.FloatField(blank=True, help_text='Net O&M and replacement costs in present value, after-tax.', null=True)),
                ('total_om_costs_us_dollars', models.FloatField(blank=True, help_text='Total operations and maintenance cost over analysis period.', null=True)),
                ('year_one_om_costs_us_dollars', models.FloatField(blank=True, help_text='Year one operations and maintenance cost after tax.', null=True)),
                ('year_one_om_costs_before_tax_us_dollars', models.FloatField(blank=True, help_text='Year one operations and maintenance cost before tax.', null=True)),
                ('simple_payback_years', models.FloatField(blank=True, help_text='Number of years until the cumulative annual cashflow turns positive. If the cashflow becomes negative again after becoming positive (i.e. due to battery repalcement costs) then simple payback is increased by the number of years that the cash flow is negative beyond the break-even year.', null=True)),
                ('irr_pct', models.FloatField(blank=True, help_text='internal Rate of Return of the cost-optimal system. In two-party cases the developer discount rate is used in place of the offtaker discount rate.', null=True)),
                ('net_present_cost_us_dollars', models.FloatField(blank=True, help_text='Present value of the total costs incurred by the third-party owning and operating the distributed energy resource assets.', null=True)),
                ('annualized_payment_to_third_party_us_dollars', models.FloatField(blank=True, help_text='The annualized amount the host will pay to the third-party owner over the life of the project.', null=True)),
                ('offtaker_annual_free_cashflow_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Annual free cashflow for the host in the optimal case for all analysis years, including year 0. Future years have not been discounted to account for the time value of money.', null=True, size=None)),
                ('offtaker_discounted_annual_free_cashflow_series_us_dollars', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Annual discounted free cashflow for the host in the optimal case for all analysis years, including year 0. Future years have been discounted to account for the time value of money.', null=True, size=None)),
                ('offtaker_annual_free_cashflow_series_bau_us_dollars', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Annual free cashflow for the host in the business-as-usual case for all analysis years, including year 0. Future years have not been discounted to account for the time value of money. Only calculated in the non-third-party case.', null=True, size=None)),
                ('offtaker_discounted_annual_free_cashflow_series_bau_us_dollars', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Annual discounted free cashflow for the host in the business-as-usual case for all analysis years, including year 0. Future years have been discounted to account for the time value of money. Only calculated in the non-third-party case.', null=True, size=None)),
                ('developer_annual_free_cashflow_series_us_dollars', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Annual free cashflow for the developer in the business-as-usual third party case for all analysis years, including year 0. Future years have not been discounted to account for the time value of money. Only calculated in the third-party case.', null=True, size=None)),
                ('developer_om_and_replacement_present_cost_after_tax_us_dollars', models.FloatField(blank=True, help_text='Net O&M and replacement costs in present value, after-tax for the third-party developer. Only calculated in the third-party case.', null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
    ]
