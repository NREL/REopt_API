# Generated by Django 4.0.7 on 2023-02-01 15:34

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import job.models
import picklefield.fields


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0021_merge_20230112_1748'),
    ]

    operations = [
        migrations.CreateModel(
            name='GHPInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='GHPInputs', serialize=False, to='job.apimeta')),
                ('require_ghp_purchase', models.BooleanField(blank=True, default=False, help_text='Force one of the considered GHP design options.', null=True)),
                ('installed_cost_heatpump_us_dollars_per_ton', models.FloatField(blank=True, default=1075.0, help_text='Installed heating heat pump cost in $/ton (based on peak coincident cooling+heating thermal load)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)])),
                ('heatpump_capacity_sizing_factor_on_peak_load', models.FloatField(blank=True, default=1.1, help_text='Factor on peak heating and cooling load served by GHP used for determining GHP installed capacity', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('installed_cost_ghx_us_dollars_per_ft', models.FloatField(blank=True, default=14.0, help_text='Installed cost of the ground heat exchanger (GHX) in $/ft of vertical piping', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('installed_cost_building_hydronic_loop_us_dollars_per_sqft', models.FloatField(blank=True, default=1.7, help_text='Installed cost of the building hydronic loop per floor space of the site', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('om_cost_us_dollars_per_sqft_year', models.FloatField(blank=True, default=-0.51, help_text='Annual GHP incremental operations and maintenance costs in $/ft^2-building/year', null=True, validators=[django.core.validators.MinValueValidator(-100.0), django.core.validators.MaxValueValidator(100.0)])),
                ('building_sqft', models.FloatField(blank=True, help_text='Building square footage for GHP/HVAC cost calculations', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('space_heating_efficiency_thermal_factor', models.FloatField(blank=True, help_text='Heating efficiency factor (annual average) to account for reduced space heating thermal load from GHP retrofit (e.g. reduced reheat)', null=True, validators=[django.core.validators.MinValueValidator(0.001), django.core.validators.MaxValueValidator(1.0)])),
                ('cooling_efficiency_thermal_factor', models.FloatField(blank=True, help_text='Cooling efficiency factor (annual average) to account for reduced cooling thermal load from GHP retrofit (e.g. reduced reheat)', null=True, validators=[django.core.validators.MinValueValidator(0.001), django.core.validators.MaxValueValidator(1.0)])),
                ('ghpghx_inputs', django.contrib.postgres.fields.ArrayField(base_field=picklefield.fields.PickledObjectField(editable=False, null=True), default=list, help_text='GhpGhx.jl inputs/POST to ghpghx app', null=True, size=None)),
                ('ghpghx_response_uuids', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), default=list, help_text="List of ghp_uuid's (like run_uuid for REopt) from ghpghx app, used to get GhpGhx.jl run data", null=True, size=None)),
                ('ghpghx_responses', django.contrib.postgres.fields.ArrayField(base_field=picklefield.fields.PickledObjectField(editable=False, null=True), default=list, help_text='ghpghx app response(s) to re-use a previous GhpGhx.jl run without relying on a database entry', null=True, size=None)),
                ('can_serve_dhw', models.BooleanField(blank=True, default=False, help_text='If GHP can serve the domestic hot water (DHW) portion of the heating load', null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='GHPOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='GHPOutputs', serialize=False, to='job.apimeta')),
                ('ghp_chosen_uuid', models.TextField(blank=True, null=True)),
                ('ghpghx_chosen_outputs', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('size_heat_pump_ton', models.FloatField(blank=True, null=True)),
                ('space_heating_thermal_reduction_series_mmbtu_per_hr', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('cooling_thermal_reduction_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
    ]
