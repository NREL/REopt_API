# Generated by Django 4.0.7 on 2023-02-28 03:34

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0025_boilerinputs_boileroutputs_steamturbineinputs_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='boilerinputs',
            name='installed_cost_per_mmbtu_per_hour',
            field=models.FloatField(blank=True, default=293000.0, help_text='Thermal power-based cost', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='boilerinputs',
            name='max_mmbtu_per_hour',
            field=models.FloatField(default=0.0, help_text='Maximum thermal power size', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='boilerinputs',
            name='min_mmbtu_per_hour',
            field=models.FloatField(default=0.0, help_text='Minimum thermal power size', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='boilerinputs',
            name='om_cost_per_mmbtu',
            field=models.FloatField(blank=True, default=0.0, help_text='Thermal energy-based variable O&M cost', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='boilerinputs',
            name='om_cost_per_mmbtu_per_hour',
            field=models.FloatField(blank=True, default=2930.0, help_text='Thermal power-based fixed O&M cost', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='max_kw',
            field=models.FloatField(blank=True, help_text='Maximum CHP size (in kWe) constraint for optimization. Set to zero to disable CHP', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='min_allowable_kw',
            field=models.FloatField(blank=True, help_text='Minimum nonzero CHP size (in kWe) (i.e. it is possible to select no CHP system)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='coolingloadinputs',
            name='annual_tonhour',
            field=models.FloatField(blank=True, help_text="Annual electric chiller thermal energy production, in [Ton-Hour],used to scale simulated default electric chiller load profile for the site's climate zone", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='coolingloadinputs',
            name='monthly_tonhour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text="Monthly site space cooling requirement in [Ton-Hour], used to scale simulated default building load profile for the site's climate zone", size=None),
        ),
        migrations.AlterField(
            model_name='coolingloadoutputs',
            name='annual_calculated_tonhour',
            field=models.FloatField(blank=True, default=0, help_text='Annual site total cooling load [tonhr]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='coolingloadoutputs',
            name='annual_electric_chiller_base_load_kwh',
            field=models.FloatField(blank=True, default=0, help_text='Annual total base load drawn from chiller [kWh-electric]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='coolingloadoutputs',
            name='electric_chiller_base_load_series_kw',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly total base load drawn from chiller [kW-electric]', size=None),
        ),
        migrations.AlterField(
            model_name='coolingloadoutputs',
            name='load_series_ton',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly total cooling load [ton]', size=None),
        ),
        migrations.AlterField(
            model_name='domestichotwaterloadinputs',
            name='annual_mmbtu',
            field=models.FloatField(blank=True, help_text="Annual site DHW consumption, used to scale simulated default building load profile for the site's climate zone [MMBtu]", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='domestichotwaterloadinputs',
            name='monthly_mmbtu',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text="Monthly site DHW energy consumption in [MMbtu], used to scale simulated default building load profile for the site's climate zone", size=None),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_CO2_per_mmbtu',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_NOx_per_mmbtu',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_PM25_per_mmbtu',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_SO2_per_mmbtu',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='fuel_avail_gal',
            field=models.FloatField(blank=True, help_text='On-site generator fuel available in gallons per year.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1000000000.0)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='replace_cost_per_kw',
            field=models.FloatField(blank=True, help_text='Per kW replacement cost for generator capacity. Replacement costs are considered tax deductible.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='annual_calculated_dhw_boiler_fuel_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site DHW boiler fuel load [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='annual_calculated_dhw_thermal_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site DHW load [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='annual_calculated_space_heating_boiler_fuel_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site space heating boiler fuel load [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='annual_calculated_space_heating_thermal_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site space heating load [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='annual_calculated_total_heating_boiler_fuel_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site total heating boiler fuel load [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='annual_calculated_total_heating_thermal_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site total heating load [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='dhw_boiler_fuel_load_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly domestic hot water load [MMBTU/hr]', size=None),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='dhw_thermal_load_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly domestic hot water load [MMBTU/hr]', size=None),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='space_heating_boiler_fuel_load_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly domestic space heating load [MMBTU/hr]', size=None),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='space_heating_thermal_load_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly domestic space heating load [MMBTU/hr]', size=None),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='total_heating_boiler_fuel_load_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly total heating load [MMBTU/hr]', size=None),
        ),
        migrations.AlterField(
            model_name='heatingloadoutputs',
            name='total_heating_thermal_load_series_mmbtu_per_hour',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Hourly total heating load [MMBTU/hr]', size=None),
        ),
        migrations.AlterField(
            model_name='spaceheatingloadinputs',
            name='annual_mmbtu',
            field=models.FloatField(blank=True, help_text="Annual site space heating consumption, used to scale simulated default building load profile for the site's climate zone [MMBtu]", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='spaceheatingloadinputs',
            name='monthly_mmbtu',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text="Monthly site space heating energy consumption in [MMbtu], used to scale simulated default building load profile for the site's climate zone", size=None),
        ),
    ]
