# Generated by Django 4.0.1 on 2022-04-19 00:00

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import job.models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0002_alter_electricutilityinputs_outage_end_time_step_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ElectricStorageInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ElectricStorageInputs', serialize=False, to='job.apimeta')),
                ('min_kw', models.FloatField(blank=True, default=0, help_text='Minimum storage inverter capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum storage inverter capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('min_kwh', models.FloatField(blank=True, default=0, help_text='Minimum energy storage capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kwh', models.FloatField(blank=True, default=1000000.0, help_text='Maximum energy storage capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('internal_efficiency_pct', models.FloatField(blank=True, default=0.975, help_text='Battery inherent efficiency independent of inverter and rectifier', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('inverter_efficiency_pct', models.FloatField(blank=True, default=0.96, help_text='Battery inverter efficiency', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('rectifier_efficiency_pct', models.FloatField(blank=True, default=0.96, help_text='Battery rectifier efficiency', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('soc_min_pct', models.FloatField(blank=True, default=0.2, help_text='Minimum allowable battery state of charge as fraction of energy capacity.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('soc_init_pct', models.FloatField(blank=True, default=0.5, help_text='Battery state of charge at first hour of optimization as fraction of energy capacity.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('can_grid_charge', models.BooleanField(blank=True, default=True, help_text='Flag to set whether the battery can be charged from the grid, or just onsite generation.')),
                ('installed_cost_per_kw', models.FloatField(blank=True, default=840.0, help_text='Total upfront battery power capacity costs (e.g. inverter and balance of power systems)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('installed_cost_per_kwh', models.FloatField(blank=True, default=420.0, help_text='Total upfront battery costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('replace_cost_per_kw', models.FloatField(blank=True, default=410.0, help_text='Battery power capacity replacement cost at time of replacement year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('replace_cost_per_kwh', models.FloatField(blank=True, default=200.0, help_text='Battery energy capacity replacement cost at time of replacement year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('inverter_replacement_year', models.IntegerField(blank=True, default=10, help_text='Number of years from start of analysis period to replace inverter', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(75)])),
                ('battery_replacement_year', models.IntegerField(blank=True, default=10, help_text='Number of years from start of analysis period to replace battery', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(75)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=7, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_pct', models.FloatField(blank=True, default=1.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('macrs_itc_reduction', models.FloatField(blank=True, default=0.5, help_text='Percent of the ITC value by which depreciable basis is reduced', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_itc_pct', models.FloatField(blank=True, default=0.0, help_text='Total investment tax credit in percent applied toward capital costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_rebate_per_kw', models.FloatField(blank=True, default=0.0, help_text='Rebate based on installed power capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('total_rebate_per_kwh', models.FloatField(blank=True, default=0.0, help_text='Rebate based on installed energy capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricStorageOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ElectricStorageOutputs', serialize=False, to='job.apimeta')),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('size_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_soc_series_pct', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.RemoveField(
            model_name='storageoutputs',
            name='meta',
        ),
        migrations.DeleteModel(
            name='StorageInputs',
        ),
        migrations.DeleteModel(
            name='StorageOutputs',
        ),
    ]
