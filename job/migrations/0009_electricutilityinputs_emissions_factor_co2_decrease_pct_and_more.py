# Generated by Django 4.0.4 on 2022-07-15 01:10

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0008_financialoutputs_breakeven_cost_of_emissions_reduction_per_tonnes_co2'),
    ]

    operations = [
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_CO2_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual CO2 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_NOx_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual NOx marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_PM25_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual PM2.5 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_SO2_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual SO2 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_CO2_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='CO2 emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_NOx_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='NOx emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_PM25_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='PM2.5 emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_SO2_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='SO2 emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_region',
            field=models.TextField(blank=True, help_text='The AVERT emissions region. If emissions_factor_series_lb_<pollutant>_per_kwh inputs are not provided, emissions_region overrides latitude and longitude in determining emissions factors.'),
        ),
    ]
