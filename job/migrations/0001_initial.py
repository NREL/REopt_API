# Generated by Django 3.1.12 on 2021-09-19 16:15

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import job.models
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('api_version', models.IntegerField(default=2)),
                ('user_uuid', models.TextField(blank=True, help_text='The assigned unique ID of a signed in REopt user.', null=True)),
                ('webtool_uuid', models.TextField(blank=True, help_text="The unique ID of a scenario created by the REopt Lite Webtool. Note that this ID can be shared by several REopt Lite API Scenarios (for example when users select a 'Resilience' analysis more than one REopt API Scenario is created).", null=True)),
                ('job_type', models.TextField(default='developer.nrel.gov')),
                ('description', models.TextField(blank=True)),
                ('status', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('address', models.TextField(blank=True, help_text='A user defined address as optional metadata (street address, city, state or zip code)')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricLoadOutputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ElectricLoadOutputs', serialize=False, to='job.scenario')),
                ('load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Year one hourly time series of electric load', size=None)),
                ('critical_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, help_text='Hourly critical load for outage simulator. Values are either uploaded by user, or determined from typical load (either uploaded or simulated) and critical_load_pct.', size=None)),
                ('annual_calculated_kwh', models.FloatField(blank=True, help_text='Annual energy consumption calculated by summing up 8760 load profile', null=True)),
                ('bau_critical_load_met', models.BooleanField(blank=True, help_text='Boolean for if the critical load is met by the existing technologies in the BAU scenario.', null=True)),
                ('bau_critical_load_met_time_steps', models.IntegerField(blank=True, help_text='Number of time steps the existing system can sustain the critical load.', null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='FinancialOutputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='FinancialOutputs', serialize=False, to='job.scenario')),
                ('lcc', models.FloatField(blank=True, help_text='Optimal lifecycle cost', null=True)),
                ('lcc_bau', models.FloatField(blank=True, help_text='Business as usual lifecycle cost', null=True)),
                ('npv', models.FloatField(blank=True, help_text='Net present value of savings realized by the project', null=True)),
                ('net_capital_costs_plus_om', models.FloatField(blank=True, help_text='Capital cost for all technologies plus present value of operations and maintenance over anlaysis period', null=True)),
                ('net_om_costs_bau', models.FloatField(blank=True, help_text='Business-as-usual present value of operations and maintenance over analysis period', null=True)),
                ('net_capital_costs', models.FloatField(blank=True, help_text='Net capital costs for all technologies, in present value, including replacement costs and incentives.', null=True)),
                ('microgrid_upgrade_cost', models.FloatField(blank=True, help_text='Cost to make a distributed energy system islandable from the grid. Determined by multiplying the total capital costs of resultant energy systems from REopt (such as PV and Storage system) with the input value for microgrid_upgrade_cost_pct (which defaults to 0.30).', null=True)),
                ('initial_capital_costs', models.FloatField(blank=True, help_text='Up-front capital costs for all technologies, in present value, excluding replacement costs and incentives.', null=True)),
                ('initial_capital_costs_after_incentives', models.FloatField(blank=True, help_text='Up-front capital costs for all technologies, in present value, excluding replacement costs, including incentives.', null=True)),
                ('replacement_costs', models.FloatField(blank=True, help_text='Net replacement costs for all technologies, in future value, excluding incentives.', null=True)),
                ('om_and_replacement_present_cost_after_tax', models.FloatField(blank=True, help_text='Net O&M and replacement costs in present value, after-tax.', null=True)),
                ('total_om_costs_after_tax', models.FloatField(blank=True, help_text='Total operations and maintenance cost over analysis period after tax.', null=True)),
                ('year_one_om_costs_after_tax', models.FloatField(blank=True, help_text='Year one operations and maintenance cost after tax.', null=True)),
                ('total_om_costs_before_tax', models.FloatField(blank=True, help_text='Total operations and maintenance cost over analysis period before tax.', null=True)),
                ('year_one_om_costs_before_tax', models.FloatField(blank=True, help_text='Year one operations and maintenance cost before tax.', null=True)),
                ('simple_payback_years', models.FloatField(blank=True, help_text='Number of years until the cumulative annual cashflows turn positive. If the cashflows become negative again after becoming positive (i.e. due to battery repalcement costs) then simple payback is increased by the number of years that the cash flow is negative beyond the break-even year.', null=True)),
                ('internal_rate_of_return', models.FloatField(blank=True, help_text='internal Rate of Return of the cost-optimal system. In two-party cases the developer discount rate is used in place of the offtaker discount rate.', null=True)),
                ('net_present_cost', models.FloatField(blank=True, help_text='Present value of the total costs incurred by the third-party owning and operating the distributed energy resource assets.', null=True)),
                ('annualized_payment_to_third_party', models.FloatField(blank=True, help_text='The annualized amount the host will pay to the third-party owner over the life of the project.', null=True)),
                ('offtaker_annual_free_cashflows', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Annual free cashflows for the host in the optimal case for all analysis years, including year 0. Future years have not been discounted to account for the time value of money.', size=None)),
                ('offtaker_discounted_annual_free_cashflows', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Annual discounted free cashflows for the host in the optimal case for all analysis years, including year 0. Future years have been discounted to account for the time value of money.', size=None)),
                ('offtaker_annual_free_cashflows_bau', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Annual free cashflows for the host in the business-as-usual case for all analysis years, including year 0. Future years have not been discounted to account for the time value of money. Only calculated in the non-third-party case.', size=None)),
                ('offtaker_discounted_annual_free_cashflows_bau', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Annual discounted free cashflow for the host in the business-as-usual case for all analysis years, including year 0. Future years have been discounted to account for the time value of money. Only calculated in the non-third-party case.', null=True, size=None)),
                ('developer_annual_free_cashflows', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Annual free cashflow for the developer in the business-as-usual third party case for all analysis years, including year 0. Future years have not been discounted to account for the time value of money. Only calculated in the third-party case.', size=None)),
                ('developer_om_and_replacement_present_cost_after_tax', models.FloatField(blank=True, help_text='Net O&M and replacement costs in present value, after-tax for the third-party developer.Only calculated in the third-party case.', null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='GeneratorInputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='GeneratorInputs', serialize=False, to='job.scenario')),
                ('existing_kw', models.FloatField(blank=True, default=0, help_text='Existing diesel generator size', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)])),
                ('min_kw', models.FloatField(blank=True, default=0, help_text='Minimum diesel generator size constraint for optimization', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum diesel generator size constraint for optimization. Set to zero to disable PV', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('installed_cost_per_kw', models.FloatField(blank=True, default=500, help_text='Installed diesel generator cost in $/kW', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000.0)])),
                ('om_cost_per_kw', models.FloatField(blank=True, default=10.0, help_text='Annual diesel generator fixed operations and maintenance costs in $/kW', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1000.0)])),
                ('om_cost_per_kwh', models.FloatField(blank=True, default=0.0, help_text='Diesel generator per unit production (variable) operations and maintenance costs in $/kWh', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1000.0)])),
                ('fuel_cost_per_gallon', models.FloatField(blank=True, default=3.0, help_text='Diesel cost in $/gallon', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('fuel_slope_gal_per_kwh', models.FloatField(blank=True, default=0.076, help_text='Generator fuel burn rate in gallons/kWh.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('fuel_intercept_gal_per_hr', models.FloatField(blank=True, default=0.0, help_text='Generator fuel consumption curve y-intercept in gallons per hour.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('fuel_avail_gal', models.FloatField(blank=True, default=660.0, help_text='On-site generator fuel available in gallons.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('min_turn_down_pct', models.FloatField(blank=True, default=0.0, help_text='Minimum generator loading in percent of capacity (size_kw).', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('only_runs_during_grid_outage', models.BooleanField(blank=True, default=True, help_text='Determines if the generator can run only during grid outage or all the time.')),
                ('sells_energy_back_to_grid', models.BooleanField(blank=True, default=False, help_text='Determines if generator can participate in NEM and wholesale markets.')),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=0, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_pct', models.FloatField(blank=True, default=1.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('macrs_itc_reduction', models.FloatField(blank=True, default=0.0, help_text='Percent of the ITC value by which depreciable basis is reduced', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('federal_itc_pct', models.FloatField(blank=True, default=0.0, help_text='Percentage of capital costs that are credited towards federal taxes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('state_ibi_pct', models.FloatField(blank=True, default=0, help_text='Percentage of capital costs offset by state incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('state_ibi_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum dollar value of state percentage-based capital cost incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('utility_ibi_pct', models.FloatField(blank=True, default=0, help_text='Percentage of capital costs offset by utility incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('utility_ibi_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum dollar value of utility percentage-based capital cost incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('federal_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='Federal rebates based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('state_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='State rebate based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('state_rebate_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum state rebate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('utility_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='Utility rebate based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('utility_rebate_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum utility rebate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('production_incentive_per_kwh', models.FloatField(blank=True, default=0, help_text='Production-based incentive value', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('production_incentive_max_benefit', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum annual value in present terms of production-based incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('production_incentive_years', models.IntegerField(blank=True, default=0, help_text='Duration of production-based incentives from installation date', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('production_incentive_max_kw', models.FloatField(blank=True, default=0.0, help_text='Maximum system size eligible for production-based incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('can_net_meter', models.BooleanField(blank=True, default=False, help_text='True/False for if technology has option to participate in net metering agreement with utility. Note that a technology can only participate in either net metering or wholesale rates (not both).')),
                ('can_wholesale', models.BooleanField(blank=True, default=False, help_text='True/False for if technology has option to export energy that is compensated at the wholesale_rate. Note that a technology can only participate in either net metering or wholesale rates (not both).')),
                ('can_export_beyond_nem_limit', models.BooleanField(blank=True, default=False, help_text='True/False for if technology can export energy beyond the annual site load (and be compensated for that energy at the export_rate_beyond_net_metering_limit).')),
                ('can_curtail', models.BooleanField(blank=True, default=False, help_text='True/False for if technology has the ability to curtail energy production.')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='GeneratorOutputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='GeneratorOutputs', serialize=False, to='job.scenario')),
                ('fuel_used_gal', models.FloatField(blank=True, null=True)),
                ('fuel_used_gal_bau', models.FloatField(blank=True, null=True)),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_exported_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, null=True, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('year_one_variable_om_cost', models.FloatField(blank=True, null=True)),
                ('year_one_variable_om_cost_bau', models.FloatField(blank=True, null=True)),
                ('year_one_fuel_cost', models.FloatField(blank=True, null=True)),
                ('year_one_fuel_cost_bau', models.FloatField(blank=True, null=True)),
                ('year_one_fixed_om_cost', models.FloatField(blank=True, null=True)),
                ('year_one_fixed_om_cost_bau', models.FloatField(blank=True, null=True)),
                ('total_variable_om_cost', models.FloatField(blank=True, null=True)),
                ('total_variable_om_cost_bau', models.FloatField(blank=True, null=True)),
                ('total_fuel_cost', models.FloatField(blank=True, null=True)),
                ('total_fuel_cost_bau', models.FloatField(blank=True, null=True)),
                ('total_fixed_om_cost', models.FloatField(blank=True, null=True)),
                ('total_fixed_om_cost_bau', models.FloatField(blank=True, null=True)),
                ('year_one_emissions_lb_C02', models.FloatField(blank=True, null=True)),
                ('year_one_emissions_bau_lb_C02', models.FloatField(blank=True, null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='PVInputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='PVInputs', serialize=False, to='job.scenario')),
                ('name', models.TextField(blank=True, default='PV', help_text='PV description for distinguishing between multiple PV models')),
                ('existing_kw', models.FloatField(blank=True, default=0, help_text='Existing PV size', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)])),
                ('min_kw', models.FloatField(blank=True, default=0, help_text='Minimum PV size constraint for optimization', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum PV size constraint for optimization. Set to zero to disable PV', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('installed_cost_per_kw', models.FloatField(blank=True, default=1600, help_text='Installed PV cost in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)])),
                ('om_cost_per_kw', models.FloatField(blank=True, default=16, help_text='Annual PV operations and maintenance costs in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=5, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_pct', models.FloatField(blank=True, default=1.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('macrs_itc_reduction', models.FloatField(blank=True, default=0.5, help_text='Percent of the ITC value by which depreciable basis is reduced', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('federal_itc_pct', models.FloatField(blank=True, default=0.26, help_text='Percentage of capital costs that are credited towards federal taxes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('state_ibi_pct', models.FloatField(blank=True, default=0, help_text='Percentage of capital costs offset by state incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('state_ibi_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum dollar value of state percentage-based capital cost incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('utility_ibi_pct', models.FloatField(blank=True, default=0, help_text='Percentage of capital costs offset by utility incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('utility_ibi_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum dollar value of utility percentage-based capital cost incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('federal_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='Federal rebates based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('state_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='State rebate based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('state_rebate_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum state rebate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('utility_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='Utility rebate based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('utility_rebate_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum utility rebate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('production_incentive_per_kwh', models.FloatField(blank=True, default=0, help_text='Production-based incentive value', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('production_incentive_max_benefit', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum annual value in present terms of production-based incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('production_incentive_years', models.IntegerField(blank=True, default=1, help_text='Duration of production-based incentives from installation date', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('production_incentive_max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum system size eligible for production-based incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('degradation_pct', models.FloatField(blank=True, default=0.005, help_text='Annual rate of degradation in PV energy production', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('azimuth', models.FloatField(blank=True, default=180, help_text='PV azimuth angle', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('losses', models.FloatField(blank=True, default=0.14, help_text='PV system performance losses', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0.99)])),
                ('array_type', models.IntegerField(blank=True, choices=[(0, 'Ground Mount Fixed Open Rack'), (1, 'Rooftop Fixed'), (2, 'Ground Mount One Axis Tracking'), (3, 'One Axis Backtracking'), (4, 'Ground Mount Two Axis Tracking')], default=1, help_text='PV Watts array type (0: Ground Mount Fixed (Open Rack); 1: Rooftop, Fixed; 2: Ground Mount 1-Axis Tracking; 3 : 1-Axis Backtracking; 4: Ground Mount, 2-Axis Tracking)')),
                ('module_type', models.IntegerField(blank=True, choices=[(0, 'Standard'), (1, 'Premium'), (2, 'Thin Film')], default=0, help_text='PV module type (0: Standard; 1: Premium; 2: Thin Film)')),
                ('gcr', models.FloatField(blank=True, default=0.4, help_text='PV ground cover ratio (photovoltaic array area : total ground area).', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(0.99)])),
                ('dc_ac_ratio', models.FloatField(blank=True, default=1.2, help_text='PV DC-AC ratio', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('inv_eff', models.FloatField(blank=True, default=0.96, help_text='PV inverter efficiency', null=True, validators=[django.core.validators.MinValueValidator(0.9), django.core.validators.MaxValueValidator(0.995)])),
                ('radius', models.IntegerField(blank=True, default=0, help_text='Radius, in miles, to use when searching for the closest climate data station. Use zero to use the closest station regardless of the distance.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('tilt', models.FloatField(blank=True, default=0.537, help_text='PV system tilt', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)])),
                ('location', models.TextField(blank=True, choices=[('roof', 'Roof'), ('ground', 'Ground'), ('both', 'Both')], default='both', help_text='Where PV can be deployed. One of [roof, ground, both] with default as both.')),
                ('prod_factor_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optional user-defined production factors. Entries have units of kWh/kW, representing the energy (kWh) output of a 1 kW system in each time step. Must be hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples).', size=None)),
                ('can_net_meter', models.BooleanField(blank=True, default=True, help_text='True/False for if technology has option to participate in net metering agreement with utility. Note that a technology can only participate in either net metering or wholesale rates (not both).')),
                ('can_wholesale', models.BooleanField(blank=True, default=True, help_text='True/False for if technology has option to export energy that is compensated at the wholesale_rate. Note that a technology can only participate in either net metering or wholesale rates (not both).')),
                ('can_export_beyond_nem_limit', models.BooleanField(blank=True, default=True, help_text='True/False for if technology can export energy beyond the annual site load (and be compensated for that energy at the export_rate_beyond_net_metering_limit).')),
                ('can_curtail', models.BooleanField(blank=True, default=True, help_text='True/False for if technology has the ability to curtail energy production.')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Settings', serialize=False, to='job.scenario')),
                ('timeout_seconds', models.IntegerField(default=420, help_text='The number of seconds allowed before the optimization times out.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(420)])),
                ('time_steps_per_hour', models.IntegerField(choices=[(1, 'One'), (2, 'Two'), (4, 'Four')], default=1, help_text='The number of time steps per hour in the REopt model.')),
                ('optimality_tolerance', models.FloatField(default=0.001, help_text="The threshold for the difference between the solution's objective value and the best possible value at which the solver terminates", validators=[django.core.validators.MinValueValidator(5e-06), django.core.validators.MaxValueValidator(0.05)])),
                ('add_soc_incentive', models.BooleanField(blank=True, default=True, help_text="If True, then a small incentive to keep the battery's state of charge high is added to the objective of the optimization.")),
                ('run_bau', models.BooleanField(blank=True, default=True, help_text='If True then the Business-As-Usual scenario is also solved to provide additional outputs such as the LCC and BAU costs.')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='StorageInputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='StorageInputs', serialize=False, to='job.scenario')),
                ('min_kw', models.FloatField(blank=True, default=0, help_text='Minimum storage inverter capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum storage inverter capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('min_kwh', models.FloatField(blank=True, default=0, help_text='Minimum energy storage capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kwh', models.FloatField(blank=True, default=1000000.0, help_text='Maximum energy storage capacity constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('internal_efficiency_pct', models.FloatField(blank=True, default=0.975, help_text='Battery inherent efficiency independent of inverter and rectifier', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('inverter_efficiency_pct', models.FloatField(blank=True, default=0.96, help_text='Battery inverter efficiency', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('rectifier_efficiency_pct', models.FloatField(blank=True, default=0.96, help_text='Battery rectifier efficiency', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('soc_min_pct', models.FloatField(blank=True, default=0.2, help_text='Minimum allowable battery state of charge as fraction of energy capacity.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('soc_init_pct', models.FloatField(blank=True, default=0.5, help_text='Battery state of charge at first hour of optimization as fraction of energy capacity.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('can_grid_charge', models.BooleanField(blank=True, default=True, help_text='Flag to set whether the battery can be charged from the grid, or just onsite generation.')),
                ('installed_cost_per_kw', models.FloatField(blank=True, default=840.0, help_text='Total upfront battery power capacity costs (e.g. inverter and balance of power systems)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('installed_cost_per_kwh', models.FloatField(blank=True, default=420.0, help_text='Total upfront battery costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('replace_cost_per_kw', models.FloatField(blank=True, default=410.0, help_text='Battery power capacity replacement cost at time of replacement year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('replace_cost_per_kwh', models.FloatField(blank=True, default=200.0, help_text='Battery energy capacity replacement cost at time of replacement year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('inverter_replacement_year', models.IntegerField(blank=True, default=10, help_text='Number of years from start of analysis period to replace inverter', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(75)])),
                ('battery_replacement_year', models.IntegerField(blank=True, default=10, help_text='Number of years from start of analysis period to replace battery', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(75)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=7, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_pct', models.FloatField(blank=True, default=1.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('macrs_itc_reduction', models.FloatField(blank=True, default=0.5, help_text='Percent of the ITC value by which depreciable basis is reduced', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_itc_pct', models.FloatField(blank=True, default=0.0, help_text='Total investment tax credit in percent applied toward capital costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_rebate_per_kw', models.FloatField(blank=True, default=0.0, help_text='Rebate based on installed power capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('total_rebate_per_kwh', models.FloatField(blank=True, default=0.0, help_text='Rebate based on installed energy capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='WindInputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='WindInputs', serialize=False, to='job.scenario')),
                ('size_class', models.TextField(blank=True, choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('medium', 'Medium'), ('large', 'Large'), ('', 'Blank')], default='', help_text='Turbine size-class. One of ["residential", "commercial", "medium", "large"]. If not provided then the size_class is determined based on the average electric load.')),
                ('wind_meters_per_sec', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Data downloaded from Wind ToolKit for modeling wind turbine.', size=None)),
                ('wind_direction_degrees', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Data downloaded from Wind ToolKit for modeling wind turbine.', size=None)),
                ('temperature_celsius', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Data downloaded from Wind ToolKit for modeling wind turbine.', size=None)),
                ('pressure_atmospheres', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Data downloaded from Wind ToolKit for modeling wind turbine.', size=None)),
                ('min_kw', models.FloatField(blank=True, default=0, help_text='Minimum PV size constraint for optimization', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum size constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('installed_cost_per_kw', models.FloatField(blank=True, default=1600, help_text='Installed cost in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)])),
                ('om_cost_per_kw', models.FloatField(blank=True, default=16, help_text='Annual operations and maintenance costs in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=5, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_pct', models.FloatField(blank=True, default=1.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('macrs_itc_reduction', models.FloatField(blank=True, default=0.5, help_text='Percent of the ITC value by which depreciable basis is reduced', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('federal_itc_pct', models.FloatField(blank=True, default=0.26, help_text='Percentage of capital costs that are credited towards federal taxes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('state_ibi_pct', models.FloatField(blank=True, default=0, help_text='Percentage of capital costs offset by state incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('state_ibi_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum dollar value of state percentage-based capital cost incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('utility_ibi_pct', models.FloatField(blank=True, default=0, help_text='Percentage of capital costs offset by utility incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('utility_ibi_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum dollar value of utility percentage-based capital cost incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('federal_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='Federal rebates based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('state_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='State rebate based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('state_rebate_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum state rebate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('utility_rebate_per_kw', models.FloatField(blank=True, default=0, help_text='Utility rebate based on installed capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('utility_rebate_max', models.FloatField(blank=True, default=10000000000.0, help_text='Maximum utility rebate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000000.0)])),
                ('production_incentive_per_kwh', models.FloatField(blank=True, default=0, help_text='Production-based incentive value', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('production_incentive_max_benefit', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum annual value in present terms of production-based incentives', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('production_incentive_years', models.IntegerField(blank=True, default=1, help_text='Duration of production-based incentives from installation date', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('production_incentive_max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum system size eligible for production-based incentive', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('prod_factor_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optional user-defined production factors. Entries have units of kWh/kW, representing the energy (kWh) output of a 1 kW system in each time step. Must be hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples).', size=None)),
                ('can_net_meter', models.BooleanField(blank=True, default=True, help_text='True/False for if technology has option to participate in net metering agreement with utility. Note that a technology can only participate in either net metering or wholesale rates (not both).')),
                ('can_wholesale', models.BooleanField(blank=True, default=True, help_text='True/False for if technology has option to export energy that is compensated at the wholesale_rate. Note that a technology can only participate in either net metering or wholesale rates (not both).')),
                ('can_export_beyond_nem_limit', models.BooleanField(blank=True, default=True, help_text='True/False for if technology can export energy beyond the annual site load (and be compensated for that energy at the export_rate_beyond_net_metering_limit).')),
                ('can_curtail', models.BooleanField(blank=True, default=True, help_text='True/False for if technology has the ability to curtail energy production.')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='WindOutputs',
            fields=[
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='WindOutputs', serialize=False, to='job.scenario')),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('total_om_cost', models.FloatField(blank=True, null=True)),
                ('year_one_om_cost', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_exported_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_curtailed_production_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('lcoe_per_kwh', models.FloatField(blank=True, null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='StorageOutputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('size_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_soc_series_pct', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='StorageOutputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='SiteInputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(help_text='The approximate latitude of the site in decimal degrees.', validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.FloatField(help_text='The approximate longitude of the site in decimal degrees.', validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('land_acres', models.FloatField(blank=True, help_text='Land area in acres available for PV panel siting', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('roof_squarefeet', models.FloatField(blank=True, help_text='Area of roof in square feet available for PV siting', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000)])),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='SiteInputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='PVOutputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('total_om_cost', models.FloatField(blank=True, null=True)),
                ('total_om_cost_bau', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_produced_kwh_bau', models.FloatField(blank=True, null=True)),
                ('average_annual_energy_exported_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_energy_produced_kwh', models.FloatField(blank=True, null=True)),
                ('year_one_energy_produced_kwh_bau', models.FloatField(blank=True, null=True)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_to_grid_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('year_one_curtailed_production_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('lcoe_per_kwh', models.FloatField(blank=True, null=True)),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='PVOutputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.TextField(default='')),
                ('message', models.TextField(default='')),
                ('scenario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='FinancialInputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_years', models.IntegerField(blank=True, default=25, help_text='Analysis period in years. Must be integer.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(75)])),
                ('elec_cost_escalation_pct', models.FloatField(blank=True, default=0.023, help_text='Annual nominal utility electricity cost escalation rate.', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
                ('offtaker_discount_pct', models.FloatField(blank=True, default=0.083, help_text='Nominal energy offtaker discount rate. In single ownership model the offtaker is also the generation owner.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('offtaker_tax_pct', models.FloatField(blank=True, default=0.26, help_text='Host tax rate', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0.999)])),
                ('om_cost_escalation_pct', models.FloatField(blank=True, default=0.025, help_text='Annual nominal O&M cost escalation rate', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
                ('owner_discount_pct', models.FloatField(blank=True, default=0.083, help_text='Nominal generation owner discount rate. Used for two party financing model. In two party ownership model the offtaker does not own the generator(s).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('owner_tax_pct', models.FloatField(blank=True, default=0.26, help_text='Generation owner tax rate. Used for two party financing model. In two party ownership model the offtaker does not own the generator(s).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0.999)])),
                ('third_party_ownership', models.BooleanField(blank=True, default=False, help_text='Specify if ownership model is direct ownership or two party. In two party model the offtaker does not purcharse the generation technologies, but pays the generation owner for energy from the generator(s).')),
                ('value_of_lost_load_per_kwh', models.FloatField(blank=True, default=100, help_text='Value placed on unmet site load during grid outages. Units are US dollars per unmet kilowatt-hour. The value of lost load (VoLL) is used to determine the avoided outage costs by multiplying VoLL [$/kWh] with the average number of hours that the critical load can be met by the energy system (determined by simulating outages occuring at every hour of the year), and multiplying by the mean critical load.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)])),
                ('microgrid_upgrade_cost_pct', models.FloatField(blank=True, default=0.3, help_text='Additional cost, in percent of non-islandable capital costs, to make a distributed energy system islandable from the grid and able to serve critical loads. Includes all upgrade costs such as additional laber and critical load panels.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='FinancialInputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricUtilityOutputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_one_to_load_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optimal year one grid to load time series', size=None)),
                ('year_one_to_load_series_kw_bau', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Business as usual year one grid to load time series', size=None)),
                ('year_one_to_battery_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optimal year one grid to battery time series', size=None)),
                ('year_one_energy_supplied_kwh', models.FloatField(blank=True, help_text='Year one energy supplied from grid to load', null=True)),
                ('year_one_energy_supplied_kwh_bau', models.FloatField(blank=True, help_text='Year one energy supplied from grid to load', null=True)),
                ('year_one_emissions_lb_C02', models.FloatField(blank=True, help_text='Optimal year one equivalent pounds of carbon dioxide emitted from utility electricity use. Calculated from EPA AVERT region hourly grid emissions factor series for the continental US.In AK and HI, the best available data are EPA eGRID annual averages.', null=True)),
                ('year_one_emissions_bau_lb_C02', models.FloatField(blank=True, help_text='Business as usual year one equivalent pounds of carbon dioxide emitted from utility electricity use. Calculated from EPA AVERT region hourly grid emissions factor series for the continental US.In AK and HI, the best available data are EPA eGRID annual averages.', null=True)),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ElectricUtilityOutputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricUtilityInputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outage_start_time_step', models.IntegerField(blank=True, help_text='Time step that grid outage starts. Must be less than outage_end.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(35040)])),
                ('outage_end_time_step', models.IntegerField(blank=True, help_text='Time step that grid outage ends. Must be greater than outage_start.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(35040)])),
                ('interconnection_limit_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Limit on total system capacity that can be interconnected to the grid', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('net_metering_limit_kw', models.FloatField(blank=True, default=0, help_text='Upper limit on the total capacity of technologies that can participate in net metering agreement.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ElectricUtilityInputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricTariffOutputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emissions_region', models.TextField(blank=True, null=True)),
                ('year_one_energy_cost', models.FloatField(blank=True, help_text='Optimal year one utility energy cost', null=True)),
                ('year_one_demand_cost', models.FloatField(blank=True, help_text='Optimal year one utility demand cost', null=True)),
                ('year_one_fixed_cost', models.FloatField(blank=True, help_text='Optimal year one utility fixed cost', null=True)),
                ('year_one_min_charge_adder', models.FloatField(blank=True, help_text='Optimal year one utility minimum charge adder', null=True)),
                ('year_one_energy_cost_bau', models.FloatField(blank=True, help_text='Business as usual year one utility energy cost', null=True)),
                ('year_one_demand_cost_bau', models.FloatField(blank=True, help_text='Business as usual year one utility demand cost', null=True)),
                ('year_one_fixed_cost_bau', models.FloatField(blank=True, help_text='Business as usual year one utility fixed cost', null=True)),
                ('year_one_min_charge_adder_bau', models.FloatField(blank=True, help_text='Business as usual year one utility minimum charge adder', null=True)),
                ('total_energy_cost', models.FloatField(blank=True, help_text='Optimal total utility energy cost over the analysis period, after-tax', null=True)),
                ('total_demand_cost', models.FloatField(blank=True, help_text='Optimal total lifecycle utility demand cost over the analysis period, after-tax', null=True)),
                ('total_fixed_cost', models.FloatField(blank=True, help_text='Optimal total utility fixed cost over the analysis period, after-tax', null=True)),
                ('total_min_charge_adder', models.FloatField(blank=True, help_text='Optimal total utility minimum charge adder over the analysis period, after-tax', null=True)),
                ('total_energy_cost_bau', models.FloatField(blank=True, help_text='Business as usual total utility energy cost over the analysis period, after-tax', null=True)),
                ('total_demand_cost_bau', models.FloatField(blank=True, help_text='Business as usual total lifecycle utility demand cost over the analysis period, after-tax', null=True)),
                ('total_fixed_cost_bau', models.FloatField(blank=True, help_text='Business as usual total utility fixed cost over the analysis period, after-tax', null=True)),
                ('total_min_charge_adder_bau', models.FloatField(blank=True, help_text='Business as usual total utility minimum charge adder over the analysis period, after-tax', null=True)),
                ('total_export_benefit', models.FloatField(blank=True, help_text='Optimal total value of exported energy over the analysis period, after-tax', null=True)),
                ('total_export_benefit_bau', models.FloatField(blank=True, help_text='Business as usual total value of exported energy over the analysis period, after-tax', null=True)),
                ('year_one_bill', models.FloatField(blank=True, help_text='Optimal year one total utility bill', null=True)),
                ('year_one_bill_bau', models.FloatField(blank=True, help_text='Business as usual year one total utility bill', null=True)),
                ('year_one_export_benefit', models.FloatField(blank=True, help_text='Optimal year one value of exported energy', null=True)),
                ('year_one_export_benefit_bau', models.FloatField(blank=True, help_text='Business as usual year one value of exported energy', null=True)),
                ('year_one_energy_cost_series_per_kwh', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optimal year one hourly energy costs', size=None)),
                ('year_one_demand_cost_series_per_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optimal year one hourly demand costs', size=None)),
                ('year_one_coincident_peak_cost', models.FloatField(blank=True, help_text='Optimal year one coincident peak charges', null=True)),
                ('year_one_coincident_peak_cost_bau', models.FloatField(blank=True, help_text='Business as usual year one coincident peak charges', null=True)),
                ('total_coincident_peak_cost', models.FloatField(blank=True, help_text='Optimal total coincident peak charges over the analysis period, after-tax', null=True)),
                ('total_coincident_peak_cost_bau', models.FloatField(blank=True, help_text='Business as usual total coincident peak charges over the analysis period, after-tax', null=True)),
                ('year_one_chp_standby_cost', models.FloatField(blank=True, help_text='Optimal year one standby charge cost incurred by CHP', null=True)),
                ('total_chp_standby_cost', models.FloatField(blank=True, help_text='Optimal total standby charge cost incurred by CHP over the analysis period, after-tax', null=True)),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ElectricTariffOutputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricTariffInputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_demand_rates', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Array (length of 12) of blended demand charges in dollars per kW', size=12)),
                ('monthly_energy_rates', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Array (length of 12) of blended energy rates in dollars per kWh.', size=12)),
                ('urdb_label', models.TextField(blank=True, help_text='Label attribute of utility rate structure from Utility Rate Database API https://openei.org/services/doc/rest/util_rates/?version=8')),
                ('urdb_response', picklefield.fields.PickledObjectField(blank=True, editable=False, help_text='Utility rate structure from Utility Rate Database API https://openei.org/services/doc/rest/util_rates/?version=8', null=True)),
                ('urdb_rate_name', models.TextField(blank=True, help_text='Name of utility rate from Utility Rate Database https://openei.org/wiki/Utility_Rate_Database')),
                ('urdb_utility_name', models.TextField(blank=True, help_text='Name of Utility from Utility Rate Database https://openei.org/wiki/Utility_Rate_Database')),
                ('blended_annual_demand_rate', models.FloatField(blank=True, help_text='Annual blended demand rates (annual demand charge cost in $ divided by annual peak demand in kW)', null=True)),
                ('blended_annual_energy_rate', models.FloatField(blank=True, help_text='Annual blended energy rate (total annual energy in kWh divided by annual cost in $)', null=True)),
                ('wholesale_rate', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0)]), blank=True, default=list, help_text='Price of electricity sold back to the grid in absence of net metering. Can be a scalar value, which applies for all-time, or an array with time-sensitive values. If an array is input then it must have a length of 8760, 17520, or 35040. The inputed arrayvalues are up/down-sampled using mean values to match the Settings.time_steps_per_hour.', size=None)),
                ('export_rate_beyond_net_metering_limit', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)]), blank=True, default=list, help_text='Price of electricity sold back to the grid above the site load, regardless of net metering. Can be a scalar value, which applies for all-time, or an array with time-sensitive values. If an array is input then it must have a length of 8760, 17520, or 35040. The inputed array values are up/down-sampled using mean values to match the Scenario time_steps_per_hour.', size=None)),
                ('tou_energy_rates_per_kwh', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Time-of-use energy rates, provided by user. Must be an array with length equal to number of time steps per year. Hourly or 15 minute rates allowed.', size=None)),
                ('add_monthly_rates_to_urdb_rate', models.BooleanField(blank=True, default=False, help_text='Set to true to add the monthly blended energy rates and demand charges to the URDB rate schedule. Otherwise, blended rates will only be considered if a URDB rate is not provided.')),
                ('add_tou_energy_rates_to_urdb_rate', models.BooleanField(blank=True, default=False, help_text='Set to true to add tou_energy_rates_per_kwh to the URDB rate schedule. Otherwise, tou energy rates will only be considered if a URDB rate is not provided.')),
                ('coincident_peak_load_active_timesteps', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True), blank=True, default=list, size=None, validators=[django.core.validators.MinValueValidator(1)]), blank=True, default=list, help_text='The optional coincident_peak_load_charge_per_kw will apply to the max grid-purchased power during these time steps. Note time steps are indexed to a base of 1 not 0.', size=None)),
                ('coincident_peak_load_charge_per_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text='Optional coincident peak demand charge that is applied to the max load during the timesteps specified in coincident_peak_load_active_timesteps', null=True, size=None)),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ElectricTariffInputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricLoadInputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annual_kwh', models.FloatField(blank=True, help_text="Annual site energy consumption from electricity, in kWh, used to scale simulated default building load profile for the site's climate zone", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100000000)])),
                ('doe_reference_name', models.TextField(blank=True, choices=[('FastFoodRest', 'Fastfoodrest'), ('FullServiceRest', 'Fullservicerest'), ('Hospital', 'Hospital'), ('LargeHotel', 'Largehotel'), ('LargeOffice', 'Largeoffice'), ('MediumOffice', 'Mediumoffice'), ('MidriseApartment', 'Midriseapartment'), ('Outpatient', 'Outpatient'), ('PrimarySchool', 'Primaryschool'), ('RetailStore', 'Retailstore'), ('SecondarySchool', 'Secondaryschool'), ('SmallHotel', 'Smallhotel'), ('SmallOffice', 'Smalloffice'), ('StripMall', 'Stripmall'), ('Supermarket', 'Supermarket'), ('Warehouse', 'Warehouse'), ('FlatLoad', 'Flatload'), ('FlatLoad_24_5', 'Flatload 24 5'), ('FlatLoad_16_7', 'Flatload 16 7'), ('FlatLoad_16_5', 'Flatload 16 5'), ('FlatLoad_8_7', 'Flatload 8 7'), ('FlatLoad_8_5', 'Flatload 8 5')], help_text='Simulated load profile from DOE Commercial Reference Buildings https://energy.gov/eere/buildings/commercial-reference-buildings')),
                ('year', models.IntegerField(blank=True, default=2020, help_text="Year of Custom Load Profile. If a custom load profile is uploaded via the loads_kw parameter, it is important that this year correlates with the load profile so that weekdays/weekends are determined correctly for the utility rate tariff. If a DOE Reference Building profile (aka 'simulated' profile) is used, the year is set to 2017 since the DOE profiles start on a Sunday.", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)])),
                ('monthly_totals_kwh', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]), blank=True, default=list, help_text="Monthly site energy consumption from electricity series (an array 12 entries long), in kWh, used to scale simulated default building load profile for the site's climate zone", size=None)),
                ('loads_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Typical load over all hours in one year. Must be hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples). All non-net load values must be greater than or equal to zero. ', size=None)),
                ('critical_loads_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Critical load during an outage period. Must be hourly (8,760 samples), 30 minute (17,520 samples),or 15 minute (35,040 samples). All non-net load values must be greater than or equal to zero.', size=None)),
                ('loads_kw_is_net', models.BooleanField(blank=True, default=True, help_text='If there is existing PV, must specify whether provided load is the net load after existing PV or not.', null=True)),
                ('critical_loads_kw_is_net', models.BooleanField(blank=True, default=False, help_text='If there is existing PV, must specify whether provided load is the net load after existing PV or not.', null=True)),
                ('critical_load_pct', models.FloatField(blank=True, default=0.5, help_text='Critical load factor is multiplied by the typical load to determine the critical load that must be met during an outage. Value must be between zero and one, inclusive.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('blended_doe_reference_names', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, choices=[('FastFoodRest', 'Fastfoodrest'), ('FullServiceRest', 'Fullservicerest'), ('Hospital', 'Hospital'), ('LargeHotel', 'Largehotel'), ('LargeOffice', 'Largeoffice'), ('MediumOffice', 'Mediumoffice'), ('MidriseApartment', 'Midriseapartment'), ('Outpatient', 'Outpatient'), ('PrimarySchool', 'Primaryschool'), ('RetailStore', 'Retailstore'), ('SecondarySchool', 'Secondaryschool'), ('SmallHotel', 'Smallhotel'), ('SmallOffice', 'Smalloffice'), ('StripMall', 'Stripmall'), ('Supermarket', 'Supermarket'), ('Warehouse', 'Warehouse'), ('FlatLoad', 'Flatload'), ('FlatLoad_24_5', 'Flatload 24 5'), ('FlatLoad_16_7', 'Flatload 16 7'), ('FlatLoad_16_5', 'Flatload 16 5'), ('FlatLoad_8_7', 'Flatload 8 7'), ('FlatLoad_8_5', 'Flatload 8 5')]), blank=True, default=list, help_text='Used in concert with blended_doe_reference_percents to create a blended load profile from multiple DoE Commercial Reference Buildings.', size=None)),
                ('blended_doe_reference_percents', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)]), blank=True, default=list, help_text='Used in concert with blended_doe_reference_names to create a blended load profile from multiple DoE Commercial Reference Buildings. Must sum to 1.0.', size=None)),
                ('scenario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ElectricLoadInputs', to='job.scenario')),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
    ]
