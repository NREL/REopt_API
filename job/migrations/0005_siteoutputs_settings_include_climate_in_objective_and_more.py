# Generated by Django 4.0.4 on 2022-07-12 20:50

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import job.models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0004_electricstorageoutputs_initial_capital_cost_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SiteOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='SiteOutputs', serialize=False, to='job.apimeta')),
                ('annual_renewable_electricity_kwh', models.FloatField(help_text='Electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation.Calculated as total annual RE electric generation, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included). ')),
                ('renewable_electricity_pct', models.FloatField(help_text='Portion of electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation.Calculated as total annual RE electric generation, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included, divided by total annual electric consumption.')),
                ('total_renewable_energy_pct', models.FloatField(help_text='Portion of annual total energy consumption that is derived from on-site renewable resource generation.The numerator is calculated as total annual RE electricity consumption (calculation described for annual_renewable_electricity_kwh output),plus total annual thermal energy content of steam/hot water generated from renewable fuels (non-electrified heat loads).The thermal energy content is calculated as total energy content of steam/hot water generation from renewable fuels,minus waste heat generated by renewable fuels, minus any applicable hot water thermal energy storage efficiency losses.The denominator is calculated as total annual electricity consumption plus total annual thermal steam/hot water load.')),
                ('year_one_emissions_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('lifecycle_emissions_climate_cost', models.FloatField(blank=True, help_text="Total cost of CO2 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_health_cost', models.FloatField(blank=True, help_text="Total cost of NOx, SO2, and PM2.5 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('annual_renewable_electricity_kwh_bau', models.FloatField(help_text='Electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation in the BAU case.Calculated as total RE electric generation in the BAU case, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included). ')),
                ('renewable_electricity_pct_bau', models.FloatField(help_text='Electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation in the BAU case.Calculated as total annual RE electric generation in the BAU case, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included, divided by total annual electric consumption.')),
                ('total_renewable_energy_pct_bau', models.FloatField(help_text='Portion of annual total energy consumption that is derived from on-site renewable resource generation in the BAU case.The numerator is calculated as total annual RE electricity consumption (calculation described for annual_renewable_electricity_kwh_bau output),plus total annual thermal energy content of steam/hot water generated from renewable fuels (non-electrified heat loads).The thermal energy content is calculated as total energy content of steam/hot water generation from renewable fuels,minus waste heat generated by renewable fuels, minus any applicable hot water thermal energy storage efficiency losses.The denominator is calculated as total annual electricity consumption plus total annual thermal steam/hot water load.')),
                ('year_one_emissions_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('lifecycle_emissions_climate_cost_bau', models.FloatField(blank=True, help_text="Total cost of CO2 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_health_cost_bau', models.FloatField(blank=True, help_text="Total cost of NOx, SO2, and PM2.5 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_reduction_CO2_pct', models.FloatField(blank=True, help_text='Percent reduction in total pounds of carbon dioxide emissions in the optimal case relative to the BAU case', null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.AddField(
            model_name='settings',
            name='include_climate_in_objective',
            field=models.BooleanField(blank=True, default=False, help_text="If True, then climate costs of CO2 emissions are included in the model's objective function."),
        ),
        migrations.AddField(
            model_name='settings',
            name='include_health_in_objective',
            field=models.BooleanField(blank=True, default=False, help_text="If True, then health costs of NOx, SO2, and PM2.5 emissions are included in the model's objective function."),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='CO2_emissions_reduction_max_pct',
            field=models.FloatField(blank=True, help_text='Maximum allowed percentage reduction of CO2 emissions, relative to the business-as-usual case, over the financial lifecycle of the project.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='CO2_emissions_reduction_min_pct',
            field=models.FloatField(blank=True, help_text='Minimum allowed percentage reduction of CO2 emissions, relative to the business-as-usual case, over the financial lifecycle of the project.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='include_exported_elec_emissions_in_total',
            field=models.BooleanField(blank=True, default=True, help_text='If True, then energy exported to the grid is included in emissions calculations.'),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='include_exported_renewable_electricity_in_total',
            field=models.BooleanField(blank=True, default=True, help_text='If True, then renewable energy exported to the grid is counted in renewable electricity percent calculation.'),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='renewable_electricity_max_pct',
            field=models.FloatField(blank=True, help_text='Maximum allowed percentage of site electric consumption met by renewable energy on an annual basis.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='renewable_electricity_min_pct',
            field=models.FloatField(blank=True, help_text='Minimum allowed percentage of site electric consumption met by renewable energy on an annual basis.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AlterField(
            model_name='settings',
            name='run_bau',
            field=models.BooleanField(blank=True, default=True, help_text='If True, then the Business-As-Usual scenario is also solved to provide additional outputs such as the LCC and BAU costs.'),
        ),
    ]
