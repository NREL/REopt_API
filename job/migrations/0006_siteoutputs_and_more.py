# Generated by Django 4.0.6 on 2022-08-22 18:06

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import job.models


class Migration(migrations.Migration):

    dependencies = [
        ('job', '0005_remove_electrictariffinputs_coincident_peak_load_active_timesteps_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SiteOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='SiteOutputs', serialize=False, to='job.apimeta')),
                ('annual_renewable_electricity_kwh', models.FloatField(blank=True, help_text='Electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation.Calculated as total annual RE electric generation, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included). ', null=True)),
                ('renewable_electricity_pct', models.FloatField(blank=True, help_text='Portion of electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation.Calculated as total annual RE electric generation, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included, divided by total annual electric consumption.', null=True)),
                ('total_renewable_energy_pct', models.FloatField(blank=True, help_text='Portion of annual total energy consumption that is derived from on-site renewable resource generation.The numerator is calculated as total annual RE electricity consumption (calculation described for annual_renewable_electricity_kwh output),plus total annual thermal energy content of steam/hot water generated from renewable fuels (non-electrified heat loads).The thermal energy content is calculated as total energy content of steam/hot water generation from renewable fuels,minus waste heat generated by renewable fuels, minus any applicable hot water thermal energy storage efficiency losses.The denominator is calculated as total annual electricity consumption plus total annual thermal steam/hot water load.', null=True)),
                ('year_one_emissions_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn in year one.", null=True)),
                ('lifecycle_emissions_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_CO2', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_NOx', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_SO2', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_PM25', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn over the analysis period.", null=True)),
                ('annual_renewable_electricity_kwh_bau', models.FloatField(blank=True, help_text='Electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation in the BAU case.Calculated as total RE electric generation in the BAU case, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included). ', null=True)),
                ('renewable_electricity_pct_bau', models.FloatField(blank=True, help_text='Electricity consumption (incl. electric heating/cooling loads) that is derived from on-site renewable resource generation in the BAU case.Calculated as total annual RE electric generation in the BAU case, minus storage losses and curtailment, with the user selecting whether exported renewable generation is included, divided by total annual electric consumption.', null=True)),
                ('total_renewable_energy_pct_bau', models.FloatField(blank=True, help_text='Portion of annual total energy consumption that is derived from on-site renewable resource generation in the BAU case.The numerator is calculated as total annual RE electricity consumption (calculation described for annual_renewable_electricity_kwh_bau output),plus total annual thermal energy content of steam/hot water generated from renewable fuels (non-electrified heat loads).The thermal energy content is calculated as total energy content of steam/hot water generation from renewable fuels,minus waste heat generated by renewable fuels, minus any applicable hot water thermal energy storage efficiency losses.The denominator is calculated as total annual electricity consumption plus total annual thermal steam/hot water load.', null=True)),
                ('year_one_emissions_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('year_one_emissions_from_fuelburn_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn in year one in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_CO2_bau', models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_NOx_bau', models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_SO2_bau', models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_from_fuelburn_tonnes_PM25_bau', models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True)),
                ('lifecycle_emissions_reduction_CO2_pct', models.FloatField(blank=True, help_text='Percent reduction in total pounds of carbon dioxide emissions in the optimal case relative to the BAU case', null=True)),
            ],
            bases=(job.models.BaseModel, models.Model),
        ),
        migrations.RemoveField(
            model_name='electrictariffoutputs',
            name='emissions_region',
        ),
        migrations.RemoveField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_bau_lb_C02',
        ),
        migrations.RemoveField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_lb_C02',
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_CO2_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual CO2 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_NOx_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual NOx marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_PM25_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual PM2.5 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_SO2_decrease_pct',
            field=models.FloatField(blank=True, default=0.01174, help_text='Annual percent decrease in the total annual SO2 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_CO2_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='CO2 emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_NOx_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='NOx emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_PM25_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='PM2.5 emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_factor_series_lb_SO2_per_kwh',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='SO2 emissions factor over all hours in one year. Can be provided as either a single constant fraction that will be applied across all timesteps, or an annual timeseries array at an hourly (8,760 samples), 30 minute (17,520 samples), or 15 minute (35,040 samples) resolution.', size=None),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='emissions_region',
            field=models.TextField(blank=True, help_text="Name of the AVERT emissions region to use. Options are: 'California', 'Central', 'Florida', 'Mid-Atlantic', 'Midwest', 'Carolinas', 'New England', 'Northwest', 'New York', 'Rocky Mountains', 'Southeast', 'Southwest', 'Tennessee', 'Texas', 'Alaska', 'Hawaii (except Oahu)', 'Hawaii (Oahu)'. If emissions_factor_series_lb_<pollutant>_per_kwh inputs are not provided, emissions_region overrides latitude and longitude in determining emissions factors."),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='distance_to_emissions_region_meters',
            field=models.FloatField(blank=True, help_text='Distance in meters from the site to the nearest AVERT emissions region.', null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='emissions_region',
            field=models.TextField(blank=True, help_text='Name of the AVERT emissions region used. Determined from site longitude and latitude if emissions_region and emissions_factor_series_lb_<pollutant>_per_kwh inputs were not provided.'),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_CO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's grid-purchased electricity over the analysis period. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_CO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's grid-purchased electricity over the analysis period in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_NOx',
            field=models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's grid-purchased electricity over the analysis period. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_NOx_bau',
            field=models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's grid-purchased electricity over the analysis period in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_PM25',
            field=models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's grid-purchased electricity over the analysis period. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_PM25_bau',
            field=models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's grid-purchased electricity over the analysis period in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_SO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's grid-purchased electricity over the analysis period. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='lifecycle_emissions_tonnes_SO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's grid-purchased electricity over the analysis period in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_CO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's grid-purchased electricity in year one. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_CO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's grid-purchased electricity in year one in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_NOx',
            field=models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's grid-purchased electricity in year one. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_NOx_bau',
            field=models.FloatField(blank=True, help_text="Total tons of NOx emissions associated with the site's grid-purchased electricity in year one in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_PM25',
            field=models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's grid-purchased electricity in year one. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_PM25_bau',
            field=models.FloatField(blank=True, help_text="Total tons of PM2.5 emissions associated with the site's grid-purchased electricity in year one in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_SO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2 emissions associated with the site's grid-purchased electricity in year one. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='year_one_emissions_tonnes_SO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of SO2 emissions associated with the site's grid-purchased electricity in year one in the BAU case. If include_exported_elec_emissions_in_total is False, this value only reflects grid purchaes. Otherwise, it accounts for emissions offset from any export to the grid.", null=True),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='CO2_cost_escalation_pct',
            field=models.FloatField(blank=True, default=0.042173, help_text='Annual nominal Social Cost of CO2 escalation rate (as a decimal).', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='CO2_cost_per_tonne',
            field=models.FloatField(blank=True, default=51.0, help_text='Social Cost of CO2 in the first year of the analysis. Units are US dollars per metric ton of CO2. The default of $51/t is the 2020 value (using a 3 pct discount rate) estimated by the U.S. Interagency Working Group on Social Cost of Greenhouse Gases.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='NOx_cost_escalation_pct',
            field=models.FloatField(blank=True, help_text='Annual nominal escalation rate of the public health cost of 1 tonne of NOx emissions (as a decimal). The default value is calculated from the EASIUR model for a height of 150m.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='NOx_grid_cost_per_tonne',
            field=models.FloatField(blank=True, help_text='Public health cost of NOx emissions from grid electricity in the first year of the analysis. Units are US dollars per metric ton. Default values for the U.S. obtained from the EASIUR model.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='NOx_onsite_fuelburn_cost_per_tonne',
            field=models.FloatField(blank=True, help_text='Public health cost of NOx from onsite fuelburn in the first year of the analysis. Units are US dollars per metric ton. Default values for the U.S. obtained from the EASIUR model.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='PM25_cost_escalation_pct',
            field=models.FloatField(blank=True, help_text='Annual nominal escalation rate of the public health cost of 1 tonne of PM2.5 emissions (as a decimal). The default value is calculated from the EASIUR model for a height of 150m.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='PM25_grid_cost_per_tonne',
            field=models.FloatField(blank=True, help_text='Public health cost of PM2.5 emissions from grid electricity in the first year of the analysis. Units are US dollars per metric ton. Default values for the U.S. obtained from the EASIUR model.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='PM25_onsite_fuelburn_cost_per_tonne',
            field=models.FloatField(blank=True, help_text='Public health cost of PM2.5 from onsite fuelburn in the first year of the analysis. Units are US dollars per metric ton. Default values for the U.S. obtained from the EASIUR model.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='SO2_cost_escalation_pct',
            field=models.FloatField(blank=True, help_text='Annual nominal escalation rate of the public health cost of 1 tonne of SO2 emissions (as a decimal). The default value is calculated from the EASIUR model for a height of 150m.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='SO2_grid_cost_per_tonne',
            field=models.FloatField(blank=True, help_text='Public health cost of SO2 emissions from grid electricity in the first year of the analysis. Units are US dollars per metric ton. Default values for the U.S. obtained from the EASIUR model.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialinputs',
            name='SO2_onsite_fuelburn_cost_per_tonne',
            field=models.FloatField(blank=True, help_text='Public health cost of SO2 from onsite fuelburn in the first year of the analysis. Units are US dollars per metric ton. Default values for the U.S. obtained from the EASIUR model.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000.0)]),
        ),
        migrations.AddField(
            model_name='financialoutputs',
            name='breakeven_cost_of_emissions_reduction_per_tonnes_CO2',
            field=models.FloatField(blank=True, help_text='Cost of emissions required to breakeven (NPV = 0) compared to the BAU case LCC.If the cost of health emissions were included in the objective function,calculation of this output value keeps the cost of those emissions at the values input by the user.', null=True),
        ),
        migrations.AddField(
            model_name='financialoutputs',
            name='lifecycle_emissions_cost_climate',
            field=models.FloatField(blank=True, help_text="Total cost of CO2 emissions associated with the site's energy consumption over the analysis period.", null=True),
        ),
        migrations.AddField(
            model_name='financialoutputs',
            name='lifecycle_emissions_cost_climate_bau',
            field=models.FloatField(blank=True, help_text="Total cost of CO2 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True),
        ),
        migrations.AddField(
            model_name='financialoutputs',
            name='lifecycle_emissions_cost_health',
            field=models.FloatField(blank=True, help_text="Total cost of NOx, SO2, and PM2.5 emissions associated with the site's energy consumption over the analysis period.", null=True),
        ),
        migrations.AddField(
            model_name='financialoutputs',
            name='lifecycle_emissions_cost_health_bau',
            field=models.FloatField(blank=True, help_text="Total cost of NOx, SO2, and PM2.5 emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True),
        ),
        migrations.AddField(
            model_name='generatorinputs',
            name='emissions_factor_lb_CO2_per_gal',
            field=models.FloatField(blank=True, default=22.51, help_text='Pounds of CO2 emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AddField(
            model_name='generatorinputs',
            name='emissions_factor_lb_NOx_per_gal',
            field=models.FloatField(blank=True, default=0.0775544, help_text='Pounds of CO2 emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AddField(
            model_name='generatorinputs',
            name='emissions_factor_lb_PM25_per_gal',
            field=models.FloatField(blank=True, default=0.0, help_text='Pounds of CO2 emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AddField(
            model_name='generatorinputs',
            name='emissions_factor_lb_SO2_per_gal',
            field=models.FloatField(blank=True, default=0.040020476, help_text='Pounds of CO2 emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AddField(
            model_name='generatorinputs',
            name='fuel_renewable_energy_pct',
            field=models.FloatField(blank=True, default=0.0, help_text='Fraction of the generator fuel considered renewable.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='settings',
            name='include_climate_in_objective',
            field=models.BooleanField(blank=True, default=False, help_text="If True, then climate costs of CO2 emissions are included in the model's objective function."),
        ),
        migrations.AddField(
            model_name='settings',
            name='include_health_in_objective',
            field=models.BooleanField(blank=True, default=False, help_text="If True, then health costs of NOx, SO2, and PM2.5 emissions are included in the model's objective function."),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='CO2_emissions_reduction_max_pct',
            field=models.FloatField(blank=True, help_text='Maximum allowed percentage reduction of CO2 emissions, relative to the business-as-usual case, over the financial lifecycle of the project.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='CO2_emissions_reduction_min_pct',
            field=models.FloatField(blank=True, help_text='Minimum allowed percentage reduction of CO2 emissions, relative to the business-as-usual case, over the financial lifecycle of the project.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='include_exported_elec_emissions_in_total',
            field=models.BooleanField(blank=True, default=True, help_text='If True, then energy exported to the grid is included in emissions calculations.'),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='include_exported_renewable_electricity_in_total',
            field=models.BooleanField(blank=True, default=True, help_text='If True, then renewable energy exported to the grid is counted in renewable electricity percent calculation.'),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='renewable_electricity_max_pct',
            field=models.FloatField(blank=True, help_text='Maximum allowed percentage of site electric consumption met by renewable energy on an annual basis.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='siteinputs',
            name='renewable_electricity_min_pct',
            field=models.FloatField(blank=True, help_text='Minimum allowed percentage of site electric consumption met by renewable energy on an annual basis.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AlterField(
            model_name='electrictariffinputs',
            name='coincident_peak_load_active_time_steps',
            field=django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(1)]), blank=True, default=list, size=None), blank=True, default=list, help_text='The optional coincident_peak_load_charge_per_kw will apply to the max grid-purchased power during these time steps. Note time steps are indexed to a base of 1 not 0.', size=None),
        ),
    ]
