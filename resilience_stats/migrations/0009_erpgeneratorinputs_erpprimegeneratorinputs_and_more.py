# Generated by Django 4.0.4 on 2022-12-21 06:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import resilience_stats.models


class Migration(migrations.Migration):

    dependencies = [
        ('resilience_stats', '0008_erpmeta_erpbackupgeneratorinputs_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ERPGeneratorInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ERPGeneratorInputs', serialize=False, to='resilience_stats.erpmeta')),
                ('operational_availability', models.FloatField(blank=True, default=0.9998, help_text='Fraction of year generators not down for maintenance', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('failure_to_start', models.FloatField(blank=True, default=0.0066, help_text='Chance of generator starting when an outage occurs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('failure_to_run', models.FloatField(blank=True, default=0.00157, help_text='Chance of generator failing in each hour of outage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('num_generators', models.IntegerField(blank=True, default=1, help_text='Number of generator units', validators=[django.core.validators.MinValueValidator(1)])),
                ('size_kw', models.FloatField(blank=True, default=0.0, help_text='Generator unit capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('fuel_avail_gal', models.FloatField(blank=True, default=1000000000.0, help_text='Amount of diesel fuel available, either for all generators or per generator depending on value of fuel_avail_gal_is_per_generator.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('fuel_avail_gal_is_per_generator', models.BooleanField(blank=True, default=False, help_text='Whether fuel_avail_gal is per generator or per generator type')),
                ('electric_efficiency_half_load', models.FloatField(blank=True, help_text='Electric efficiency of generator running at half load.electric_efficiency_full_load', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('electric_efficiency_full_load', models.FloatField(blank=True, default=0.34, help_text='Electric efficiency of generator running at full load.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
            ],
            bases=(resilience_stats.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ERPPrimeGeneratorInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ERPPrimeGeneratorInputs', serialize=False, to='resilience_stats.erpmeta')),
                ('is_chp', models.BooleanField(blank=True, default=False, help_text='Whether prime generator system is CHP')),
                ('operational_availability', models.FloatField(blank=True, default=0.9998, help_text='Fraction of year CHP units are not down for maintenance', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('failure_to_start', models.FloatField(blank=True, default=0.0066, help_text='Chance of CHP unit starting when an outage occurs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('failure_to_run', models.FloatField(blank=True, default=0.00157, help_text='Chance of CHP unit failing in each hour of outage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('num_generators', models.IntegerField(blank=True, default=1, help_text='Number of CHP units', validators=[django.core.validators.MinValueValidator(1)])),
                ('size_kw', models.FloatField(blank=True, default=0.0, help_text='CHP unit electric capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('electric_efficiency_half_load', models.FloatField(blank=True, help_text='Electric efficiency of CHP unit running at half load.electric_efficiency_full_load', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('electric_efficiency_full_load', models.FloatField(default=0.34, help_text='Electric efficiency of CHP unit running at full load.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
            ],
            bases=(resilience_stats.models.BaseModel, models.Model),
        ),
        migrations.DeleteModel(
            name='ERPBackupGeneratorInputs',
        ),
    ]
