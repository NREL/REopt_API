# Generated by Django 4.0.4 on 2022-09-20 17:21

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import resilience_stats.models


class Migration(migrations.Migration):

    dependencies = [
        ('resilience_stats', '0007_resiliencemodel_avoided_outage_costs_us_dollars'),
    ]

    operations = [
        migrations.CreateModel(
            name='ERPMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_uuid', models.UUIDField(unique=True)),
                ('user_uuid', models.TextField(blank=True, default='', help_text='The assigned unique ID of a signed in REopt user.')),
                ('job_type', models.TextField(default='developer.nrel.gov')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('reopt_version', models.TextField(blank=True, default='', help_text='Version number of the REopt Julia package that is used to calculate reliability.')),
            ],
            bases=(resilience_stats.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ERPInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ERPInputs', serialize=False, to='resilience_stats.erpmeta')),
                ('reopt_run_uuid', models.UUIDField(blank=True, help_text='The unique ID of a REopt optimization run from which to load inputs.', null=True)),
                ('generator_operational_availability', models.FloatField(blank=True, default=0.9998, help_text='Fraction of year generators not down for maintenance', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('generator_failure_to_start', models.FloatField(blank=True, default=0.0066, help_text='Chance of generator starting given outage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('generator_failure_to_run', models.FloatField(blank=True, default=0.00157, help_text='Chance of generator failing in each hour of outage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('num_generators', models.IntegerField(blank=True, default=1, help_text='Number of generators', validators=[django.core.validators.MinValueValidator(1)])),
                ('generator_size_kw', models.FloatField(blank=True, default=0.0, help_text='Backup generator capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('battery_size_kw', models.FloatField(blank=True, default=0.0, help_text='Battery kW power capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('battery_size_kwh', models.FloatField(blank=True, default=0.0, help_text='Battery kWh energy capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('starting_battery_soc_kwh', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(models.FloatField(blank=True, default=0.0, help_text='Battery kWh energy capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)]))]), blank=True, default=list, help_text='Battery kWh state of charge when an outage begins, at each timestep. Must be hourly (8,760 samples).', size=None)),
                ('battery_charge_efficiency', models.FloatField(blank=True, default=0.948, help_text='Efficiency of charging battery', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('battery_discharge_efficiency', models.FloatField(blank=True, default=0.948, help_text='Efficiency of discharging battery', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('num_battery_bins', models.IntegerField(blank=True, default=100, help_text='Number of bins for modeling battery state of charge', validators=[django.core.validators.MinValueValidator(1)])),
                ('pv_size_kw', models.FloatField(blank=True, default=0.0, help_text='PV system capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('pv_production_factor_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]), blank=True, default=list, help_text='PV system output at each timestep, normalized to PV system size. Must be hourly (8,760 samples).', size=None)),
                ('chp_size_kw', models.FloatField(blank=True, default=0.0, help_text='CHP system electric capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_outage_duration', models.IntegerField(blank=True, default=96, help_text='Maximum outage duration modeled', validators=[django.core.validators.MinValueValidator(1)])),
                ('critical_loads_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), help_text='Critical load during an outage. Must be hourly (8,760 samples). All non-net load values must be greater than or equal to zero.', size=None)),
            ],
            bases=(resilience_stats.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ERPOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ERPOutputs', serialize=False, to='resilience_stats.erpmeta')),
                ('mean_marginal_duration_survival_probability', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), help_text='The mean, calculated over outages starting at each hour of the year, of the marginal probability of surviving each hour of max_outage_duration.', size=None)),
                ('min_marginal_duration_survival_probability', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), help_text='The minimum, calculated over outages starting at each hour of the year, of the marginal probability of surviving each hour of max_outage_duration.', size=None)),
                ('mean_cumulative_duration_survival_probability', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), help_text='The mean, calculated over outages starting at each hour of the year, of the cumulative probability of surviving up to and including each hour of max_outage_duration.', size=None)),
                ('min_cumulative_duration_survival_probability', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), help_text='The minimum, calculated over outages starting at each hour of the year, of the cumulative probability of surviving up to and including each hour of max_outage_duration.', size=None)),
                ('cumulative_outage_survival_probability', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), help_text='The probability of surviving the full max_outage_duration, for outages starting at each hour of the year.', size=None)),
                ('mean_cumulative_outage_survival_probability', models.FloatField(blank=True, help_text='The mean, calculated over outages starting at each hour of the year, of the probability of surviving the full max_outage_duration.')),
            ],
            bases=(resilience_stats.models.BaseModel, models.Model),
        ),
    ]
