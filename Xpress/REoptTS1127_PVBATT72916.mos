!    NOTES
! 1.  All energy referred to in model is RATED energy -- use ProdFactor to determine actual energy produced
      
model "REopt"
		
uses "mmxprs"   !Xpress optimizer
uses "mmetc"    ! Defines Disk Data procedure -- not used for this model
uses "mmsystem" !for timing function
uses "mmnl" 

parameters
  ! When running deployed, working directory is C:\Python27\Lib\site-packages\win32
  LocalPath = "C:\\Python27\\Lib\\site-packages\\reopt_api-1.0-py2.7.egg\\"
  DatLibraryPath = LocalPath + "Xpress\\DatLibrary\\"

  ! When running local
  !LocalPath = "C:\\Nick\\Projects\\api\\env\\src\\reopt_api"
  !DatLibraryPath = LocalPath + "\\Xpress\\DatLibrary\\"
  OUTDIR = "Output"
  OutputDir = LocalPath + OUTDIR

  FuelBinCount = 1
  DemandBinCount = 1
  BattLevelCount = 1
  TimeStepScaling = 1.0!.25!1.0 !how much actual time does each timestep represent.  For 288, it is 365 / 12
  TimeStepCount =8760!35040!8760
  Obj = 1  !1 for minimize LCC, 2 for maximize rated production, 3 for maximize production


  DAT1 = "Various\\constant.dat"
  DAT2 = "Economics\\economics.dat"

  NumRatchets = 24
  DAT3 = "LoadSize\\LoadSize_Miami_Hospital.dat"
  DAT4 = "LoadProfiles\\Load8760_raw_Miami_Hospital.dat"
  DAT5 = "GISdata\\GIS_Miami.dat"
  UtilName = "Florida Power & Light Co"
  UtilRate = "GLSDT-1_(General_Service_Large_Demand_-_Time-Of-Use)"

  DAT6 = "Various\\storage.dat"
  DAT7 = "Various\\maxsizes.dat"
  DAT8  = "Utility\\"+UtilName+"\\"+UtilRate+"\\TimeStepsDemand.dat"
  DAT9  = "Utility\\"+UtilName+"\\"+UtilRate+"\\DemandRate.dat"
  DAT10 = "Utility\\"+UtilName+"\\"+UtilRate+"\\FuelCost.dat"
  DAT11 = "Utility\\"+UtilName+"\\"+UtilRate+"\\ExportRates.dat"
  DAT12 = "Utility\\"+UtilName+"\\"+UtilRate+"\\TimeStepsDemandMonth.dat"
  DAT13 = "Utility\\"+UtilName+"\\"+UtilRate+"\\DemandRateMonth.dat"
  DAT14 = "Utility\\"+UtilName+"\\"+UtilRate+"\\LookbackMonthsAndPercent.dat"
  DAT15 = "Utility\\"+UtilName+"\\"+UtilRate+"\\UtilityTiers.dat"
  DAT16 = "Utility\\"+UtilName+"\\"+UtilRate+"\\FuelBurnRate.dat"

  DAT17 = "NMILLimits\\NMIL_HIGHLimit.dat"
  !DAT17 = "NMILLimits\\NMIL_net_metering_OFF.dat"

end-parameters



declarations

  Month = 1..12
  Ratchets = 1..NumRatchets
  FuelBin = 1..FuelBinCount
  DemandBin = 1..DemandBinCount
  BattLevel=1..BattLevelCount

  StartTime: real
  EndTime: real

  TimeStepRatchets: array(Ratchets) of set of integer  !same as above, but omits the first hour, so 2-24, 26-48....
  TimeStepRatchetsMonth: array(Ratchets) of set of integer  !same as above, but omits the first hour, so 2-24, 26-48....

  TechClass: set of string    !all Tech belong to a class:  Wind, PV, BIO, WTE, SVP SHW, LFG
  Tech: set of string
  TimeStep = 1..TimeStepCount    !8760 would be true hourly
  Load: set of string    !the load being served, electric retail / wholesale, then fuel 1...N  retail / wholesale

  AnnualElecLoad: real   !electricity used at that location for the year

  !Net Metering
  NMILRegime: set of string  !   "BelowNetMeter", "BetweenNMandIL", "AboveIL"
  NMILLimits: array ( NMILRegime) of real !the actual NML and IL numbers.  The top of the AboveIL regime is arbitrary.
  TechToNMILMapping: array (Tech, NMILRegime) of real  !1 if tech produces electric and is in the NML bin
  binNMLorIL: array (NMILRegime) of mpvar

  MaxProdIncent: array (Tech) of real  !Upper bound on incentives by technology in dollars
  ProdIncentRate: array (Tech, Load) of real     !in $/kWh, for example
  MaxSizeForProdIncent: array (Tech) of real  ! If rated system size is above this cap, there will be no production incentives
  MaxSize: array (Tech) of real  !Max system size.  Usually limited by land area, MSW/Bio available, etc
  CapCostSlope: array (Tech) of real
  ProdFactor: array (Tech,Load,TimeStep) of real  !Production Factor.  Combination of resource, efficiency, availability
  OMperUnitSize: array (Tech) of real  !O&M per unit of system size.  $10 / KW for example.
  ExportRates: array (Tech,Load,TimeStep) of real  !retail / wholesale rate for all electricity / fuels
  LoadProfile: array (Load,TimeStep) of real       !electricity / fuel load profile by TimeStep

  TurbineDerate: array (Tech) of real  !TurbineDerate * SystemSize = Actual Electricity
  TechIsGrid:  array(Tech) of real

  dvSystemSize: array (Tech) of mpvar
  dvGrid: array (Load,TimeStep,DemandBin, FuelBin) of mpvar
  dvRatedProd: dynamic array (Tech,Load,TimeStep,FuelBin) of mpvar !Rated Production at every timestep.  Multiply by ProdFactor to get actual energy.

  !Next 2 for ProductionIncentive Cap
  dvProdIncent: array (Tech) of mpvar  ! Amount in dollars of the production incentive by Tech
  binProdIncent: array (Tech) of mpvar  ! Determines if production incentive is allowed by comparing rated system size with the maximum allowable to receive production incentives

  TechToLoadMatrix: array (Tech,Load) of real          !describes which Techs can serve which loads
  TechToTechClassMatrix: array (Tech,TechClass) of real  !Mapping of Tech to TechClass

  !Can only have one tech per techclass
  binSingleBasicTech: array (Tech,TechClass) of mpvar

  dvPeakDemandE: array ( Ratchets, DemandBin) of mpvar  !Peak electric demand for the month
  dvPeakDemandEMonth: array ( Month) of mpvar  !Peak electric demand for the month

  !dvPeakDemandSummer: array (Loc) of mpvar  !Peak electric demand for the month    !uncomment for RMI
  DemandRates: array ( Ratchets, DemandBin) of real !Demand rate for the quarter
  DemandRatesMonth: array ( Month) of real !Demand rate for the quarter

  dvElecToStor: array( TimeStep) of mpvar  !Electricity going to the storage system during each timestep
  dvElecFromStor: array ( TimeStep) of mpvar  !Electricity coming from the storage system during each timestep
  dvStoredEnergy: array( 0..TimeStepCount) of mpvar  !State of charge of the storage system
  dvStorageSizeKWH: array( BattLevel) of mpvar   !Physical size of the storage system
  dvStorageSizeKW: array( BattLevel) of mpvar  !maximum amount of energy charging / discharging storage.  Basically the size of the inverter.
  dvMeanSOC:  mpvar
  binBattCharge: array( TimeStep) of mpvar
  binBattDischarge: array( TimeStep) of mpvar

  EtaStor: array(Tech,Load) of real !round trip storage efficiency
  MaxStorageSizeKWH: real !the max size of storage
  MinStorageSizeKWH: real !the min size of storage
  MaxStorageSizeKW:  real !the max size of the charge / discharge per time step, basically the inverter
  StorageCostPerKWH: array(BattLevel) of real !Storage cost per KWH
  StorageCostPerKW: array( BattLevel) of real !Storage cost per KW.  Cost of inverter.
  StorageMinChargePcent: real !Min charge on the storage device as a percent of the total

  dvFuelCost: array(Tech,FuelBin) of mpvar
  FuelRate: array( Tech,FuelBin,TimeStep) of real  !cost per unit for fuel
  FuelBurnRateM: array(Tech,Load,FuelBin) of real   !slope of the fuel rate curve

  MaxDemandInTier: array ( DemandBin) of real
  MaxUsageInTier: array ( FuelBin) of real
  binUsageTier: array ( FuelBin) of mpvar

  DemandLookbackPercent:  real
  dvPeakDemandELookback:mpvar
  DemandLookbackMonths: set of integer
  binBattLevel: array(BattLevel) of mpvar
  BattLevelCoef: array(BattLevel,1..2) of real

  pwf_e: real
  pwf_om: real
  !pwf_op: real
  !pwf_owner: real
  !pwf_offtaker: real
  LevelizationFactor: array(Tech) of real

end-declarations

!Confirm that we are in the proper directory
writeln ("REopt running from ", LocalPath)

!setparam("XPRS_MIPTOL",5e-5)   !default is 5e-5
!setparam("XPRS_MIPRELSTOP",.001)
!setparam("XPRS_MAXTIME",180)


initializations from DatLibraryPath+DAT1 ! constants
	Tech
	Load
	TechIsGrid
	TechToLoadMatrix
	TechClass
	NMILRegime
	TechToNMILMapping
	TurbineDerate
	TechToTechClassMatrix
end-initializations

initializations from DatLibraryPath+DAT2 ! economics
	!pwf_owner
	!pwf_offtaker
	pwf_om
	pwf_e
	!pwf_op
	LevelizationFactor
	StorageCostPerKW
	StorageCostPerKWH
	OMperUnitSize
	CapCostSlope
	ProdIncentRate
	MaxProdIncent
	MaxSizeForProdIncent
end-initializations

initializations from DatLibraryPath+DAT3
	AnnualElecLoad
end-initializations

initializations from DatLibraryPath+DAT4
	LoadProfile
end-initializations

initializations from DatLibraryPath+DAT5 ! GIS
	ProdFactor
end-initializations

initializations from DatLibraryPath+DAT6 ! storage
	MinStorageSizeKWH
	StorageMinChargePcent
	EtaStor
	BattLevelCoef
end-initializations

initializations from DatLibraryPath+DAT7 ! maxsizes
	MaxSize
	MaxStorageSizeKW
	MaxStorageSizeKWH
end-initializations

initializations from DatLibraryPath+DAT8
	TimeStepRatchets
end-initializations
initializations from DatLibraryPath+DAT9
	DemandRates
end-initializations
initializations from DatLibraryPath+DAT10
	FuelRate
end-initializations
initializations from DatLibraryPath+DAT11
	ExportRates
end-initializations

initializations from DatLibraryPath+DAT12
	TimeStepRatchetsMonth
end-initializations
initializations from DatLibraryPath+DAT13
	DemandRatesMonth
end-initializations
initializations from DatLibraryPath+DAT14 ! LookbackMonthsAndPercent
	DemandLookbackMonths
	DemandLookbackPercent
end-initializations
initializations from DatLibraryPath+DAT15 ! UtilityTiers
	MaxDemandInTier
	MaxUsageInTier
end-initializations
initializations from DatLibraryPath+DAT16
	FuelBurnRateM
end-initializations

initializations from DatLibraryPath+DAT17
	NMILLimits
end-initializations



!Start timing
StartTime:= gettime

!"exist" formatting
forall (t in Tech,LD in Load,ts in TimeStep, fb in FuelBin | MaxSize(t)* LoadProfile(LD,ts) *  TechToLoadMatrix(t, LD) <> 0)  !* ceil( max(Loc, TimeStep) ProdFactor (t,LD,ts))
	create (dvRatedProd (t,LD,ts,fb))

!!!! Fuel tracking
!FuelUsed * FuelRate = FuelCost.  However since FuelRate can vary by timestep, cannot just use dvFuelUsed
forall (t in Tech, fb in FuelBin ) do
     sum (ts in TimeStep, LD in Load |exists (dvRatedProd (t,LD,ts,fb)))
     	ProdFactor(t, LD, ts) * LevelizationFactor(t) *  dvRatedProd (t,LD,ts,fb) * FuelBurnRateM(t,LD,fb) * TimeStepScaling * FuelRate(t,fb,ts) * pwf_e = dvFuelCost(t,fb)
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!the state of the storage system at the beginning is 0

	! boundary condition.  State of charge must begin and end the same.
	dvStoredEnergy(0) = StorageMinChargePcent * sum(b in BattLevel) dvStorageSizeKWH(b) / TimeStepScaling !SOCt0(l) !dvStoredEnergy(TimeStepCount)
	!next to lines set the SOC of the battery at time of GridOutage
	sum(b in BattLevel) dvStorageSizeKWH(b) <=  MaxStorageSizeKWH
	sum(b in BattLevel) dvStorageSizeKWH(b) >=  MinStorageSizeKWH
	sum(b in BattLevel) dvStorageSizeKW(b) <=  MaxStorageSizeKW  !


forall ( ts in TimeStep) do
	! Electricity to be stored is the sum of the electricity in the S-bin for that timestep
	dvElecToStor( ts) = (sum(t in Tech,  fb in FuelBin | exists (dvRatedProd(t,"1S",ts,fb))) ProdFactor(t,"1S",ts) * LevelizationFactor(t) * dvRatedProd (t,"1S",ts,fb) * EtaStor(t,"1S"))
	! state of charge at each timestep is sum of previous state and electiricy coming in, and less electricity going out
	dvStoredEnergy(ts) =   dvStoredEnergy(ts-1) +  dvElecToStor( ts) - dvElecFromStor(ts)
	! energy coming out of the storage system cannot be greater than the current state of charge
	dvElecFromStor( ts) <=  dvStoredEnergy(ts-1 )
	! the state of charge always has to be greater than 0
	dvStoredEnergy(ts) >=  StorageMinChargePcent * sum(b in BattLevel) dvStorageSizeKWH(b) / TimeStepScaling  ! / TimeStepScaling
	dvElecFromStor( ts) >= 0
end-do

forall ( ts in TimeStep )  do
	sum(b in BattLevel) dvStorageSizeKW(b) >=  dvElecToStor( ts)
	sum(b in BattLevel) dvStorageSizeKW(b) >=  dvElecFromStor( ts)
end-do

dvMeanSOC = sum(ts in TimeStep) dvStoredEnergy(ts) / TimeStepCount

! the physical size of the storage system is the max amount of charge at any timestep.
forall (  ts in TimeStep) do
	sum(b in BattLevel) dvStorageSizeKWH(b) >=  dvStoredEnergy(ts) * TimeStepScaling
end-do

!Prevent storage from charging and discharging within same timestep
forall ( ts in TimeStep) do
  dvElecToStor(ts) <= MaxStorageSizeKW * binBattCharge(ts)
  dvElecFromStor(ts) <= MaxStorageSizeKW * binBattDischarge(ts)
  binBattDischarge(ts) + binBattCharge(ts) <= 1
  binBattCharge (ts) is_binary
  binBattDischarge (ts) is_binary
end-do

forall ( t in Tech) do
	ElecToBatt(t) := sum(ts in TimeStep,  fb in FuelBin) dvRatedProd(t,"1S",ts,fb) * ProdFactor(t,"1S",ts) * LevelizationFactor(t)
end-do

forall ( b in BattLevel) do
	BattLevelCoef(b,1)*sum(t in Tech | TechIsGrid(t)=1) ElecToBatt(t)-sum(t in Tech | TechIsGrid(t)<>1)BattLevelCoef(b,2)*ElecToBatt(t)   <= (1-binBattLevel(b)) *MaxStorageSizeKWH/TimeStepScaling*365*2  !assume that the maximum size battery can make 2 complete cycles per day.  May need to bump this up in select situations
	binBattLevel(b) is_binary
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This section is declaring binary variables and constraining them
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!CONSTRAINT 3
! can only hve one tech from each tech class
forall ( b in TechClass) do
   sum (t in Tech) binSingleBasicTech (t,b) <= 1
end-do

!binary declarations
forall ( t in Tech, b in TechClass) binSingleBasicTech (t,b) is_binary

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! End declaring binary variables and constraining them
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

forall (b in BattLevel) do
   dvStorageSizeKWH(b) <= MaxStorageSizeKWH* binBattLevel(b)
   dvStorageSizeKW(b) <= MaxStorageSizeKW* binBattLevel(b)
end-do

sum(b in BattLevel) binBattLevel(b) = 1

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! End CapCost constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!  Production Incentive Cap Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

forall (t in Tech) binProdIncent (t) is_binary

!CONSTRAINT 22
! Number 1: The Production Incentive can't exceed a certain dollar max (and is "0" if system size is too big)
forall (t in Tech) dvProdIncent (t) <= binProdIncent (t) * MaxProdIncent (t)

!CONSTRAINT 23
! Number 2: Calculate the production incentive based on the energy produced.  Then dvProdIncent must be less than that.
! added LD to Prod Incent ExportRates 8912
forall (t in Tech) do
     dvProdIncent (t) <= sum (LD in Load, ts in TimeStep,  fb in FuelBin |exists (dvRatedProd (t,LD,ts,fb)))
     	ProdFactor(t, LD, ts) * LevelizationFactor(t) *  dvRatedProd (t,LD,ts,fb) * TimeStepScaling * ProdIncentRate (t, LD)
end-do

!CONSTRAINT 24
! Number 3: If system size is bigger than MaxSizeForProdIncent, binProdIncent is 0, meaning you don't get the Prod Incent.
!TS 31513 Replaced BigNumberSystemSize with MaxSize
forall (t in Tech,LD in Load,ts in TimeStep  ) do
    dvSystemSize (t) <= MaxSizeForProdIncent (t) + MaxSize(t) * (1 - binProdIncent (t))
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!  End Production Incentive Cap Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This section defining system size and production constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 !!System size cannot exceed MaxSize
 !CONSTRAINT 27
forall (t in Tech)   dvSystemSize (t) <=  MaxSize (t)

 !!dvRatedProduction must be greater than 0
 !CONSTRAINT 27a
forall (t in Tech, LD in Load, ts in TimeStep,  fb in FuelBin )   dvRatedProd(t,LD,ts,fb) >=0


!Per conversation with DC 7 6 12, changed below line to following 2 lines to capture size limit constraint based only on
! electric output of a CoGen with mandatory thermal tech
!For most techs, Rated Production across all loads cannot exceed System size
!CONSTRAINT 33A
forall (t in Tech,ts in TimeStep)  !for variable effiency gensets
	 sum (LD in Load, fb in FuelBin |exists (dvRatedProd (t,LD,ts,fb))) dvRatedProd (t,LD,ts,fb) <= dvSystemSize (t)

!CONSTRAINT 35
! sum of everything but retail electric produced by all techs must be less than max load for each fuel type
!TS 31513 should this exclude SHW?
forall (LD in Load,ts in TimeStep | LD <> "1R" and LD <>"1S") do
  sum (t in Tech, fb in FuelBin |exists (dvRatedProd (t,LD,ts,fb)))
  		 ProdFactor (t,LD,ts) * LevelizationFactor(t) * dvRatedProd (t,LD,ts,fb) <= LoadProfile (LD,ts)
end-do

!CONSTRAINT 38
!companion to the above.  Electric load can be met from generation OR from the storage
forall (LD in Load,ts in TimeStep  | LD = "1R") do
  sum (t in Tech, fb in FuelBin |exists (dvRatedProd (t,LD,ts,fb)) ) dvRatedProd (t,LD,ts,fb) * ProdFactor (t,LD,ts) * LevelizationFactor(t) + dvElecFromStor( ts) >=
  		  LoadProfile (LD,ts)
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! End system size and production constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!  Net Meter Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 forall ( n in NMILRegime) binNMLorIL(n) is_binary

 !can only be in regime at a time.
 !CONSTRAINT 43
sum (n in NMILRegime) binNMLorIL(n) = 1

! The sum of the electricity output of all techs must be less than the limit for the regime
!CONSTRAINT 44
forall (n in NMILRegime) do
      sum (t in Tech)
      		TechToNMILMapping (t,n)*TurbineDerate(t)*dvSystemSize(t) <= NMILLimits(n) * binNMLorIL(n)
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!  Demand Rate Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

forall ( LD in Load, fb in FuelBin, ts in TimeStep) do
	dvRatedProd("UTIL1",LD,ts,fb) = sum(db in DemandBin) dvGrid(LD,ts,db,fb)
end-do

forall ( db in DemandBin, ts in TimeStep) do
	sum(LD in Load, fb in FuelBin) dvGrid(LD,ts,db,fb) <= MaxDemandInTier(db)
end-do

forall ( fb in FuelBin) do
	binUsageTier(fb) is_binary
end-do

forall ( fb in FuelBin) do
	UsageInTier(fb) := sum(LD in Load, db in DemandBin,ts in TimeStep) dvGrid(LD,ts,db,fb) !<= MaxUsageInTier(fb)
end-do

forall ( fb in FuelBin) do
	UsageInTier(fb) <= binUsageTier(fb) * MaxUsageInTier(fb)
end-do

forall ( fb in FuelBin | fb >= 2) do
	binUsageTier(fb) - binUsageTier(fb-1) <= 0
	binUsageTier(fb)*MaxUsageInTier(fb-1) - UsageInTier(fb-1) <= 0
end-do

forall ( db in DemandBin, r in Ratchets, ts in TimeStepRatchets(r))  do
	dvPeakDemandE(r,db) >= sum(LD in Load, fb in FuelBin) dvGrid(LD,ts,db,fb)
   	dvPeakDemandE(r,db) >= 0
   	dvPeakDemandE(r,db) >= DemandLookbackPercent * dvPeakDemandELookback
end-do

forall ( m in Month, ts in TimeStepRatchetsMonth(m))  do
	dvPeakDemandEMonth( m) >=  sum(LD in Load, db in DemandBin, fb in FuelBin) dvGrid(LD,ts,db,fb)
   	dvPeakDemandEMonth( m) >= 0
end-do

! find the peak demand of the lookback months (lbm)
forall ( LD in Load, lbm in DemandLookbackMonths)  do
	dvPeakDemandELookback >= dvPeakDemandEMonth(lbm)
end-do

!! 1/2/13  TS  Sum of Electric R and W must be less than the Site Load for the year.
!! Once site load is met, excess electricity goes into X bin with lower sellback rate
!!4313 TS.  Adding elec penalty to annual site load
!!41513 TS.  Excluding Grid.

   (sum (t in Tech, LD in Load, ts in TimeStep, fb in FuelBin | exists (dvRatedProd(t,LD,ts,fb)) and (LD="1R" or LD="1W") and TechIsGrid(t) = 0)
 		dvRatedProd (t,LD,ts,fb)*ProdFactor(t, LD, ts) * LevelizationFactor(t) *  TimeStepScaling) <=  AnnualElecLoad
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!  End Electric Net Zero Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Added 8912, modified 81012 by TS
! Can only have one tech from each tech class
!31513 TS Replaced BigNumber with MaxSize
!CONSTRAINT 46
forall (t in Tech,  b in TechClass) do
   dvSystemSize (t) * TechToTechClassMatrix(t,b) <= binSingleBasicTech (t,b) * MaxSize(t)
end-do

!Curtailment 91212 added by TS written by Helwig.  Corrected by TS 91612.
!This prevents PV and wind from 'turning down'.  They always produce at max.
!CONSTRAINT 47
forall ( t in Tech, ts in TimeStep | TechToTechClassMatrix(t, "PV") = 1 ) do
	sum (fb in FuelBin, LD in Load |exists (dvRatedProd (t,LD,ts,fb)) and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S"))
		dvRatedProd (t,LD,ts,fb) =  dvSystemSize (t)
end-do

TotalDemandCharges := sum( r in Ratchets, db in DemandBin) dvPeakDemandE( r, db) * DemandRates(r,db) * pwf_e +
  sum( m in Month) dvPeakDemandEMonth( m) * DemandRatesMonth( m)

! For Sunlamp (S&S only), TotElecRatedProd is redundant with PV system size
!TotElecRatedProd := sum( t in Tech | TechToTechClassMatrix (t, "PV") = 1) dvSystemSize (t) * TurbineDerate(t)
TotElecProd := sum( t in Tech,  fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "PV") = 1 and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S"))) dvRatedProd (t,LD,ts,fb)*ProdFactor(t, LD, ts) * LevelizationFactor(t) *  TimeStepScaling

TotCapCosts := sum(t in Tech,  fb in FuelBin) (CapCostSlope(t) * dvSystemSize(t))

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! OBJECTIVE FUNCTION VALUE

!Capital Costs
RECosts := sum(t in Tech) CapCostSlope(t) * dvSystemSize(t)+

 !O&M Costs on a per energy produced basis of all techs except BiomassOnly and increased electrical load to due SHW electrical
(sum (t in Tech,LD in Load,ts in TimeStep, fb in FuelBin | exists (dvRatedProd(t,LD,ts,fb)))
	dvRatedProd (t,LD,ts,fb)* TimeStepScaling *ProdFactor(t, LD, ts) * LevelizationFactor(t) *   ExportRates(t,LD,ts)) * pwf_e +

!Demand Rates
 !sum( m in Month) dvPeakDemandE( m) * DemandRates( m) * pwf_e +
 sum( r in Ratchets, db in DemandBin) dvPeakDemandE( r, db) * DemandRates( r, db) * pwf_e + sum( m in Month) dvPeakDemandEMonth(m)*DemandRatesMonth(m)+

!Cost of batteries
sum( b in BattLevel) dvStorageSizeKWH(b) * StorageCostPerKWH(b) +
	sum( b in BattLevel) dvStorageSizeKW(b) *  StorageCostPerKW(b) +

!O&M cost based on system size
sum(t in Tech) OMperUnitSize(t) * pwf_om * dvSystemSize(t) -

! Production Incentives
sum(t in Tech ) dvProdIncent (t) +

sum( t in Tech, fb in FuelBin) dvFuelCost(t,fb)


!! END OBJECTIVE FUNCTION VALUE
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!  Objectives   -- chose only 1, and comment the others
!!!  1.  Minimize LCC
!!!  2.  Maximize rated electric production project size
!!!  3.  Maximzie electric production project size

if Obj = 1 then
	! to minimize RE LCC, uncomment this line  (and comment others)
	minimize (RECosts)
elif Obj = 5 then
	! Keep SOC high
	minimize (RECosts - 1*dvMeanSOC)
end-if

!End timing
EndTime:= gettime


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!  Output Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!***************** Writing to Terminal ************************************
writeln ("****************************** Results *******************************")
writeln ( "Optimization time = ", EndTime-StartTime, " seconds")
writeln ( "Load = ", DAT4)
writeln ( "utility = ",UtilName)
writeln ( "rate = ",UtilRate)
writeln ( "LCC = ", getsol(RECosts))
!writeln ("TotElecRatedProdKW = ", getsol(TotElecRatedProd) )
writeln ("TotElecProdKWH = ", getsol(TotElecProd) )
writeln ( "Bulk kWh costs = ", getsol(sum( t in Tech, fb in FuelBin) dvFuelCost(t,fb)))
writeln ( "Total Demand costs = ", getsol(TotalDemandCharges))

!PV output
forall  (t in Tech | TechIsGrid(t)=0)  do
   writeln (t," = ", getsol (dvSystemSize(t)*TurbineDerate(t)))
end-do

!Battery output
writeln ( "BattSize= ", sum(b in BattLevel) getsol (dvStorageSizeKWH(b)))
writeln ( "Batt size KW (inverter)= ", sum(b in BattLevel) getsol (dvStorageSizeKW(b)))

!CapCost plus LFG pipeline cost output
writeln ( "Cap Costs = ",
    sum(t in Tech) CapCostSlope (t) * getsol(dvSystemSize(t)) +
	sum(b in BattLevel) getsol(dvStorageSizeKWH(b)) * StorageCostPerKWH(b) +
	sum(b in BattLevel) getsol(dvStorageSizeKW(b)) *  StorageCostPerKW(b) )

!Prod incent output
   !writeln ( " Total Prod Incent = ", sum (t in Tech) getsol (dvProdIncent(t)))

!demand output
!writeln ("r fb")
!forall  ( r in Ratchets, db in DemandBin)  do
!   writeln ( " ", r, " ", db,  " PeakDeamand = ", getsol(dvPeakDemandE(r,db)))
!end-do

!forall  ( m in Month)  do
!   writeln ( " ", m,  " Month Peak = ", getsol(dvPeakDemandEMonth(m)))
!end-do

writeln ("****************************** End Results *******************************")


!************************** Writing to files ************************************

!Time series demand output
forall ( ts in TimeStep )     do
	Demand(ts) := LoadProfile("1R",ts) + sum(t in Tech,  fb in FuelBin | t = "UTIL1") (dvRatedProd (t,"1S",ts,fb)*ProdFactor(t,"1S",ts)) * LevelizationFactor(t) - 1*
   				(sum(t in Tech,  fb in FuelBin | t <> "UTIL1") (dvRatedProd (t,"1R",ts,fb)*ProdFactor(t,"1R",ts)) * LevelizationFactor(t) + dvElecFromStor( ts))
end-do
fopen(OutputDir + "\\DemandHourly.csv",F_OUTPUT)
forall ( ts in TimeStep )     do
	writeln(getsol(Demand(ts)))
end-do
fclose(F_OUTPUT)

! Summary
fopen(OutputDir + "\\summary.csv",F_OUTPUT)
writeln ("LCC,", getsol(RECosts))
writeln ("Cap_Cost,",
    sum(t in Tech) CapCostSlope (t) * getsol(dvSystemSize(t)) +
	sum(b in BattLevel) getsol(dvStorageSizeKWH(b)) * StorageCostPerKWH(b) +
	sum(b in BattLevel) getsol(dvStorageSizeKW(b)) *  StorageCostPerKW(b) )
writeln ("Bulk_kWh_costs,", getsol(sum( t in Tech, fb in FuelBin) dvFuelCost(t,fb)))
writeln ("Total_Demand_cost,", getsol(TotalDemandCharges))
forall  (b in BattLevel)  do
   writeln ("BattSize_kWh, ", getsol (dvStorageSizeKWH(b)))
end-do
forall  (b in BattLevel)  do
   writeln ("BattInverter_kW,", getsol (dvStorageSizeKW(b)))
end-do
forall (t in Tech | TechIsGrid(t)=0)  do
	writeln (t, "size_kW,", getsol (dvSystemSize(t)))
end-do
writeln ("Utility_kWh, ", strfmt(getsol (sum(ts in TimeStep) Demand(ts)), 10, 4))
writeln ("utility,",UtilName)
writeln ("rate,",UtilRate)
writeln("Optimization_time_seconds,", EndTime-StartTime)

writeln ("Year1EnergyCost,",getsol(sum( t in Tech, fb in FuelBin) dvFuelCost(t,fb)) / pwf_e)
writeln ("Year1DemandCost,",getsol(TotalDemandCharges) / pwf_e)

fclose(F_OUTPUT)

fopen(OutputDir + "\\dat_files.csv", F_OUTPUT)
writeln (DAT1, ",")
writeln (DAT2, ",")
writeln (DAT3, ",")
writeln (DAT4, ",")
writeln (DAT5, ",")
writeln (DAT6, ",")
writeln (DAT7, ",")
writeln (DAT17, ",")

fclose(F_OUTPUT)


!******************
!Time series dispatch output
fopen(OutputDir + "\\DispatchHourly.csv",F_OUTPUT)
forall (t in Tech,LD in Load, ts in TimeStep, fb in FuelBin )     do
   writeln ( t,",", LD, "," ,ts ,",",    getsol (dvRatedProd (t,LD,ts,fb)))
end-do
fclose(F_OUTPUT)

!Time series dispatch output
fopen(OutputDir + "\\ElecToStore.csv",F_OUTPUT)
forall (ts in TimeStep )     do
   writeln (     getsol (dvElecToStor (ts)))
end-do
fclose(F_OUTPUT)

!Time series dispatch output
fopen(OutputDir + "\\ElecFromStore.csv",F_OUTPUT)
forall (ts in TimeStep )     do
   writeln (    getsol (dvElecFromStor (ts)))
end-do
fclose(F_OUTPUT)

!Time series dispatch output
fopen(OutputDir + "\\StoredEnergy.csv",F_OUTPUT)
forall (ts in TimeStep )     do
   writeln (   getsol (dvStoredEnergy (ts)))
end-do
fclose(F_OUTPUT)

!demand output
fopen(OutputDir + "\\DemandPeaks.csv",F_OUTPUT)
writeln ("Ratchet,DemandTier,PeakDemand")
forall  ( r in Ratchets, db in DemandBin)  do
   writeln (r, ",", db, ",", getsol(dvPeakDemandE(r,db)),",")
end-do
writeln(",")
writeln("Month,Peak_Demand")
forall  ( m in Month)  do
   writeln (m, ",", getsol(dvPeakDemandEMonth(m)),",")
end-do
fclose(F_OUTPUT)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!  End Output Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


end-model