!    NOTES
! 1.  All energy referred to in model is RATED energy -- use ProdFactor to determine actual energy produced
      
model "REopt"
		
uses "mmxprs"   !Xpress optimizer
uses "mmetc"    ! Defines Disk Data procedure -- not used for this model
uses "mmsystem" !for timing function
uses "mmnl"
uses "mmxml"    ! for JSON output

parameters

  ScenarioNum = "1f444af0-3651-4085-bdc9-a75bec564bf2"
  ScenarioPath = "C:\\Users\\SMISHRA\\Documents\\VirtualBoxShare\\REopt_debugging\\Run1f444af0-3651-4085-bdc9-a75bec564bf2\\Inputs"
  OutputDir = "C:\\Users\\SMISHRA\\Documents\\VirtualBoxShare\\REopt_debugging\\Run1f444af0-3651-4085-bdc9-a75bec564bf2\\Outputs"
  BaseString = ""

  CapCostSegCount = 2
  FuelBinCount = 1
  DemandBinCount = 1
  DemandMonthsBinCount = 1
  TimeStepScaling = 1.0 !.25! !how much actual time does each timestep represent.
  TimeStepCount =8760 !35040
  Obj = 5  !1 for minimize LCC, 5 for min LCC AND high mean SOC
  REoptTol = 5e-5

  ! Utility info
  NumRatchets = 20

  DAT1 = ScenarioPath + "/constant_" + ScenarioNum + ".dat"
  DAT2 = ScenarioPath + "/economics_" + ScenarioNum + ".dat"
  DAT3 = ScenarioPath + "/LoadSize_" + ScenarioNum + ".dat"
  DAT4 = ScenarioPath + "/Load8760_" + ScenarioNum + ".dat"
  DAT5 = ScenarioPath + "/GIS_" + ScenarioNum + ".dat"
  DAT6 = ScenarioPath + "/storage_" + ScenarioNum + ".dat"   ! Default dat file has empty arrays
  DAT7 = ScenarioPath + "/maxsizes_" + ScenarioNum + ".dat"
  DAT8  = ScenarioPath + "/Utility/TimeStepsDemand.dat"
  DAT9  = ScenarioPath + "/Utility/DemandRate.dat"
  DAT10 = ScenarioPath + "/Utility/FuelCost" + BaseString + ".dat"
  DAT11 = ScenarioPath + "/Utility/ExportRates" + BaseString + ".dat"
  DAT12 = ScenarioPath + "/Utility/TimeStepsDemandMonth.dat"
  DAT13 = ScenarioPath + "/Utility/DemandRateMonth.dat"
  DAT14 = ScenarioPath + "/Utility/LookbackMonthsAndPercent.dat"
  DAT15 = ScenarioPath + "/Utility/UtilityTiers.dat"
  DAT16 = ScenarioPath + "/Utility/FuelBurnRate" + BaseString + ".dat"
  DAT17 = ScenarioPath + "/NMIL_" + ScenarioNum + ".dat"

end-parameters

declarations

  status: string

  Seg = 1..CapCostSegCount
  Points = 0..CapCostSegCount
  Month = 1..12
  Ratchets = 1..NumRatchets
  FuelBin = 1..FuelBinCount
  DemandBin = 1..DemandBinCount
  DemandMonthsBin = 1..DemandMonthsBinCount

  StartTime: real
  EndTime: real

  TimeStepRatchets: array(Ratchets) of set of integer  !same as above, but omits the first hour, so 2-24, 26-48....
  TimeStepRatchetsMonth: array(Month) of set of integer  !time steps in each month

  TechClass: set of string    !all Tech belong to a class:  Wind, PV, BIO, WTE, SVP SHW, LFG
  Tech: set of string
  TimeStep = 1..TimeStepCount    !8760 would be true hourly
  Load: set of string    !the load being served, electric retail / wholesale, then fuel 1...N  retail / wholesale

  AnnualElecLoad: real   !electricity used at that location for the year

  !Net Metering
  NMILRegime: set of string  !   "BelowNetMeter", "BetweenNMandIL", "AboveIL"
  NMILLimits: array ( NMILRegime) of real !the actual NML and IL numbers.  The top of the AboveIL regime is arbitrary.
  TechToNMILMapping: array (Tech, NMILRegime) of real  !1 if tech produces electric and is in the NML bin
  binNMLorIL: array (NMILRegime) of mpvar

  MaxProdIncent: array (Tech) of real  !Upper bound on incentives by technology in dollars
  ProdIncentRate: array (Tech, Load) of real     !in $/kWh, for example

  TechClassMinSize: array(TechClass) of real
  MaxSizeForProdIncent: array (Tech) of real  ! If rated system size is above this cap, there will be no production incentives
  MaxSize: array (Tech) of real  !Max system size.  Usually limited by land area, MSW/Bio available, etc
  CapCostSlope: array (Tech, Seg) of real
  CapCostYInt: array (Tech, Seg) of real
  CapCostX: array (Tech, Points) of real
  ProdFactor: array (Tech,Load,TimeStep) of real  !Production Factor.  Combination of resource, efficiency, availability
  OMperUnitSize: array (Tech) of real  !O&M per unit of system size.  $10 / KW for example.
  OMcostPerUnitProd: array (Tech) of real  !O&M per unit of energy produced
  ExportRates: array (Tech,Load,TimeStep) of real  !retail / wholesale rate for all electricity / fuels
  LoadProfile: array (Load,TimeStep) of real       !electricity / fuel load profile by TimeStep

  TurbineDerate: array (Tech) of real  !TurbineDerate * SystemSize = Actual Electricity
  TechIsGrid:  array(Tech) of real

  binSegChosen: array (Tech, Seg) of mpvar ! for the appropriate segment of the cost curve
  dvSystemSize: array (Tech, Seg) of mpvar
  dvGrid: array(Load, TimeStep, DemandBin, FuelBin, DemandMonthsBin) of mpvar
  dvRatedProd: dynamic array (Tech,Load,TimeStep,Seg,FuelBin) of mpvar !Rated Production at every timestep.  Multiply by ProdFactor to get actual energy.

  !Next 2 for ProductionIncentive Cap
  dvProdIncent: array (Tech) of mpvar  ! Amount in dollars of the production incentive by Tech
  binProdIncent: array (Tech) of mpvar  ! Determines if production incentive is allowed by comparing rated system size with the maximum allowable to receive production incentives

  TechToLoadMatrix: array (Tech,Load) of real          !describes which Techs can serve which loads
  TechToTechClassMatrix: array (Tech,TechClass) of real  !Mapping of Tech to TechClass

  !Can only have one tech per techclass
  binSingleBasicTech: array (Tech,TechClass) of mpvar

  dvPeakDemandE: array ( Ratchets, DemandBin) of mpvar  !Peak electric demand for the month
  dvPeakDemandEMonth: array ( Month, DemandMonthsBin) of mpvar  !Peak electric demand for the month

  DemandRates: array ( Ratchets, DemandBin) of real !Demand rate for the quarter
  DemandRatesMonth: array ( Month, DemandMonthsBin) of real !Demand rate for the quarter

  dvElecToStor: array( TimeStep) of mpvar  !Electricity going to the storage system during each timestep
  dvElecFromStor: array ( TimeStep) of mpvar  !Electricity coming from the storage system during each timestep
  dvStoredEnergy: array( 0..TimeStepCount) of mpvar  !State of charge of the storage system
  dvStorageSizeKWH: mpvar   !Physical size of the storage system
  dvStorageSizeKW: mpvar  !maximum amount of energy charging / discharging storage.  Basically the size of the inverter.
  dvMeanSOC:  mpvar
  binBattCharge: array( TimeStep) of mpvar
  binBattDischarge: array( TimeStep) of mpvar

  EtaStorIn: array(Tech,Load) of real !round trip storage efficiency
  EtaStorOut: array(Load) of real !round trip storage efficiency
  MaxStorageSizeKWH: real !the max size of storage
  MinStorageSizeKWH: real !the min size of storage
  MaxStorageSizeKW:  real !the max size of the charge / discharge per time step, basically the inverter
  MinStorageSizeKW: real
  StorageCostPerKWH: real !Storage cost per KWH
  StorageCostPerKW: real !Storage cost per KW.  Cost of inverter.
  StorageMinChargePcent: real !Min charge on the storage device as a percent of the total
  InitSOC: real  ! initial state of charge of battery

  dvFuelCost: array(Tech,FuelBin) of mpvar
  dvFuelUsed: array(Tech,FuelBin) of mpvar	 !fuel consumed by tech, only used to enforce FuelAvail constraint
  FuelRate: array(Tech, FuelBin, TimeStep) of real  !cost per unit for fuel
  FuelBurnRateM: array(Tech,Load,FuelBin) of real   !slope of the fuel rate curve
  FuelBurnRateB: array(Tech,Load,FuelBin) of real   !Y-int of the fuel rate curve
  FuelAvail: array(Tech,FuelBin) of real
  MinTurndown: array(Tech) of real	! 0.3 would mean that a tech can only turn down to 30% of dvSystemSize
  binTechIsOnInTS: array(Tech,TimeStep) of mpvar  ! binary that is 1 if tech is operating during a timestep, 0 otherwise

  FixedMonthlyCharge: real ! utility rate fixed monthly charge
  AnnualMinCharge: real ! utility min annual charge
  MonthlyMinCharge: real ! utility min monthly charge
  MinChargeAdder: mpvar

  MaxDemandInTier: array ( DemandBin) of real
  MaxDemandMonthsInTier: array ( DemandMonthsBin) of real
  MaxUsageInTier: array ( FuelBin) of real

  binDemandTier: array ( Ratchets, DemandBin) of mpvar
  binDemandMonthsTier: array (Month, DemandMonthsBin) of mpvar
  binUsageTier: array (Month, FuelBin) of mpvar

  DemandLookbackPercent:  real
  dvPeakDemandELookback: mpvar
  DemandLookbackMonths: set of integer

  analysis_years: integer

  pwf_e: real
  pwf_om: real
  pwf_prod_incent: array(Tech) of real

  !pwf_op: real
  !pwf_owner: real
  !pwf_offtaker: real

  LevelizationFactor: array(Tech) of real
  LevelizationFactorProdIncent: array(Tech) of real

  r_tax_owner: real
  r_tax_offtaker: real
  two_party_factor: real

  out_json:   xmldoc        ! XML document
  Root, Node: integer       ! XML nodes

end-declarations

! Set up verbose reporting for debugging
! setparam("XPRS_VERBOSE", true)
! setparam("XPRS_LOADNAMES", true)

! This option sets the tolerance of the integer solution
! setparam("XPRS_MIPTOL", 1e-2)   !default is 5e-5

! This option only allows the problem to parallelize onto 2 cores
setparam("XPRS_MIPTHREADS", 2)

! This option limits the system memory for storing branch and bound search tree, default is to let Xpress calculate
 setparam("XPRS_TREEMEMORYLIMIT", 0) ! Change to non-zero number of MB if desired to override default

!setparam("XPRS_MIPRELSTOP",.001)
!setparam("XPRS_MAXTIME",180)

!!! NOTE: any arguments that are used to dimension others must be within an initilization clause before
!!! the arguments that depend on them are initialized (such as NMILRegime).

initializations from DAT1 ! constants
	Tech
	Load
	TechIsGrid
	TechToLoadMatrix
	TechClass
	TurbineDerate
	TechToTechClassMatrix
	NMILRegime
end-initializations

initializations from DAT2 ! economics
	!pwf_owner
	!pwf_offtaker
	r_tax_owner
	r_tax_offtaker
	pwf_om
	pwf_e
	pwf_prod_incent
	!pwf_op
	LevelizationFactor
	LevelizationFactorProdIncent
	StorageCostPerKW
	StorageCostPerKWH
	OMperUnitSize
	OMcostPerUnitProd
	CapCostSlope
	CapCostYInt
    CapCostX
	ProdIncentRate
	MaxProdIncent
	MaxSizeForProdIncent
	two_party_factor
	analysis_years
end-initializations

initializations from DAT3
	AnnualElecLoad
end-initializations

initializations from DAT4
	LoadProfile
end-initializations

initializations from DAT5 ! GIS
	ProdFactor
end-initializations

initializations from DAT6 ! storage <--NEED A BAU VERSION WITH EMPTY PARAMS?
	StorageMinChargePcent
	EtaStorIn
	EtaStorOut
	InitSOC
end-initializations

initializations from DAT7 ! maxsizes
	MaxSize
	MinStorageSizeKW
	MaxStorageSizeKW
	MinStorageSizeKWH
	MaxStorageSizeKWH
	TechClassMinSize
	MinTurndown
end-initializations

initializations from DAT8
	TimeStepRatchets
end-initializations

initializations from DAT9
	DemandRates
end-initializations

initializations from DAT10 ! FuelCost
	FuelRate
	FuelAvail
	FixedMonthlyCharge
	AnnualMinCharge
	MonthlyMinCharge
end-initializations

initializations from DAT11
	ExportRates
end-initializations

initializations from DAT12
	TimeStepRatchetsMonth
end-initializations

initializations from DAT13
	DemandRatesMonth
end-initializations

initializations from DAT14 ! LookbackMonthsAndPercent
	DemandLookbackMonths
	DemandLookbackPercent
end-initializations

initializations from DAT15 ! UtilityTiers
	MaxDemandInTier
	MaxDemandMonthsInTier
	MaxUsageInTier
end-initializations

initializations from DAT16
	FuelBurnRateM
	FuelBurnRateB
end-initializations

initializations from DAT17  ! net metering
	NMILLimits
	TechToNMILMapping
end-initializations


!Start timing
StartTime:= gettime

!"exist" formatting
forall (t in Tech,LD in Load,ts in TimeStep, s in Seg, fb in FuelBin | MaxSize(t)* LoadProfile(LD,ts) *  TechToLoadMatrix(t, LD) <> 0)  !* ceil( max(Loc, TimeStep) ProdFactor (t,LD,ts))
	create (dvRatedProd (t,LD,ts,s,fb))

!!!! Fuel tracking
! Define dvFuelUsed by each tech by summing over timesteps.  Constrain it to be less than FuelAvail.
forall (t in Tech, fb in FuelBin) do
     sum (ts in TimeStep, LD in Load, s in Seg |exists (dvRatedProd (t,LD,ts,s,fb)))
     	ProdFactor(t,LD,ts) * LevelizationFactor(t) * dvRatedProd (t,LD,ts,s,fb) * FuelBurnRateM(t,LD,fb) * TimeStepScaling  +
     sum(ts in TimeStep, LD in Load)
     	binTechIsOnInTS(t,ts) * FuelBurnRateB(t,LD,fb) * TimeStepScaling = dvFuelUsed(t,fb)

	dvFuelUsed(t,fb) <= FuelAvail(t,fb)
end-do

! FuelUsed * FuelRate = FuelCost.  Since FuelRate can vary by timestep, cannot use dvFuelUsed in the following definition
forall (t in Tech, fb in FuelBin) do
     sum (ts in TimeStep, LD in Load, s in Seg |exists (dvRatedProd (t,LD,ts,s,fb)))
     	ProdFactor(t, LD, ts) * LevelizationFactor(t) * dvRatedProd (t,LD,ts,s,fb) * FuelBurnRateM(t,LD,fb) * TimeStepScaling * FuelRate(t,fb,ts) * pwf_e +
     sum(ts in TimeStep, LD in Load)
     	binTechIsOnInTS(t,ts) * FuelBurnRateB(t,LD,fb) * TimeStepScaling * FuelRate(t,fb,ts) * pwf_e = dvFuelCost(t,fb)
end-do

!! The following 2 constraints define binTechIsOnInTS to be the binary corollary to dvRatedProd,
!! i.e. binTechIsOnInTS = 1 for dvRatedProd > 0, and binTechIsOnInTS = 0 for dvRatedProd = 0
!CONSTRAINT 4A
forall (t in Tech, ts in TimeStep) do
  sum (LD in Load, s in Seg, fb in FuelBin | exists(dvRatedProd (t,LD,ts,s,fb)))
  		ProdFactor (t,LD,ts) * dvRatedProd (t,LD,ts,s,fb) <= MaxSize(t) * 100 * binTechIsOnInTS (t,ts)
!CONSTRAINT 5A
   sum (s in Seg) (MinTurndown(t) * dvSystemSize (t,s)) -
  		sum (LD in Load, s in Seg, fb in FuelBin | exists (dvRatedProd (t,LD,ts,s,fb)))
  		dvRatedProd (t,LD,ts,s,fb) <= MaxSize(t) * (1 - binTechIsOnInTS (t,ts))
end-do



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!the state of the storage system at the beginning is 0

	! boundary condition.  State of charge must begin and end the same.
	dvStoredEnergy(0) = InitSOC * dvStorageSizeKWH / TimeStepScaling !SOCt0(l) !dvStoredEnergy(TimeStepCount)
	!next to lines set the SOC of the battery at time of GridOutage
	dvStorageSizeKWH <=  MaxStorageSizeKWH
	dvStorageSizeKWH >=  MinStorageSizeKWH
	dvStorageSizeKW <=  MaxStorageSizeKW
	dvStorageSizeKW >= MinStorageSizeKW


forall ( ts in TimeStep) do
	! Electricity to be stored is the sum of the electricity in the S-bin for that timestep
	dvElecToStor( ts) = (sum(t in Tech, s in Seg, fb in FuelBin | exists (dvRatedProd(t,"1S",ts,s,fb))) ProdFactor(t,"1S",ts) * LevelizationFactor(t) * dvRatedProd (t,"1S",ts,s,fb) * EtaStorIn(t,"1S"))
	! state of charge at each timestep is sum of previous state and electiricy coming in, and less electricity going out
	dvStoredEnergy(ts) =   dvStoredEnergy(ts-1) +  dvElecToStor( ts) - dvElecFromStor(ts) / EtaStorOut("1S")
	! energy coming out of the storage system cannot be greater than the current state of charge
	dvElecFromStor(ts) / EtaStorOut("1S") <=  dvStoredEnergy(ts-1)
	! the state of charge always has to be greater than 0
	dvStoredEnergy(ts) >=  StorageMinChargePcent * dvStorageSizeKWH / TimeStepScaling
	dvElecFromStor( ts) >= 0
end-do

forall ( ts in TimeStep )  do
	dvStorageSizeKW >=  dvElecToStor(ts)
	dvStorageSizeKW >=  dvElecFromStor(ts)
end-do

dvMeanSOC = sum(ts in TimeStep) dvStoredEnergy(ts) / TimeStepCount

! the physical size of the storage system is the max amount of charge at any timestep.
forall (ts in TimeStep) do
	dvStorageSizeKWH >=  dvStoredEnergy(ts) * TimeStepScaling
end-do

!Prevent storage from charging and discharging within same timestep
forall ( ts in TimeStep) do
  dvElecToStor(ts) <= MaxStorageSizeKW * binBattCharge(ts)
  dvElecFromStor(ts) <= MaxStorageSizeKW * binBattDischarge(ts)
  binBattDischarge(ts) + binBattCharge(ts) <= 1
  binBattCharge (ts) is_binary
  binBattDischarge (ts) is_binary
end-do


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This section is declaring binary variables and constraining them
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!CONSTRAINT 2
forall (t in Tech) do
   sum (s in Seg) binSegChosen (t,s) = 1
end-do

!CONSTRAINT 3
! can only hve one tech from each tech class
forall ( b in TechClass) do
   sum (t in Tech) binSingleBasicTech (t,b) <= 1
end-do

!binary declarations
forall ( t in Tech, b in TechClass) binSingleBasicTech (t,b) is_binary
forall ( t in Tech, s in Seg) binSegChosen(t, s) is_binary
forall ( t in Tech, ts in TimeStep) binTechIsOnInTS(t,ts) is_binary

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! End declaring binary variables and constraining them
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


dvStorageSizeKWH <= MaxStorageSizeKWH
dvStorageSizeKW <= MaxStorageSizeKW




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! CapCost constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Determine which segment of the PWL cost curve.  binSegChosen is 1 for that segment, 0 else.
forall (t in Tech, s in Seg) do
!CONSTRAINT 20
   dvSystemSize (t,s) <= CapCostX (t,s)   * binSegChosen (t,s)
!CONSTRAINT 21
   dvSystemSize (t,s) >= CapCostX (t,s-1) * binSegChosen (t,s)
end-do


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! End CapCost constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!  Production Incentive Cap Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

forall (t in Tech) binProdIncent (t) is_binary

!CONSTRAINT 22
! Number 1: The Production Incentive can't exceed a certain dollar max (and is "0" if system size is too big)
forall (t in Tech) dvProdIncent (t) <= binProdIncent (t) * MaxProdIncent (t) * pwf_prod_incent(t)

!CONSTRAINT 23
! Number 2: Calculate the production incentive based on the energy produced.  Then dvProdIncent must be less than that.
! added LD to Prod Incent ExportRates 8912
forall (t in Tech) do
     dvProdIncent (t) <= sum (LD in Load, ts in TimeStep, s in Seg, fb in FuelBin |exists (dvRatedProd (t,LD,ts,s,fb)))
     	ProdFactor(t, LD, ts) * LevelizationFactorProdIncent(t) *  dvRatedProd (t,LD,ts,s,fb) * TimeStepScaling * ProdIncentRate (t, LD) * pwf_prod_incent(t)
end-do

!CONSTRAINT 24
! Number 3: If system size is bigger than MaxSizeForProdIncent, binProdIncent is 0, meaning you don't get the Prod Incent.
forall (t in Tech, LD in Load,ts in TimeStep  ) do
    sum (s in Seg) dvSystemSize (t,s) <= MaxSizeForProdIncent (t) + MaxSize(t) * (1 - binProdIncent (t))
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!  End Production Incentive Cap Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This section defining system size and production constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 !!System size cannot exceed MaxSize and must equal or exceed MinSize
 !CONSTRAINT 27
forall (t in Tech,s in Seg)   dvSystemSize (t,s) <=  MaxSize (t)

forall (tc in TechClass) do
    sum (t in Tech, s in Seg) dvSystemSize(t, s) * TechToTechClassMatrix(t,tc) >= TechClassMinSize(tc)
end-do

!!dvRatedProduction must be >= 0, or if MinTurndown is > 0, use semi-continuous variable
!CONSTRAINT 27a
forall (t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | MinTurndown(t) = 0 and exists (dvRatedProd (t,LD,ts,s,fb))) do
    dvRatedProd(t,LD,ts,s,fb) >= 0
end-do

forall (t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | MinTurndown(t) > 0 and exists (dvRatedProd (t,LD,ts,s,fb))) do
    dvRatedProd(t,LD,ts,s,fb) is_semcont MinTurndown(t)
end-do

!Per conversation with DC 7 6 12, changed below line to following 2 lines to capture size limit constraint based only on
! electric output of a CoGen with mandatory thermal tech
!For most techs, Rated Production across all loads cannot exceed System size
!CONSTRAINT 33A
forall (t in Tech,s in Seg,ts in TimeStep)  !for variable effiency gensets
	 sum (LD in Load, fb in FuelBin |exists (dvRatedProd (t,LD,ts,s,fb))) dvRatedProd (t,LD,ts,s,fb) <= dvSystemSize (t, s)

!CONSTRAINT 35
! sum of everything but retail electric produced by all techs must be less than max load for each fuel type
!TS 31513 should this exclude SHW?
forall (LD in Load,ts in TimeStep | LD <> "1R" and LD <>"1S") do
  sum (t in Tech, s in Seg, fb in FuelBin |exists (dvRatedProd (t,LD,ts,s,fb)))
  		 ProdFactor (t,LD,ts) * LevelizationFactor(t) * dvRatedProd (t,LD,ts,s,fb) <= LoadProfile (LD,ts)
end-do

!CONSTRAINT 38
!companion to the above.  Electric load can be met from generation OR from the storage
forall (LD in Load,ts in TimeStep  | LD = "1R") do
  sum (t in Tech, s in Seg,fb in FuelBin |exists (dvRatedProd (t,LD,ts,s,fb)) ) dvRatedProd (t,LD,ts,s,fb) * ProdFactor (t,LD,ts) * LevelizationFactor(t) + dvElecFromStor( ts) >=
  		  LoadProfile (LD,ts)
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! End system size and production constraints
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!  Net Meter Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 forall ( n in NMILRegime) binNMLorIL(n) is_binary

 !can only be in regime at a time.
 !CONSTRAINT 43
sum (n in NMILRegime) binNMLorIL(n) = 1

! The sum of the electricity output of all techs must be less than the limit for the regime
!CONSTRAINT 44
forall (n in NMILRegime | n <> "AboveIL") do
      sum (t in Tech, s in Seg)
      		TechToNMILMapping (t,n)*TurbineDerate(t)*dvSystemSize(t, s) <= NMILLimits(n) * binNMLorIL(n)
end-do

indicator(-1, binNMLorIL("AboveIL"), sum(t in Tech, s in Seg) TechToNMILMapping(t,"AboveIL") * TurbineDerate(t) * dvSystemSize(t, s) <= 0)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!  Demand Rate Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

forall ( LD in Load, fb in FuelBin, ts in TimeStep) do
	sum(s in Seg) dvRatedProd("UTIL1",LD,ts,s,fb) = sum(db in DemandBin, dbm in DemandMonthsBin) dvGrid(LD,ts,db,fb,dbm)
end-do

! Compute tiered energy rates
forall (fb in FuelBin, m in Month)  do
	UsageInTier(m, fb) :=  sum(LD in Load, ts in TimeStepRatchetsMonth(m), s in Seg) dvRatedProd("UTIL1",LD,ts,s,fb) * TimeStepScaling
   	UsageInTier(m, fb) >= 0
end-do

forall (fb in FuelBin, m in Month) do
	binUsageTier(m, fb) is_binary
end-do

forall (m in Month, fb in FuelBin | fb < FuelBinCount) do
    UsageInTier(m, fb) <= binUsageTier(m, fb) * MaxUsageInTier(fb)
end-do
forall (m in Month) do
	indicator(-1, binUsageTier(m, FuelBinCount), UsageInTier(m, FuelBinCount) <= 0)
end-do

forall (fb in FuelBin | fb >= 2, m in Month) do
	binUsageTier(m, fb) - binUsageTier(m, fb-1) <= 0
	binUsageTier(m, fb) * MaxUsageInTier(fb-1) - UsageInTier(m, fb-1) <= 0
end-do


! Compute tiered demand rates
forall (db in DemandBin, r in Ratchets) do
	binDemandTier(r, db) is_binary
end-do

forall (db in DemandBin, r in Ratchets | db < DemandBinCount) do
	dvPeakDemandE(r, db) <= binDemandTier(r,db) * MaxDemandInTier(db)
end-do
forall (r in Ratchets) do
	indicator(-1, binDemandTier(r, DemandBinCount), dvPeakDemandE(r, DemandBinCount) <= 0)
end-do

forall ( db in DemandBin | db >= 2, r in Ratchets) do
	binDemandTier(r, db) - binDemandTier(r, db-1) <= 0
	binDemandTier(r, db)*MaxDemandInTier(db-1) - dvPeakDemandE(r, db-1) <= 0
end-do

forall ( db in DemandBin, r in Ratchets, ts in TimeStepRatchets(r))  do
	dvPeakDemandE(r,db) >= sum(LD in Load, fb in FuelBin, dbm in DemandMonthsBin) dvGrid(LD,ts,db,fb,dbm)
   	dvPeakDemandE(r,db) >= 0
   	dvPeakDemandE(r,db) >= DemandLookbackPercent * dvPeakDemandELookback
end-do

! Compute tiered monthly demand rates
forall (dbm in DemandMonthsBin, m in Month) do
	binDemandMonthsTier(m, dbm) is_binary
end-do

forall ( dbm in DemandMonthsBin, m in Month | dbm < DemandMonthsBinCount) do
	dvPeakDemandEMonth(m, dbm) <= binDemandMonthsTier(m,dbm) * MaxDemandMonthsInTier(dbm)
end-do
forall (m in Month) do
	indicator(-1, binDemandMonthsTier(m, DemandMonthsBinCount), dvPeakDemandEMonth(m, DemandMonthsBinCount) <= 0)
end-do

forall ( dbm in DemandMonthsBin | dbm >= 2, m in Month) do
	binDemandMonthsTier(m, dbm) - binDemandMonthsTier(m, dbm-1) <= 0
	binDemandMonthsTier(m, dbm)*MaxDemandMonthsInTier(dbm-1) <= dvPeakDemandEMonth(m, dbm-1) ! enforces full bins
end-do

forall ( dbm in DemandMonthsBin, m in Month, ts in TimeStepRatchetsMonth(m))  do
	dvPeakDemandEMonth(m, dbm) >=  sum(LD in Load, db in DemandBin, fb in FuelBin) dvGrid(LD,ts,db,fb,dbm) ! validate
   	dvPeakDemandEMonth(m, dbm) >= 0
end-do

! find the peak demand of the lookback months (lbm)
forall (LD in Load, lbm in DemandLookbackMonths)  do
	dvPeakDemandELookback >= sum(dbm in DemandMonthsBin) dvPeakDemandEMonth(lbm, dbm)
end-do

!! 1/2/13  TS  Sum of Electric R and W must be less than the Site Load for the year.
!! Once site load is met, excess electricity goes into X bin with lower sellback rate
!!4313 TS.  Adding elec penalty to annual site load
!!41513 TS.  Excluding Grid.

   sum (t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | exists (dvRatedProd(t,LD,ts,s,fb)) and (LD="1R" or LD="1W" or LD="1S") and TechIsGrid(t) = 0)
 		(dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) * LevelizationFactor(t) *  TimeStepScaling)  <=  AnnualElecLoad
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!  End Electric Net Zero Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Added 8912, modified 81012 by TS
! Can only have one tech from each tech class
!CONSTRAINT 46
forall (t in Tech,  b in TechClass) do
   indicator(-1, binSingleBasicTech (t,b), sum (s in Seg) dvSystemSize (t, s) * TechToTechClassMatrix(t,b) <=  0)
end-do

!Curtailment 91212 added by TS written by Helwig.  Corrected by TS 91612.
!This prevents PV and wind from 'turning down'.  They always produce at max.
!CONSTRAINT 47
forall ( t in Tech, ts in TimeStep, s in Seg | TechToTechClassMatrix(t, "PV") = 1 or TechToTechClassMatrix(t, "WIND") = 1) do
	sum (fb in FuelBin, LD in Load |exists (dvRatedProd (t,LD,ts,s,fb)) and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S"))
		dvRatedProd (t,LD,ts,s,fb) =  dvSystemSize (t, s)
end-do

! System production
Year1PvProd := sum( t in Tech, s in Seg, fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "PV") = 1 and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S")))
                 dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) *  TimeStepScaling
AveragePvProd := sum( t in Tech, s in Seg, fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "PV") = 1 and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S")))
                   dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) *  TimeStepScaling  * LevelizationFactor(t)
Year1WindProd := sum( t in Tech, s in Seg, fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "WIND") = 1 and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S")))
                 dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) *  TimeStepScaling
AverageWindProd := sum( t in Tech, s in Seg, fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "WIND") = 1 and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S")))
                   dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) *  TimeStepScaling  * LevelizationFactor(t)
Year1GenProd := sum( t in Tech, s in Seg, fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "GENERATOR") = 1 and (LD = "1R" or LD = "1W" or LD = "1X" or LD = "1S")))
                 dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) *  TimeStepScaling
AverageGenProd := sum( t in Tech, s in Seg, fb in FuelBin, ts in TimeStep, LD in Load | (TechToTechClassMatrix (t, "GENERATOR") = 1 and (LD = "1R" or LD = "1W" or LD = "1S")))
                   dvRatedProd (t,LD,ts,s,fb)*ProdFactor(t, LD, ts) *  TimeStepScaling  * LevelizationFactor(t)

! Capital Costs
TotalTechCapCosts := sum(t in Tech, s in Seg) (CapCostSlope(t, s) * dvSystemSize(t, s) + CapCostYInt(t,s) * binSegChosen(t,s))
TotalStorageCapCosts := dvStorageSizeKWH * StorageCostPerKWH + dvStorageSizeKW * StorageCostPerKW

! O&M Costs
TotalPerUnitSizeOMCosts := sum(t in Tech, s in Seg) OMperUnitSize(t) * pwf_om * dvSystemSize(t, s)
TotalPerUnitProdOMCosts := sum (t in Tech,LD in Load,ts in TimeStep,s in Seg, fb in FuelBin | exists (dvRatedProd(t,LD,ts,s,fb)) and (TechToTechClassMatrix (t, "GENERATOR") = 1))
	dvRatedProd(t,LD,ts,s,fb) * TimeStepScaling * ProdFactor(t,LD,ts) * OMcostPerUnitProd(t) * pwf_om

PVPerUnitSizeOMCosts := sum(t in Tech, s in Seg |(TechToTechClassMatrix (t, "PV") = 1))
						OMperUnitSize(t) * pwf_om * dvSystemSize(t, s)
GenPerUnitSizeOMCosts := sum(t in Tech, s in Seg |(TechToTechClassMatrix (t, "GENERATOR") = 1))
						OMperUnitSize(t) * pwf_om * dvSystemSize(t, s)
GenPerUnitProdOMCosts := sum(t in Tech,LD in Load,ts in TimeStep,s in Seg, fb in FuelBin | exists (dvRatedProd(t,LD,ts,s,fb)) and (TechToTechClassMatrix (t, "GENERATOR") = 1))
	dvRatedProd(t,LD,ts,s,fb) * TimeStepScaling * ProdFactor(t,LD,ts) * OMcostPerUnitProd(t) * pwf_om

! Utility and Taxable Costs 
TotalEnergyCharges := sum( t in Tech, fb in FuelBin) dvFuelCost(t,fb)
TotalEnergyChargesUtil := sum(fb in FuelBin) dvFuelCost("UTIL1",fb) !explicitly calling out 'UTIL1' tech since only utility costs are desired
TotalGenFuelCharges := sum( t in Tech, fb in FuelBin|(TechToTechClassMatrix (t, "GENERATOR") = 1)) dvFuelCost(t,fb)
DemandTOUCharges := sum( r in Ratchets, db in DemandBin) dvPeakDemandE( r, db) * DemandRates(r,db) * pwf_e
DemandFlatCharges := sum( m in Month, dbm in DemandMonthsBin) dvPeakDemandEMonth( m, dbm) * DemandRatesMonth( m, dbm) * pwf_e
TotalDemandCharges :=  DemandTOUCharges + DemandFlatCharges
TotalFixedCharges := FixedMonthlyCharge * 12 * pwf_e

! Incentives
TotalEnergyExports := (sum (t in Tech,LD in Load,ts in TimeStep, s in Seg, fb in FuelBin | exists (dvRatedProd(t,LD,ts,s,fb)))
					dvRatedProd (t,LD,ts,s,fb)* TimeStepScaling *ProdFactor(t, LD, ts) * LevelizationFactor(t) *   ExportRates(t,LD,ts)) * pwf_e
TotalProductionIncentive := sum(t in Tech ) dvProdIncent (t)

! Tax benefit to system owner
r_tax_fraction_owner := (1 - r_tax_owner)
r_tax_fraction_offtaker := (1 - r_tax_offtaker)

! Utility min charges
if AnnualMinCharge > 12 * MonthlyMinCharge
then TotalMinCharge := AnnualMinCharge * pwf_e
else TotalMinCharge := 12 * MonthlyMinCharge * pwf_e
end-if

if TotalMinCharge > 0 then
	MinChargeAdder >= TotalMinCharge - (TotalEnergyChargesUtil + TotalDemandCharges + TotalEnergyExports + TotalFixedCharges)
	MinChargeAdder >= 0
	else MinChargeAdder = 0
end-if

! Note: 0.999*MinChargeAdder in Obj b/c when TotalMinCharge > (TotalEnergyCharges + TotalDemandCharges + TotalEnergyExports + TotalFixedCharges)
!       it is arbitrary where the min charge ends up (eg. could be in TotalDemandCharges or MinChargeAdder).
!       0.001*MinChargeAdder is added back into LCC when writing to results JSON.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!! OBJECTIVE FUNCTION VALUE

! Lifecycle Costs (LCC)
RECosts :=

!Capital Costs
TotalTechCapCosts + TotalStorageCapCosts +

! Fixed O&M, tax deductible for owner
TotalPerUnitSizeOMCosts * r_tax_fraction_owner +

! Variable O&M (will this be tax deductible for owner?)
TotalPerUnitProdOMCosts +

! Utility Bill, tax deductible for offtaker
(TotalEnergyCharges + TotalDemandCharges + TotalEnergyExports + TotalFixedCharges + 0.999*MinChargeAdder) * r_tax_fraction_offtaker -

! Subtract Incentives, which are taxable
TotalProductionIncentive * r_tax_fraction_owner


!! END OBJECTIVE FUNCTION VALUE
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!  Objectives   -- chose only 1, and comment the others
!!!  1.  Minimize LCC
!!!  2.  Maximize rated electric production project size
!!!  3.  Maximize electric production project size

if Obj = 1 then
	! to minimize RE LCC, uncomment this line  (and comment others)
	minimize (RECosts)
elif Obj = 5 then
	! Keep SOC high
	minimize (RECosts - 1*dvMeanSOC)
end-if

!End timing
EndTime:= gettime

case getprobstat of
  XPRS_OPT: status:="optimal"
  XPRS_UNF: status:="unfinished"
  XPRS_INF: status:="infeasible"
  XPRS_UNB: status:="unbounded"
  XPRS_OTH: status:="failed"
  else status:="???"
end-case
writeln(status)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!  Output Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ExportedElecPV := sum(t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | (TechToTechClassMatrix (t, "PV") = 1 and (LD = "1W" or LD = "1X" )))
                dvRatedProd(t,LD,ts,s,fb) * ProdFactor(t, LD, ts) * LevelizationFactor(t) *  TimeStepScaling

ExportedElecWIND := sum(t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | (TechToTechClassMatrix (t, "WIND") = 1 and (LD = "1W" or LD = "1X" )))
                dvRatedProd(t,LD,ts,s,fb) * ProdFactor(t, LD, ts) * LevelizationFactor(t) *  TimeStepScaling
ExportedElecGEN := sum(t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | (TechToTechClassMatrix (t, "GENERATOR") = 1 and (LD = "1W")))
                dvRatedProd(t,LD,ts,s,fb) * ProdFactor(t, LD, ts) * LevelizationFactor(t) *  TimeStepScaling
ExportBenefitYr1 := sum (t in Tech, LD in Load, ts in TimeStep, s in Seg, fb in FuelBin | exists (dvRatedProd(t,LD,ts,s,fb)))
                    dvRatedProd (t,LD,ts,s,fb) * TimeStepScaling * ProdFactor(t, LD, ts) * LevelizationFactor(t)* ExportRates(t,LD,ts) !Needs levelization factor

Year1EnergyCost := TotalEnergyChargesUtil / pwf_e
Year1DemandCost := TotalDemandCharges / pwf_e
Year1DemandTOUCost := DemandTOUCharges / pwf_e
Year1DemandFlatCost := DemandFlatCharges / pwf_e
Year1FixedCharges := TotalFixedCharges / pwf_e
Year1MinCharges := MinChargeAdder / pwf_e
Year1Bill := Year1EnergyCost + Year1DemandCost + Year1FixedCharges + Year1MinCharges


Year1UtilityEnergy := sum(LD in Load, ts in TimeStep, s in Seg, fb in FuelBin)
                      dvRatedProd("UTIL1", LD, ts, s, fb) * ProdFactor("UTIL1", LD, ts) * TimeStepScaling



GeneratorFuelUsed := sum(t in Tech, fb in FuelBin | TechToTechClassMatrix (t, "GENERATOR") = 1) dvFuelUsed(t, fb)

!************************** Writing to files ************************************


!Time series dispatch output

if getsol(dvStorageSizeKWH) > REoptTol then

    fopen(OutputDir + "\\GridToBatt.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd ("UTIL1", "1S", ts, s, fb)) * ProdFactor("UTIL1", "1S", ts) * LevelizationFactor("UTIL1"))
        end-do
    fclose(F_OUTPUT)

    fopen(OutputDir + "\\ElecToStore.csv",F_OUTPUT)
        forall (ts in TimeStep )     do
           writeln (     getsol (dvElecToStor (ts)))
        end-do
    fclose(F_OUTPUT)

    !Time series dispatch output
    fopen(OutputDir + "\\ElecFromStore.csv",F_OUTPUT)
        forall (ts in TimeStep )     do
           writeln (    getsol (dvElecFromStor (ts)))
        end-do
    fclose(F_OUTPUT)

    fopen(OutputDir + "\\StoredEnergy.csv",F_OUTPUT)
        forall (ts in TimeStep )     do
           writeln (   getsol (dvStoredEnergy (ts)))
        end-do
    fclose(F_OUTPUT)

    forall (t in Tech | (TechToTechClassMatrix (t, "PV") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > REoptTol)) do

        fopen(OutputDir + "\\PVtoBatt.csv", F_OUTPUT)
            forall (ts in TimeStep) do
               writeln (sum (s in Seg, fb in FuelBin)  getsol (dvRatedProd (t, "1S", ts, s, fb)) * ProdFactor(t, "1S", ts) * LevelizationFactor(t))
            end-do
        fclose(F_OUTPUT)

    end-do

    forall (t in Tech | (TechToTechClassMatrix (t, "WIND") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > 0)) do

        fopen(OutputDir + "\\WINDtoBatt.csv", F_OUTPUT)
            forall (ts in TimeStep) do
               writeln (sum (s in Seg, fb in FuelBin)  getsol (dvRatedProd (t, "1S", ts, s, fb)) * ProdFactor(t, "1S", ts) * LevelizationFactor(t))
            end-do
        fclose(F_OUTPUT)

    end-do
    
    forall (t in Tech | (TechToTechClassMatrix (t, "GENERATOR") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > 0)) do

        fopen(OutputDir + "\\GENERATORtoBatt.csv", F_OUTPUT)
            forall (ts in TimeStep) do
               writeln (sum (s in Seg, fb in FuelBin)  getsol (dvRatedProd (t, "1S", ts, s, fb)) * ProdFactor(t, "1S", ts) * LevelizationFactor(t))
            end-do
        fclose(F_OUTPUT)

    end-do

end-if

forall (t in Tech | (TechToTechClassMatrix (t, "PV") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > REoptTol)) do

    fopen(OutputDir + "\\PVtoLoad.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1R", ts, s, fb)) * ProdFactor(t, "1R", ts) * LevelizationFactor(t))
        end-do
    fclose(F_OUTPUT)

    fopen(OutputDir + "\\PVtoGrid.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1W", ts, s, fb)) * ProdFactor(t, "1W", ts) * LevelizationFactor(t) +
                    sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1X", ts, s, fb)) * ProdFactor(t, "1X", ts) * LevelizationFactor(t))
        end-do
    fclose(F_OUTPUT)

end-do

forall (t in Tech | (TechToTechClassMatrix (t, "WIND") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > 0)) do

    fopen(OutputDir + "\\WINDtoLoad.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1R", ts, s, fb)) * ProdFactor(t, "1R", ts) * LevelizationFactor(t))
        end-do
    fclose(F_OUTPUT)

    fopen(OutputDir + "\\WINDtoGrid.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1W", ts, s, fb)) * ProdFactor(t, "1W", ts) * LevelizationFactor(t) +
                    sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1X", ts, s, fb)) * ProdFactor(t, "1X", ts) * LevelizationFactor(t))
        end-do
    fclose(F_OUTPUT)

end-do

forall (t in Tech | (TechToTechClassMatrix (t, "GENERATOR") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > 0)) do

    fopen(OutputDir + "\\GENERATORtoLoad.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1R", ts, s, fb)) * ProdFactor(t, "1R", ts) * LevelizationFactor(t))
        end-do
        
    fopen(OutputDir + "\\GENERATORtoGrid.csv", F_OUTPUT)
        forall (ts in TimeStep) do
           writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd (t, "1W", ts, s, fb)) * ProdFactor(t, "1W", ts) * LevelizationFactor(t))
        end-do
    fclose(F_OUTPUT)

end-do

fopen(OutputDir + "\\GridToLoad.csv", F_OUTPUT)
    forall (ts in TimeStep) do
       writeln (sum (s in Seg, fb in FuelBin)   getsol (dvRatedProd ("UTIL1", "1R", ts, s, fb)) * ProdFactor("UTIL1", "1R", ts) * LevelizationFactor("UTIL1"))
    end-do
fclose(F_OUTPUT)

fopen(OutputDir + "\\Load.csv",F_OUTPUT)
    forall (ts in TimeStep )     do
       writeln (   getsol (LoadProfile("1R",ts)))
    end-do
fclose(F_OUTPUT)


fopen(OutputDir + "\\DemandPeaks.csv",F_OUTPUT)
    writeln ("Ratchet,DemandTier,PeakDemand")
    forall  ( r in Ratchets, db in DemandBin)  do
       writeln (r, ",", db, ",", getsol(dvPeakDemandE(r,db)),",")
    end-do
    writeln(",")
    writeln("Month,Peak_Demand")
    forall  ( m in Month, dbm in DemandMonthsBin)  do
       writeln (m, ",", getsol(dvPeakDemandEMonth(m, dbm)),",")
    end-do
fclose(F_OUTPUT)


! write outputs in JSON for post processing

    Root:=addnode(out_json, 0, XML_ELT, "jsv")

    Node:=addnode(out_json, Root, "status", status)
    Node:=addnode(out_json, Root, "lcc", strfmt(getsol(RECosts) + 0.001*getsol(MinChargeAdder), 10, 0))
    Node:=addnode(out_json, Root, "batt_kwh", strfmt(getsol (dvStorageSizeKWH), 10, 4))
    Node:=addnode(out_json, Root, "batt_kw", strfmt(getsol (dvStorageSizeKW), 10, 4))

    forall (t in Tech  | TechToTechClassMatrix(t, "PV") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > REoptTol)  do
        Node:=addnode(out_json, Root, "pv_kw", strfmt(sum(s in Seg) getsol (dvSystemSize(t,s)), 10, 4))
    end-do

    forall (t in Tech  | TechToTechClassMatrix(t, "WIND") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > 0)  do
        Node:=addnode(out_json, Root, "wind_kw", strfmt(sum(s in Seg) getsol (dvSystemSize(t,s)), 10, 4))
    end-do

    forall (t in Tech  | TechToTechClassMatrix(t, "GENERATOR") = 1 and sum(s in Seg) getsol (dvSystemSize(t,s)) > 0)  do
        Node:=addnode(out_json, Root, "generator_kw", sum(s in Seg) getsol (dvSystemSize(t,s)))
    end-do

    Node:=addnode(out_json, Root, "year_one_utility_kwh", strfmt(getsol (Year1UtilityEnergy) , 10, 4))
    Node:=addnode(out_json, Root, "year_one_energy_cost", strfmt(getsol(Year1EnergyCost), 10, 2))
    Node:=addnode(out_json, Root, "year_one_demand_cost", strfmt(getsol(Year1DemandCost), 10, 2))
    Node:=addnode(out_json, Root, "year_one_demand_tou_cost", strfmt(getsol(Year1DemandTOUCost), 10, 2))
    Node:=addnode(out_json, Root, "year_one_demand_flat_cost", strfmt(getsol(Year1DemandFlatCost), 10, 2))
    Node:=addnode(out_json, Root, "year_one_export_benefit", strfmt(getsol(ExportBenefitYr1), 10, 0))
    Node:=addnode(out_json, Root, "year_one_fixed_cost", strfmt(getsol(Year1FixedCharges), 10, 0))
    Node:=addnode(out_json, Root, "year_one_min_charge_adder", strfmt(getsol(Year1MinCharges), 10, 2))
    Node:=addnode(out_json, Root, "year_one_bill", strfmt(getsol(Year1Bill), 10, 2))
    !Node:=addnode(out_json, Root, "year_one_payments_to_third_party_owner", strfmt(getsol(TotalDemandCharges) / pwf_e, 10, 0))
    Node:=addnode(out_json, Root, "total_energy_cost", strfmt(getsol(TotalEnergyChargesUtil) * r_tax_fraction_offtaker, 10, 2))
    Node:=addnode(out_json, Root, "total_demand_cost", strfmt(getsol(TotalDemandCharges) * r_tax_fraction_offtaker, 10, 2))
    Node:=addnode(out_json, Root, "total_fixed_cost", strfmt(getsol(TotalFixedCharges) * r_tax_fraction_offtaker, 10, 2))
    Node:=addnode(out_json, Root, "total_export_benefit", strfmt(getsol(TotalEnergyExports) * r_tax_fraction_offtaker, 10, 2))
    Node:=addnode(out_json, Root, "total_min_charge_adder", strfmt(getsol(MinChargeAdder) * r_tax_fraction_offtaker, 10, 2))
    Node:=addnode(out_json, Root, "total_payments_to_third_party_owner", 0)
    Node:=addnode(out_json, Root, "net_capital_costs_plus_om", strfmt(getsol(TotalTechCapCosts) + getsol(TotalStorageCapCosts) + getsol(TotalPerUnitSizeOMCosts) * r_tax_fraction_owner, 10, 0))
    Node:=addnode(out_json, Root, "pv_net_fixed_om_costs", strfmt(getsol(PVPerUnitSizeOMCosts) * r_tax_fraction_owner, 10, 0))
    Node:=addnode(out_json, Root, "gen_net_fixed_om_costs", strfmt((getsol(GenPerUnitSizeOMCosts)) * r_tax_fraction_owner, 10, 0))
    Node:=addnode(out_json, Root, "gen_net_variable_om_costs", strfmt((getsol(GenPerUnitProdOMCosts)) * r_tax_fraction_owner, 10, 0))
    Node:=addnode(out_json, Root, "net_capital_costs", strfmt(getsol(TotalTechCapCosts) + getsol(TotalStorageCapCosts), 10, 0))
    Node:=addnode(out_json, Root, "average_yearly_pv_energy_produced", strfmt(getsol(AveragePvProd), 10, 0))
    Node:=addnode(out_json, Root, "average_wind_energy_produced", strfmt(getsol(AverageWindProd), 10, 0))
    Node:=addnode(out_json, Root, "average_yearly_gen_energy_produced", strfmt(getsol(AverageGenProd), 10, 0))
    Node:=addnode(out_json, Root, "year_one_energy_produced", strfmt(getsol(Year1PvProd), 10, 0))
    Node:=addnode(out_json, Root, "year_one_wind_energy_produced", strfmt(getsol(Year1WindProd), 10, 0))
    Node:=addnode(out_json, Root, "year_one_gen_energy_produced", strfmt(getsol(Year1GenProd), 10, 0))
    Node:=addnode(out_json, Root, "average_annual_energy_exported", strfmt(getsol(ExportedElecPV), 10, 0))
    Node:=addnode(out_json, Root, "average_annual_energy_exported_wind", strfmt(getsol(ExportedElecWIND), 10, 0))
    Node:=addnode(out_json, Root, "average_annual_energy_exported_gen", strfmt(getsol(ExportedElecGEN), 10, 0))
    Node:=addnode(out_json, Root, "fuel_used_gal", strfmt(getsol(GeneratorFuelUsed), 10, 2))

jsonsave(out_json, OutputDir + "\\REopt_results.json")

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!  End Output Module
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


end-model
