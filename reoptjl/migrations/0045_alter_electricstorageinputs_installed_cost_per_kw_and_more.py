# Generated by Django 4.0.7 on 2023-09-29 20:03

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0044_merge_20230925_2105'),
    ]

    operations = [
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='installed_cost_per_kw',
            field=models.FloatField(blank=True, default=910.0, help_text='Total upfront battery power capacity costs (e.g. inverter and balance of power systems)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='installed_cost_per_kwh',
            field=models.FloatField(blank=True, default=455.0, help_text='Total upfront battery costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='replace_cost_per_kw',
            field=models.FloatField(blank=True, default=715.0, help_text='Battery power capacity replacement cost at time of replacement year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='replace_cost_per_kwh',
            field=models.FloatField(blank=True, default=318.0, help_text='Battery energy capacity replacement cost at time of replacement year', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='boiler_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, default=0.015, help_text='Annual nominal boiler fuel cost escalation rate', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='chp_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, default=0.015, help_text='Annual nominal chp fuel cost escalation rate', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='elec_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, default=0.017, help_text='Annual nominal utility electricity cost escalation rate.', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='existing_boiler_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, default=0.015, help_text='Annual nominal existing boiler fuel cost escalation rate', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='generator_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, default=0.012, help_text='Annual nominal boiler fuel cost escalation rate', validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='offtaker_discount_rate_fraction',
            field=models.FloatField(blank=True, default=0.0638, help_text='Nominal energy offtaker discount rate. In single ownership model the offtaker is also the generation owner.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='owner_discount_rate_fraction',
            field=models.FloatField(blank=True, default=0.0638, help_text='Nominal generation owner discount rate. Used for two party financing model. In two party ownership model the offtaker does not own the generator(s).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='electric_efficiency_full_load',
            field=models.FloatField(blank=True, default=0.322, help_text='Electric efficiency of the generator running at full load.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='installed_cost_per_kw',
            field=models.FloatField(blank=True, default=1790, help_text='Installed PV cost in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='om_cost_per_kw',
            field=models.FloatField(blank=True, default=18, help_text='Annual PV operations and maintenance costs in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='tilt',
            field=models.FloatField(blank=True, help_text='PV system tilt. If PV system type is rooftop-fixed, then tilt=10 degrees, else tilt=20 degrees', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)]),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='installed_cost_per_kw',
            field=models.FloatField(blank=True, help_text='Installed cost in $/kW. Default cost is determined based on size_class.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)]),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='om_cost_per_kw',
            field=models.FloatField(blank=True, default=36, help_text='Annual operations and maintenance costs in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)]),
        ),
    ]
