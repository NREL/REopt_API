# Generated by Django 4.0.7 on 2025-09-24 16:11

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0093_siteinputs_federal_procurement_type_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='chpinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, help_text='Percentage of capital costs that are credited towards federal taxes', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='coldthermalstorageinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='coldthermalstorageinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='coldthermalstorageinputs',
            name='total_itc_fraction',
            field=models.FloatField(blank=True, help_text='Total investment tax credit in percent applied toward capital costs', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='electricstorageinputs',
            name='total_itc_fraction',
            field=models.FloatField(blank=True, help_text='Total investment tax credit in percent applied toward capital costs', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='boiler_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, help_text='Annual nominal boiler fuel cost escalation rate', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='chp_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, help_text='Annual nominal chp fuel cost escalation rate', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='elec_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, help_text='Annual nominal utility electricity cost escalation rate.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='existing_boiler_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, help_text='Annual nominal existing boiler fuel cost escalation rate', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='generator_fuel_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, help_text='Annual nominal boiler fuel cost escalation rate', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='offtaker_discount_rate_fraction',
            field=models.FloatField(blank=True, help_text='Nominal energy offtaker discount rate. In single ownership model the offtaker is also the generation owner.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='offtaker_tax_rate_fraction',
            field=models.FloatField(blank=True, help_text='Host tax rate', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0.999)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='om_cost_escalation_rate_fraction',
            field=models.FloatField(blank=True, help_text='Annual nominal O&M cost escalation rate', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='owner_discount_rate_fraction',
            field=models.FloatField(blank=True, help_text='Nominal generation owner discount rate. Used for two party financing model. In two party ownership model the offtaker does not own the generator(s).', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='owner_tax_rate_fraction',
            field=models.FloatField(blank=True, help_text='Generation owner tax rate. Used for two party financing model. In two party ownership model the offtaker does not own the generator(s).', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0.999)]),
        ),
        migrations.AlterField(
            model_name='financialinputs',
            name='third_party_ownership',
            field=models.BooleanField(blank=True, help_text='Specify if ownership model is direct ownership or two party. In two party model the offtaker does not purcharse the generation technologies, but pays the generation owner for energy from the generator(s).', null=True),
        ),
        migrations.AlterField(
            model_name='ghpinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, help_text='Percentage of capital costs that are credited towards federal taxes', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='ghpinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='ghpinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='hotthermalstorageinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='hotthermalstorageinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='hotthermalstorageinputs',
            name='total_itc_fraction',
            field=models.FloatField(blank=True, help_text='Total investment tax credit in percent applied toward capital costs', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, help_text='Percentage of capital costs that are credited towards federal taxes', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='pvinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='steamturbineinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='steamturbineinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='federal_itc_fraction',
            field=models.FloatField(blank=True, help_text='Percentage of capital costs that are credited towards federal taxes', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='windinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
    ]
