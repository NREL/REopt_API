# Generated by Django 4.0.7 on 2024-09-23 21:04

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0068_existingboileroutputs_size_mmbtu_per_hour'),
    ]

    operations = [
        migrations.AddField(
            model_name='financialoutputs',
            name='initial_capital_costs_after_incentives_without_macrs',
            field=models.FloatField(blank=True, help_text='Up-front capital costs for all technologies, in present value, excluding replacement costs, including incentives except for MACRS.', null=True),
        ),
        migrations.AddField(
            model_name='heatingloadoutputs',
            name='annual_emissions_from_unaddressable_heating_load_tonnes_CO2',
            field=models.FloatField(blank=True, default=0, help_text='Annual site total unaddressable heating fuel climate CO2 emissions [tonnes]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AddField(
            model_name='heatingloadoutputs',
            name='annual_total_unaddressable_heating_load_mmbtu',
            field=models.FloatField(blank=True, default=0, help_text='Annual site total unaddressable heating fuel [MMBTU]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='back_up_temp_threshold_degF',
            field=models.FloatField(blank=True, help_text='Temperature threshold below which resistive back-up heater turns on [Fahrenheit]', null=True, validators=[django.core.validators.MinValueValidator(-275.0), django.core.validators.MaxValueValidator(200.0)]),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='can_serve_cooling',
            field=models.BooleanField(blank=True, help_text='Boolean indicator if ASHP space heater can serve cooling load', null=True),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='force_into_system',
            field=models.BooleanField(blank=True, help_text='Boolean indicator if ASHP space heater serves compatible thermal loads exclusively in optimized scenario', null=True),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='installed_cost_per_ton',
            field=models.FloatField(blank=True, help_text='Thermal power-based cost of ASHP space heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='max_ton',
            field=models.FloatField(blank=True, help_text='Maximum thermal power size constraint for optimization [ton]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='om_cost_per_ton',
            field=models.FloatField(blank=True, help_text='Thermal power-based cost of ASHP space heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpspaceheaterinputs',
            name='sizing_factor',
            field=models.FloatField(blank=True, help_text='Size of system relative to max dispatch output [fraction]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='back_up_temp_threshold_degF',
            field=models.FloatField(blank=True, help_text='Temperature threshold below which resistive back-up heater turns on [Fahrenheit]', null=True, validators=[django.core.validators.MinValueValidator(-275.0), django.core.validators.MaxValueValidator(200.0)]),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='force_into_system',
            field=models.BooleanField(blank=True, help_text='Boolean indicator if ASHP space heater serves compatible thermal loads exclusively in optimized scenario', null=True),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='installed_cost_per_ton',
            field=models.FloatField(blank=True, help_text='Thermal power-based cost of ASHP water heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='macrs_bonus_fraction',
            field=models.FloatField(blank=True, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='macrs_option_years',
            field=models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='max_ton',
            field=models.FloatField(blank=True, help_text='Maximum thermal power size constraint for optimization [ton]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='om_cost_per_ton',
            field=models.FloatField(blank=True, help_text='Thermal power-based cost of ASHP water heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='ashpwaterheaterinputs',
            name='sizing_factor',
            field=models.FloatField(blank=True, help_text='Size of system relative to max dispatch output [fraction]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
    ]
