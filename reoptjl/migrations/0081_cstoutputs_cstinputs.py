# Generated by Django 4.0.7 on 2025-04-23 16:47

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import reoptjl.models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0080_electricloadoutputs_annual_electric_load_with_thermal_conversions_kwh_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CSTOutputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_kw', models.FloatField(blank=True, null=True)),
                ('annual_electric_consumption_kwh', models.FloatField(blank=True, null=True)),
                ('annual_thermal_production_mmbtu', models.FloatField(blank=True, null=True)),
                ('thermal_production_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('thermal_to_storage_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('thermal_to_hot_sensible_tes_storage_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('thermal_to_steamturbine_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('thermal_curtailed_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, size=None)),
                ('meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='CSTOutputs', to='reoptjl.apimeta')),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='CSTInputs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tech_type', models.TextField(blank=True, default='ptc', help_text='Type of CST you want to implement into your system')),
                ('min_kw', models.FloatField(blank=True, default=0, help_text='Minimum CST size constraint for optimization.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kw', models.FloatField(blank=True, default=1000000000.0, help_text='Maximum CST size constraint for optimization (upper bound on additional capacity beyond existing_kw). Set to zero to disable PV', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('acres_per_kw', models.FloatField(blank=True, default=0.006, help_text='Power density for CST', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)])),
                ('installed_cost_per_kw', models.FloatField(blank=True, default=1200, help_text='Installed CST cost in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000.0)])),
                ('om_cost_per_kw', models.FloatField(blank=True, default=18, help_text='Annual CST operations and maintenance costs in $/kW', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)])),
                ('om_cost_per_kwh', models.FloatField(blank=True, default=18, help_text='Annual CST operations and maintenance costs in $/kWh', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=5, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_fraction', models.FloatField(blank=True, default=0.6, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('capacity_factor_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optional user-defined capacity factors for CST.', size=None)),
                ('elec_consumption_factor_series', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optional user-defined electricity consumption factors for CST.', size=None)),
                ('can_supply_steam_turbine', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if CST can supply steam to the steam turbine for electric production', null=True)),
                ('can_serve_dhw', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if CST can serve hot water load', null=True)),
                ('can_serve_space_heating', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if CST can serve space heating load', null=True)),
                ('can_serve_process_heat', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if CST can serve process heat load', null=True)),
                ('charge_storage_only', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if CST can only supply hot TES', null=True)),
                ('emissions_factor_lb_CO2_per_mmbtu', models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('emissions_factor_lb_NOx_per_mmbtu', models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('emissions_factor_lb_SO2_per_mmbtu', models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('emissions_factor_lb_PM25_per_mmbtu', models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='CSTInputs', to='reoptjl.apimeta')),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
    ]
