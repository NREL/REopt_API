# Generated by Django 4.0.7 on 2024-06-27 21:06

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import reoptjl.models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0059_processheatloadinputs_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ASHPSpaceHeaterInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ASHPSpaceHeaterInputs', serialize=False, to='reoptjl.apimeta')),
                ('min_ton', models.FloatField(blank=True, default=0.0, help_text='Minimum thermal power size constraint for optimization [ton]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('max_ton', models.FloatField(blank=True, default=100000000.0, help_text='Maximum thermal power size constraint for optimization [ton]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('installed_cost_per_ton', models.FloatField(blank=True, default=2250.0, help_text='Thermal power-based cost of ASHP space heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('om_cost_per_ton', models.FloatField(blank=True, default=0.0, help_text='Thermal power-based cost of ASHP space heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=0, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True)),
                ('macrs_bonus_fraction', models.FloatField(blank=True, default=0.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('heating_cop', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)]), blank=True, default=list, help_text='ASHP space heating system heating coefficient of performance (COP) (ratio of usable heating thermal energy produced per unit electric energy consumed)', size=None)),
                ('cooling_cop', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)]), blank=True, default=list, help_text='ASHP space heating system cooling coefficient of performance (COP) (ratio of usable cooling thermal energy produced per unit electric energy consumed)', size=None)),
                ('heating_cf', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)]), blank=True, default=list, help_text='ASHP space heating system heating capacity factor(ratio of heating thermal power to rated capacity)', size=None)),
                ('cooling_cf', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)]), blank=True, default=list, help_text='ASHP space heater cooling capacity factor(ratio of cooling thermal power to rated capacity)', size=None)),
                ('can_serve_cooling', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if ASHP space heater can serve cooling load', null=True)),
                ('force_into_system', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if ASHP space heater serves compatible thermal loads exclusively in optimized scenario', null=True)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ASHPSpaceHeaterOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ASHPSpaceHeaterOutputs', serialize=False, to='reoptjl.apimeta')),
                ('size_ton', models.FloatField(blank=True, null=True)),
                ('annual_electric_consumption_kwh', models.FloatField(blank=True, null=True)),
                ('electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('annual_thermal_production_mmbtu', models.FloatField(blank=True, null=True)),
                ('annual_thermal_production_tonhour', models.FloatField(blank=True, null=True)),
                ('thermal_to_storage_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_production_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_space_heating_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_storage_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_load_series_ton', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ASHPWaterHeaterInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ASHPWaterHeaterInputs', serialize=False, to='reoptjl.apimeta')),
                ('min_ton', models.FloatField(blank=True, default=0.0, help_text='Minimum thermal power size constraint for optimization [ton]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('max_ton', models.FloatField(blank=True, default=100000000.0, help_text='Maximum thermal power size constraint for optimization [ton]', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('installed_cost_per_ton', models.FloatField(blank=True, default=2250.0, help_text='Thermal power-based cost of ASHP water heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('om_cost_per_ton', models.FloatField(blank=True, default=0.0, help_text='Thermal power-based cost of ASHP water heater [$/ton] (3.5 ton to 1 kWt)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=0, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True)),
                ('macrs_bonus_fraction', models.FloatField(blank=True, default=0.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('heating_cop', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)]), blank=True, default=list, help_text='ASHP space heating system heating coefficient of performance (COP) (ratio of usable heating thermal energy produced per unit electric energy consumed)', size=None)),
                ('heating_cf', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)]), blank=True, default=list, help_text='ASHP space heating system heating capacity factor(ratio of heating thermal power to rated capacity)', size=None)),
                ('force_into_system', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if ASHP space heater serves compatible thermal loads exclusively in optimized scenario', null=True)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ASHPWaterHeaterOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ASHPWaterHeaterOutputs', serialize=False, to='reoptjl.apimeta')),
                ('size_ton', models.FloatField(blank=True, null=True)),
                ('annual_electric_consumption_kwh', models.FloatField(blank=True, null=True)),
                ('electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('annual_thermal_production_mmbtu', models.FloatField(blank=True, null=True)),
                ('thermal_to_storage_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_production_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_dhw_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricHeaterInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ElectricHeaterInputs', serialize=False, to='reoptjl.apimeta')),
                ('min_mmbtu_per_hour', models.FloatField(blank=True, default=0.0, help_text='Minimum thermal power size', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('max_mmbtu_per_hour', models.FloatField(blank=True, default=10000000.0, help_text='Maximum thermal power size', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('installed_cost_per_mmbtu_per_hour', models.FloatField(blank=True, help_text='Thermal power-based cost', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('om_cost_per_mmbtu_per_hour', models.FloatField(blank=True, help_text='Thermal power-based fixed O&M cost', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000000.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=0, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable', null=True)),
                ('macrs_bonus_fraction', models.FloatField(blank=True, default=0.0, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('cop', models.FloatField(blank=True, help_text='Electric heater system coefficient of performance (COP) (ratio of usable thermal energy produced per unit electric energy consumed)', null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(20)])),
                ('can_supply_steam_turbine', models.BooleanField(blank=True, default=True, help_text='If the boiler can supply steam to the steam turbine for electric production', null=True)),
                ('can_serve_dhw', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if the electric heater can serve domestic hot water load', null=True)),
                ('can_serve_space_heating', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if the electric heater can serve space heating load', null=True)),
                ('can_serve_process_heat', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if the electric heater can serve process heat load', null=True)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='ElectricHeaterOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='ElectricHeaterOutputs', serialize=False, to='reoptjl.apimeta')),
                ('size_mmbtu_per_hour', models.FloatField(blank=True, null=True)),
                ('annual_electric_consumption_kwh', models.FloatField(blank=True, null=True)),
                ('electric_consumption_series_kw', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('annual_thermal_production_mmbtu', models.FloatField(blank=True, null=True)),
                ('thermal_to_storage_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_steamturbine_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_production_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_dhw_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_space_heating_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('thermal_to_process_heat_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.AddField(
            model_name='existingchillerinputs',
            name='retire_in_optimal',
            field=models.BooleanField(blank=True, default=False, help_text='Boolean indicator if the existing chiller is unavailable in the optimal case (still used in BAU)', null=True),
        ),
        migrations.AlterField(
            model_name='absorptionchillerinputs',
            name='heating_load_input',
            field=models.TextField(blank=True, choices=[('DomesticHotWater', 'Domestichotwater'), ('SpaceHeating', 'Spaceheating'), ('ProcessHeat', 'Processheat')], help_text='Absorption chiller heat input - determines what heating load is added to by absorption chiller use', null=True),
        ),
    ]
