# Generated by Django 4.0.7 on 2025-09-02 18:10

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import reoptjl.models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0099_merge_20250821_1548'),
    ]

    operations = [
        migrations.CreateModel(
            name='HighTempThermalStorageInputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='HighTempThermalStorageInputs', serialize=False, to='reoptjl.apimeta')),
                ('fluid', models.TextField(blank=True, default='INCOMP::NaK', help_text='Type of fluid for your High Temp Thermal Storage system')),
                ('min_kwh', models.FloatField(blank=True, default=0.0, help_text='Minimum TES volume (energy) size constraint for optimization', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('max_kwh', models.FloatField(blank=True, default=0.0, help_text='Maximum TES volume (energy) size constraint for optimization. Set to zero to disable storage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('hot_temp_degF', models.FloatField(blank=True, default=1065.0, help_text='Hot-side supply water temperature from HotTES (top of tank) to the heating load', validators=[django.core.validators.MinValueValidator(200.0), django.core.validators.MaxValueValidator(2000.0)])),
                ('cool_temp_degF', models.FloatField(blank=True, default=554.0, help_text='Cold-side return water temperature from the heating load to the HotTES (bottom of tank)', validators=[django.core.validators.MinValueValidator(200.0), django.core.validators.MaxValueValidator(2000.0)])),
                ('internal_efficiency_fraction', models.FloatField(blank=True, default=0.999999, help_text='Thermal losses due to mixing from thermal power entering or leaving tank', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('soc_min_fraction', models.FloatField(blank=True, default=0.1, help_text='Minimum allowable battery state of charge as fraction of energy capacity.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('soc_init_fraction', models.FloatField(blank=True, default=0.5, help_text='Battery state of charge at first hour of optimization as fraction of energy capacity.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('installed_cost_per_kwh', models.FloatField(blank=True, default=1.5, help_text='Installed hot TES cost in $/kwh', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('om_cost_per_kwh', models.FloatField(blank=True, default=0.0, help_text='Annual hot TES operations and maintenance costs in $/kwh', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000.0)])),
                ('thermal_decay_rate_fraction', models.FloatField(blank=True, default=0.0004, help_text='Thermal energy-based cost of TES (e.g. volume of the tank)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1.0)])),
                ('macrs_option_years', models.IntegerField(blank=True, choices=[(0, 'Zero'), (5, 'Five'), (7, 'Seven')], default=7, help_text='Duration over which accelerated depreciation will occur. Set to zero to disable')),
                ('macrs_bonus_fraction', models.FloatField(blank=True, default=0.6, help_text='Percent of upfront project costs to depreciate in year one in addition to scheduled depreciation', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('macrs_itc_reduction', models.FloatField(blank=True, default=0.0, help_text='Percent of the ITC value by which depreciable basis is reduced', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_itc_fraction', models.FloatField(blank=True, default=0.3, help_text='Total investment tax credit in percent applied toward capital costs', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('total_rebate_per_kwh', models.FloatField(blank=True, default=0.0, help_text='Rebate per unit installed energy capacity', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000.0)])),
                ('can_serve_dhw', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if hot thermal storage can serve space heating load', null=True)),
                ('can_serve_space_heating', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if hot thermal storage can serve space heating load', null=True)),
                ('can_serve_process_heat', models.BooleanField(blank=True, default=True, help_text='Boolean indicator if hot thermal storage can serve process heat load', null=True)),
                ('supply_turbine_only', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if hot thermal storage can serve only steam turbine', null=True)),
                ('one_direction_flow', models.BooleanField(blank=True, default=False, help_text='Boolean indicator if hot thermal storage can only', null=True)),
                ('num_charge_hours', models.FloatField(blank=True, default=4.0, help_text='Number of charge hours', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
                ('num_discharge_hours', models.FloatField(blank=True, default=10.0, help_text='Number of charge hours', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)])),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.CreateModel(
            name='HighTempThermalStorageOutputs',
            fields=[
                ('meta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='HighTempThermalStorageOutputs', serialize=False, to='reoptjl.apimeta')),
                ('size_kwh', models.FloatField(blank=True, null=True)),
                ('soc_series_fraction', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('storage_to_load_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
                ('storage_to_turbine_series_mmbtu_per_hour', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), default=list, size=None)),
            ],
            bases=(reoptjl.models.BaseModel, models.Model),
        ),
        migrations.RemoveField(
            model_name='hotsensibletesoutputs',
            name='meta',
        ),
        migrations.RenameField(
            model_name='cstoutputs',
            old_name='thermal_to_hot_sensible_tes_series_mmbtu_per_hour',
            new_name='thermal_to_high_temp_thermal_storage_series_mmbtu_per_hour',
        ),
        migrations.RenameField(
            model_name='electricheateroutputs',
            old_name='thermal_to_hot_sensible_tes_series_mmbtu_per_hour',
            new_name='thermal_to_high_temp_thermal_storage_series_mmbtu_per_hour',
        ),
        migrations.RenameField(
            model_name='steamturbineoutputs',
            old_name='thermal_to_hot_sensible_tes_series_mmbtu_per_hour',
            new_name='thermal_to_high_temp_thermal_storage_series_mmbtu_per_hour',
        ),
        migrations.RemoveField(
            model_name='cstinputs',
            name='capacity_factor_series',
        ),
        migrations.RemoveField(
            model_name='cstoutputs',
            name='thermal_to_hot_sensible_tes_storage_series_mmbtu_per_hour',
        ),
        migrations.AddField(
            model_name='cstinputs',
            name='production_factor',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True), blank=True, default=list, help_text='Optional user-defined production factors for CST.', size=None),
        ),
        migrations.AddField(
            model_name='cstoutputs',
            name='size_mmbtu_per_hour',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.DeleteModel(
            name='HotSensibleTESInputs',
        ),
        migrations.DeleteModel(
            name='HotSensibleTESOutputs',
        ),
    ]
