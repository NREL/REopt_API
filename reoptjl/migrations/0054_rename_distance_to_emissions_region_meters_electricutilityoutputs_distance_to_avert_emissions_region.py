# Generated by Django 4.0.7 on 2024-03-13 17:23

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reoptjl', '0053_alter_chpinputs_macrs_bonus_fraction_and_more'),
    ]

    operations = [
        migrations.RenameField(
            model_name='electricutilityoutputs',
            old_name='distance_to_emissions_region_meters',
            new_name='distance_to_avert_emissions_region_meters',
        ),
        migrations.RemoveField(
            model_name='electricutilityinputs',
            name='emissions_region',
        ),
        migrations.RemoveField(
            model_name='electricutilityoutputs',
            name='emissions_region',
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='allow_simultaneous_export_import',
            field=models.BooleanField(blank=True, default=True, help_text='If true the site has two meters (in effect).'),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='avert_emissions_region',
            field=models.TextField(blank=True, help_text="Name of the AVERT emissions region to use. Options are: 'California', 'Central', 'Florida', 'Mid-Atlantic', 'Midwest', 'Carolinas', 'New England', 'Northwest', 'New York', 'Rocky Mountains', 'Southeast', 'Southwest', 'Tennessee', 'Texas', 'Alaska', 'Hawaii (except Oahu)', 'Hawaii (Oahu)'. If emissions_factor_series_lb_<pollutant>_per_kwh inputs are not provided, avert_emissions_region overrides latitude and longitude in determining emissions factors."),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='cambium_grid_level',
            field=models.TextField(blank=True, default='enduse', help_text="Impacts grid climate emissions calculation. Options: ['enduse' or 'busbar']. Busbar refers to point where bulk generating stations connect to grid; enduse refers to point of consumption (includes distribution loss rate)."),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='cambium_levelization_years',
            field=models.IntegerField(blank=True, help_text='Expected lifetime or analysis period of the intervention being studied. Emissions will be averaged over this period. Default: analysis_years (from Financial struct)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='cambium_location_type',
            field=models.TextField(blank=True, default='GEA Regions', help_text="Geographic boundary at which emissions are calculated. Options: ['Nations', 'GEA Regions', 'States']."),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='cambium_metric_col',
            field=models.TextField(blank=True, default='lrmer_co2e', help_text='Emissions metric used. Default is Long-run marginal emissions rate for CO2-equivalant, combined combustion and pre-combustion emissions rates. Options: See metric definitions and names in the Cambium documentation.'),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='cambium_scenario',
            field=models.TextField(blank=True, default='Mid-case', help_text="Cambium Scenario for evolution of electricity sector (see Cambium documentation for descriptions).Options: ['Mid-case',  'Mid-case with tax credit expiration',  'Low renewable energy cost', 'Low renewable energy cost with tax credit expiration',   'High renewable energy cost', 'High electrification',  'Low natrual gas prices', 'High natrual gas prices', 'Mid-case with 95% decarbonization by 2050',  'Mid-case with 100% decarbonization by 2035']"),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='cambium_start_year',
            field=models.IntegerField(blank=True, default=2024, help_text='First year of operation of system. Emissions will be levelized starting in this year for the duration of cambium_levelization_years.', validators=[django.core.validators.MinValueValidator(2023), django.core.validators.MaxValueValidator(2050)]),
        ),
        migrations.AddField(
            model_name='electricutilityinputs',
            name='co2_from_avert',
            field=models.BooleanField(blank=True, default=False, help_text="Default is to use Cambium data for CO2 grid emissions. Set to `true` to instead use data from the EPA's AVERT database. "),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='avert_emissions_region',
            field=models.TextField(blank=True, help_text="Name of the AVERT emissions region to use. Options are: 'California', 'Central', 'Florida', 'Mid-Atlantic', 'Midwest', 'Carolinas', 'New England', 'Northwest', 'New York', 'Rocky Mountains', 'Southeast', 'Southwest', 'Tennessee', 'Texas', 'Alaska', 'Hawaii (except Oahu)', 'Hawaii (Oahu)'. If emissions_factor_series_lb_<pollutant>_per_kwh inputs are not provided, avert_emissions_region overrides latitude and longitude in determining emissions factors."),
        ),
        migrations.AddField(
            model_name='electricutilityoutputs',
            name='cambium_emissions_region',
            field=models.TextField(blank=True, help_text='Name of the Cambium emissions region used for climate emissions for grid electricity. Determined from site longitude and latitude and the cambium_location_type if custom emissions_factor_series_lb_CO2_per_kwh not provided and co2_from_avert is false.'),
        ),
        migrations.AddField(
            model_name='existingboilerinputs',
            name='fuel_renewable_energy_fraction',
            field=models.FloatField(blank=True, help_text='Fraction of the fuel considered renewable. Default depends on fuel type.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='emissions_factor_lb_CO2_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of CHP fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='emissions_factor_lb_NOx_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of CHP fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='emissions_factor_lb_PM25_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of CHP fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='emissions_factor_lb_SO2_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of CO2 emitted per MMBTU of CHP fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='chpinputs',
            name='fuel_renewable_energy_fraction',
            field=models.FloatField(blank=True, help_text='Fraction of the CHP fuel considered renewable. Default depends on fuel type.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricloadinputs',
            name='critical_load_fraction',
            field=models.FloatField(blank=True, default=0.5, help_text='Critical load factor is multiplied by the typical load to determine the critical load that must be met during an outage. Value must be between zero and one, inclusive.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)]),
        ),
        migrations.AlterField(
            model_name='electricloadinputs',
            name='critical_loads_kw_is_net',
            field=models.BooleanField(blank=True, default=False, help_text='If there is existing PV, must specify whether provided load is the net load after existing PV or not.'),
        ),
        migrations.AlterField(
            model_name='electricloadinputs',
            name='loads_kw_is_net',
            field=models.BooleanField(blank=True, default=True, help_text='If there is existing PV, must specify whether provided load is the net load after existing PV or not.'),
        ),
        migrations.AlterField(
            model_name='electrictariffoutputs',
            name='year_one_export_benefit_before_tax',
            field=models.FloatField(blank=True, help_text='Optimal year one value of exported energy. A positive value indicates a benefit.', null=True),
        ),
        migrations.AlterField(
            model_name='electrictariffoutputs',
            name='year_one_export_benefit_before_tax_bau',
            field=models.FloatField(blank=True, help_text='Business as usual year one value of exported energy. A positive value indicates a benefit.', null=True),
        ),
        migrations.AlterField(
            model_name='electricutilityinputs',
            name='emissions_factor_CO2_decrease_fraction',
            field=models.FloatField(blank=True, help_text='Not applied with use of Cambium data for climate emissions. Annual percent decrease in the total annual CO2 emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricutilityinputs',
            name='emissions_factor_NOx_decrease_fraction',
            field=models.FloatField(blank=True, help_text='Annual percent decrease in the total annual NOx marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricutilityinputs',
            name='emissions_factor_PM25_decrease_fraction',
            field=models.FloatField(blank=True, help_text='Annual percent decrease in the total annual PM2.5 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='electricutilityinputs',
            name='emissions_factor_SO2_decrease_fraction',
            field=models.FloatField(blank=True, help_text='Annual percent decrease in the total annual SO2 marginal emissions rate of the grid. A negative value indicates an annual increase.', null=True, validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_CO2_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of CO2e emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_NOx_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of NOx emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_PM25_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of PM2.5 emitted per MMBTU fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='existingboilerinputs',
            name='emissions_factor_lb_SO2_per_mmbtu',
            field=models.FloatField(blank=True, help_text='Pounds of SO2 emitted per MMBTU of fuel burned.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100000000.0)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='emissions_factor_lb_CO2_per_gal',
            field=models.FloatField(blank=True, default=22.58, help_text='Pounds of CO2e emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='emissions_factor_lb_NOx_per_gal',
            field=models.FloatField(blank=True, default=0.0775544, help_text='Pounds of NOx emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='emissions_factor_lb_PM25_per_gal',
            field=models.FloatField(blank=True, default=0.0, help_text='Pounds of PM2.5 emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='generatorinputs',
            name='emissions_factor_lb_SO2_per_gal',
            field=models.FloatField(blank=True, default=0.040020476, help_text='Pounds of SO2 emitted per gallon of generator fuel burned.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000.0)]),
        ),
        migrations.AlterField(
            model_name='siteinputs',
            name='min_resil_time_steps',
            field=models.IntegerField(blank=True, help_text='The minimum number consecutive timesteps that load must be fully met once an outage begins. Only applies to multiple outage modeling using inputs outage_start_time_steps and outage_durations.If no value is provided, will default to max([ElectricUtility].outage_durations).', null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='annual_emissions_from_fuelburn_tonnes_CO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2e emissions associated with the site's onsite fuel burn in an average year.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='annual_emissions_tonnes_CO2',
            field=models.FloatField(blank=True, help_text="Average annual total tons of emissions associated with the site's grid-purchased electricity and on-site fuel consumption.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='annual_emissions_tonnes_CO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of CO2e emissions associated with the site's energy consumption in an average year in the BAU case.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='annual_emissions_tonnes_NOx',
            field=models.FloatField(blank=True, help_text="Average annual total tons of emissions associated with the site's grid-purchased electricity and on-site fuel consumption.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='annual_emissions_tonnes_PM25',
            field=models.FloatField(blank=True, help_text="Average annual total tons of emissions associated with the site's grid-purchased electricity and on-site fuel consumption.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='annual_emissions_tonnes_SO2',
            field=models.FloatField(blank=True, help_text="Average annual total tons of emissions associated with the site's grid-purchased electricity and on-site fuel consumption.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='lifecycle_emissions_from_fuelburn_tonnes_CO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2e emissions associated with the site's onsite fuel burn over the analysis period.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='lifecycle_emissions_from_fuelburn_tonnes_CO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of CO2e emissions associated with the site's onsite fuel burn over the analysis period in the BAU case.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='lifecycle_emissions_tonnes_CO2',
            field=models.FloatField(blank=True, help_text="Total tons of CO2e emissions associated with the site's energy consumption over the analysis period.", null=True),
        ),
        migrations.AlterField(
            model_name='siteoutputs',
            name='lifecycle_emissions_tonnes_CO2_bau',
            field=models.FloatField(blank=True, help_text="Total tons of CO2e emissions associated with the site's energy consumption over the analysis period in the BAU case.", null=True),
        ),
    ]
